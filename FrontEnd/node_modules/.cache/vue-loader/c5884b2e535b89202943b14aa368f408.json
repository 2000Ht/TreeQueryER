{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/TreeVisView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/TreeVisView.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n    import Node from './TreeElements/Node.vue';\n    import Link from './TreeElements/Line.vue'\n    import * as d3 from \"d3\";\n\nexport default {\n  name: 'TreeVisView',\n  \n  components: {\n    Node,\n    Link\n  },\n  \n  props: {\n    hierarchicalData: {\n      type: Object\n    }\n  },\n  data() {\n    return {\n      width:  0,\n      height: 0,\n      left: 0,\n      top,\n      nodes: [],\n      links: [],\n      root: null,\n      treeData: \n        {\n          \"name\": \"Top Level\",\n          \"parent\": \"null\",\n          \"children\": [\n            {\n              \"name\": \"Level 2: A\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                }\n              ]\n            },\n            {\n              \"name\": \"Level 2: B\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                }\n              ]\n            }\n          ]\n        }\n      \n    }\n  },\n  mounted() {\n    console.log('hierarchicalData', this.hierarchicalData)\n    this.initTreeLayout()\n    this.renderNodeLinkTree()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode'\n    ]),\n    gTransform() {\n      return `translate(350, 20)`\n    },\n  },\n  methods: {\n    initTreeLayout() {\n      console.log('initTreeLayout')\n    },\n    computeLinkKey(link) {\n      let thisNode = link\n      let thisParentNode = link.parent\n      return 'x' + thisParentNode.x + '-y' + thisParentNode.y + '=' + 'x' + thisNode.x + '-y' + thisNode.y\n    },\n    computeNodeKey(node) {\n      let nodeFill = node\n      let nodeCollapsed = node.children==null?1:0\n      return 'x' + node.x + '-y' + node.y + '-' + nodeCollapsed\n    },\n    renderNodeLinkTree() {\n\n      // render the node link tree visualization using d3\n      var treeData = this.hierarchicalData\n\n      // Set the dimensions and margins of the diagram\n      var margin = {top: 20, right: 90, bottom: 30, left: 90},\n          width = 100 - margin.left - margin.right,\n          height = 800 - margin.top - margin.bottom;\n      \n      this.width = width + margin.right + margin.left\n      this.height = height + margin.top + margin.bottom\n      this.left = 90\n      this.top = 20\n        \n      // declares a tree layout and assigns the size\n      var treemap = d3.tree().size([this.height, this.width]);\n\n      // Assigns parent, children, height, depth\n      this.root = d3.hierarchy(treeData, function(d) { return d.children; });\n      console.log('root:', this.root)\n      console.log('height', this.height)\n      this.root.x0 = this.height / 2;\n      this.root.y0 = 0;\n\n      var treeData = treemap(this.root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 65});\n      this.nodes = nodes\n      this.links = links\n      \n    },\n    updateTree(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n         d.children = d._children;\n         d._children = null;\n        }\n        console.log(\"updateRoot:\",this.root)\n        var treemap = d3.tree().size([this.height, this.width]);\n        var treeData = treemap(this.root);\n\n        // Compute the new tree layout.\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 65});\n        this.nodes = nodes\n        this.links = links\n        console.log(\"updateLink: \", links)\n        console.log(\"updateNode: \", nodes)\n        \n    }\n  }\n}\n",{"version":3,"sources":["TreeVisView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"TreeVisView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"treevisview\">\n    <svg class=\"treevisview-canvas\">\n      <g :transform=\"gTransform\">\n        <Link v-for=\"link in links\" :link=\"link\" :key=\"computeLinkKey(link)\"></Link>\n        <Node v-for=\"node in nodes\" :node=\"node\" :key=\"computeNodeKey(node)\" @collapseTree=\"updateTree\"></Node>\n      </g>\n    </svg>\n  </div>\n</template>\n\n\n\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import Node from './TreeElements/Node.vue';\n    import Link from './TreeElements/Line.vue'\n    import * as d3 from \"d3\";\n\nexport default {\n  name: 'TreeVisView',\n  \n  components: {\n    Node,\n    Link\n  },\n  \n  props: {\n    hierarchicalData: {\n      type: Object\n    }\n  },\n  data() {\n    return {\n      width:  0,\n      height: 0,\n      left: 0,\n      top,\n      nodes: [],\n      links: [],\n      root: null,\n      treeData: \n        {\n          \"name\": \"Top Level\",\n          \"parent\": \"null\",\n          \"children\": [\n            {\n              \"name\": \"Level 2: A\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                }\n              ]\n            },\n            {\n              \"name\": \"Level 2: B\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                }\n              ]\n            }\n          ]\n        }\n      \n    }\n  },\n  mounted() {\n    console.log('hierarchicalData', this.hierarchicalData)\n    this.initTreeLayout()\n    this.renderNodeLinkTree()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode'\n    ]),\n    gTransform() {\n      return `translate(350, 20)`\n    },\n  },\n  methods: {\n    initTreeLayout() {\n      console.log('initTreeLayout')\n    },\n    computeLinkKey(link) {\n      let thisNode = link\n      let thisParentNode = link.parent\n      return 'x' + thisParentNode.x + '-y' + thisParentNode.y + '=' + 'x' + thisNode.x + '-y' + thisNode.y\n    },\n    computeNodeKey(node) {\n      let nodeFill = node\n      let nodeCollapsed = node.children==null?1:0\n      return 'x' + node.x + '-y' + node.y + '-' + nodeCollapsed\n    },\n    renderNodeLinkTree() {\n\n      // render the node link tree visualization using d3\n      var treeData = this.hierarchicalData\n\n      // Set the dimensions and margins of the diagram\n      var margin = {top: 20, right: 90, bottom: 30, left: 90},\n          width = 100 - margin.left - margin.right,\n          height = 800 - margin.top - margin.bottom;\n      \n      this.width = width + margin.right + margin.left\n      this.height = height + margin.top + margin.bottom\n      this.left = 90\n      this.top = 20\n        \n      // declares a tree layout and assigns the size\n      var treemap = d3.tree().size([this.height, this.width]);\n\n      // Assigns parent, children, height, depth\n      this.root = d3.hierarchy(treeData, function(d) { return d.children; });\n      console.log('root:', this.root)\n      console.log('height', this.height)\n      this.root.x0 = this.height / 2;\n      this.root.y0 = 0;\n\n      var treeData = treemap(this.root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 65});\n      this.nodes = nodes\n      this.links = links\n      \n    },\n    updateTree(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n         d.children = d._children;\n         d._children = null;\n        }\n        console.log(\"updateRoot:\",this.root)\n        var treemap = d3.tree().size([this.height, this.width]);\n        var treeData = treemap(this.root);\n\n        // Compute the new tree layout.\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 65});\n        this.nodes = nodes\n        this.links = links\n        console.log(\"updateLink: \", links)\n        console.log(\"updateNode: \", nodes)\n        \n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.treevisview {\n  height: 100%;\n  width: 100%;\n  .treevisview-canvas {\n    height: 100%;\n    width: 100%;\n  }\n}\n</style>\n\n"]}]}
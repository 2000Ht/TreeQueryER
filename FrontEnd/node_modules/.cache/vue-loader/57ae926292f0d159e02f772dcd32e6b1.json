{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/OverviewPanel.vue?vue&type=style&index=1&id=1c460a7e&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/OverviewPanel.vue","mtime":1662564295352},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/deep/.el-input__inner{   /*或者 .s2>>>.el-input__inner  */\n  // background:rgba(0,0,0,0.2);    /*调整inner的背景色，透明*/\n  height: 30px;    /*调整inner的高度*/\n  width: 150px;\n  // border-radius: 1px;    /*输入框圆角值*/\n}\n\n",{"version":3,"sources":["OverviewPanel.vue"],"names":[],"mappingsmBA;AACA;AACA;AACA;AACA;AACA","file":"OverviewPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"overview-panel-view\">\n    <div class=\"dataset-part\">\n      <span class=\"dataset-text\">Dataset</span>\n        <div class=\"dataset-select\">\n          <el-select v-model=\"selectValue\">\n            <el-option\n              v-for=\"item in options\"\n              :key=\"item.value\"\n              :label=\"item.value\"\n              :value=\"item.value\">\n            </el-option>\n          </el-select>\n      </div>\n      <i class=\"el-icon-circle-plus-outline\"></i>\n      <!-- <svg t=\"1660402717121\" class=\"dataset-icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2095\" width=\"25\" height=\"25\"><path d=\"M512 958.016611c-119.648434 0-232.1288-46.367961-316.736783-130.559656-84.640667-84.255342-131.263217-196.255772-131.263217-315.455235 0-119.168499 46.624271-231.199892 131.232254-315.424271 84.607983-84.191695 197.088348-130.559656 316.736783-130.559656s232.1288 46.367961 316.704099 130.559656c84.67163 84.224378 131.263217 196.255772 131.263217 315.391587 0.032684 119.199462-46.591587 231.232576-131.263217 315.455235C744.1288 911.615966 631.648434 958.016611 512 958.016611zM512 129.983389c-102.623626 0-199.071738 39.743475-271.583282 111.936783-72.480581 72.12794-112.416718 168.063432-112.416718 270.079828s39.903454 197.951888 112.384034 270.047144c72.511544 72.191587 168.959656 111.936783 271.583282 111.936783 102.592662 0 199.071738-39.743475 271.583282-111.936783 72.480581-72.160624 112.416718-168.063432 112.384034-270.079828 0-102.016396-39.903454-197.919204-112.384034-270.016181C711.071738 169.759548 614.592662 129.983389 512 129.983389z\" p-id=\"2096\"></path><path d=\"M736.00086 480.00086 544.00086 480.00086 544.00086 288.00086c0-17.664722-14.336138-32.00086-32.00086-32.00086s-32.00086 14.336138-32.00086 32.00086l0 192L288.00086 480.00086c-17.664722 0-32.00086 14.336138-32.00086 32.00086s14.336138 32.00086 32.00086 32.00086l192 0 0 192c0 17.695686 14.336138 32.00086 32.00086 32.00086s32.00086-14.303454 32.00086-32.00086L544.00258 544.00086l192 0c17.695686 0 32.00086-14.336138 32.00086-32.00086S753.696546 480.00086 736.00086 480.00086z\" p-id=\"2097\"></path></svg> -->\n    </div>\n    <span class=\"projection-text\">Projection</span>\n    <div class=\"projection-part\" ref=\"projectionPanel\">\n        <svg id=\"projection-chart\" style=\"position: absolute; width: 100%; height: 100%;\">\n        </svg>\n    </div>\n    <span class=\"distribution-text\">Distribution</span>\n    <div class=\"distribution-part\">\n      <div class=\"distribution-div\">\n        <svg id=\"bar-size\" style=\"width: 100%; height: 100%\"></svg>\n      </div>\n      <div class=\"distribution-div\">\n        <svg id=\"bar-height\" style=\"width: 100%; height: 100%\"></svg>\n      </div>\n      <div class=\"distribution-div\">\n        <svg id=\"bar-width\" style=\"width: 100%; height: 100%\"></svg>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\n\nexport default {\n  name: 'OverviewPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n      frontPoint: null,\n      selectValue: \"Citation\",\n      options:[\n        {\n          value: \"Citation\"\n        },\n        {\n          value: \"Repost\"\n        }\n      ],\n\n      \n    }\n  },\n  beforeMount(){\n\n\n  },\n  mounted() {\n    this.width = this.$refs.projectionPanel.clientWidth\n    this.height = this.$refs.projectionPanel.clientHeight\n    this.draw_projection_chart(this.width, this.height)\n    this.draw_size_bar()\n    this.draw_height_bar()\n    this.draw_width_bar()\n    \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n        this.width = this.$refs.projectionPanel.clientWidth\n        this.height = this.$refs.projectionPanel.clientHeight\n        d3.select('#distribute-chart').remove()\n        d3.select('#bar-size-1').remove()\n        d3.select('#bar-height-1').remove()\n        d3.select('#bar-width-1').remove()\n        this.draw_projection_chart(this.width, this.height)\n        this.draw_size_bar()\n        this.draw_height_bar()\n        this.draw_width_bar()\n      }\n\n  },\n  computed: {\n    ...mapState([\n      'visPanelState'\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n      'DATA_QUERY_INDEX'\n    ]),\n    draw_projection_chart: function(width, height){\n      let self = this\n      d3.csv('treeDataset/umap_projection_keywords1.csv', d3.autoType)\n        .then(function(data) {\n        width = width -10\n        height = height - 10\n\n        var svg = d3.select(self.$el).select('#projection-chart')\n                .append(\"g\")\n                .attr('id', 'distribute-chart')\n                .attr(\"transform\", \"translate(0, 0)\");\n\n\n        var k = height / width,\n            x0 = [-18, 18],\n            y0 = [-19 , 25],\n            x = d3.scaleLinear().domain(x0).range([35, width-20]),\n            y = d3.scaleLinear().domain(y0).range([height-30, 30]);\n            // z = d3.scaleOrdinal(d3.schemeCategory10);\n\n        var xAxis = d3.axisBottom(x).ticks(12),\n            yAxis = d3.axisLeft(y).ticks(12 * height / width);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"axis axis--x\")\n            .attr(\"transform\", \"translate(0,\" + (height - 30) + \")\")\n            .call(xAxis);\n\n        svg.append(\"text\")\n         .style(\"text-anchor\", \"middle\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height)\n            .attr(\"font-size\", \"12px\")\n         .text(\"umap-x\");\n\n        svg.append(\"g\")\n            .attr(\"class\", \"axis axis--y\")\n            .attr(\"transform\", \"translate(35,0)\")\n            .call(yAxis);\n        \n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0)\n            .attr(\"x\",-height/2)\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n           .attr(\"font-size\", \"12px\")\n         .text(\"umap-y\");\n \n\n        var brush = d3.brush().on(\"end\", brushended),\n            idleTimeout,\n            idleDelay = 350;\n        svg.append(\"rect\")\n        .attr(\"class\", \"rect\")\n        .attr(\"width\", width-45)\n        .attr(\"height\", height-50)\n        .attr(\"transform\", \"translate(35,20)\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", \"1\")\n        .attr(\"stroke\", \"black\")\n\n\n        svg.append(\"g\")\n          .attr(\"class\", \"brush\")\n          .call(brush)\n          .selectAll('rect')\n          .attr('height', height);\n\n        var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"svg:rect\")\n            .attr(\"width\", width-45 )\n            .attr(\"height\", height-50 )\n            .attr(\"x\", 35) \n            .attr(\"y\", 20); \n\n        var scatter = svg.append(\"g\")\n             .attr(\"id\", \"scatterplot\")\n             .attr(\"clip-path\", \"url(#clip)\");\n\n        var points = scatter.selectAll(\"circle\")\n          .data(data)\n          .enter().append(\"circle\")\n            .attr(\"cx\", function(d) { return x(d['x']); })\n            .attr(\"cy\", function(d) { return y(d['y']); })\n            .attr(\"z\", function(d) {return d['z']})\n            .attr(\"r\", function(d){\n              let tmpData = sysDatasetObj.getVisData()\n              if('index' in tmpData && d['z'] == tmpData['index']){\n                return 7\n              }\n              else return 1.5 \n            })\n            .attr(\"fill\", function(d){\n              let tmpData = sysDatasetObj.getVisData()\n              if('index' in tmpData && d['z'] == tmpData['index']){\n                return \"orange\"\n              }\n              else return \"#B3B3B3\"\n            })\n      \n\n        points.on('click', function(){\n            if(self.frontPoint != null){\n              d3.select(self.frontPoint)\n              .attr(\"fill\", \"#B3B3B3\")\n              .attr(\"r\", 1.5);\n            }\n            d3.select(this)\n              .attr(\"fill\",\"orange\")\n              .attr(\"r\", 7);\n\n            self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"z\")))\n            self.frontPoint = this\n        });\n\n        svg.selectAll(\".domain\")\n            .style(\"display\", \"none\");\n\n\n\n        function brushended() {\n          var s = d3.event.selection;\n          if (!s) {\n            if (!idleTimeout) return idleTimeout = setTimeout(idled, idleDelay);\n            x.domain(x0);\n            y.domain(y0);\n          } else {\n            x.domain([s[0][0], s[1][0]].map(x.invert, x));\n            y.domain([s[1][1], s[0][1]].map(y.invert, y));\n            svg.select(\".brush\").call(brush.move, null);\n          }\n          zoom();\n        }\n\n        function idled() {\n          idleTimeout = null;\n        }\n\n        function zoom() {\n          var t = svg.transition().duration(750);\n          svg.select(\".axis--x\").transition(t).call(xAxis);\n          svg.select(\".axis--y\").transition(t).call(yAxis);\n          svg.selectAll(\"circle\").transition(t)\n              .attr(\"cx\", function(d) { return x(d['x']); })\n              .attr(\"cy\", function(d) { return y(d['y']); })\n              // .attr(\"r\", function(d){\n              //   var s = d3.event.selection;\n              //   k = (width-60)/(s[1][0]-s[0][0]) * (height-60)/(s[1][1]-s[0][1])\n              //   console.log(s[1][0]-s[0][0], s[1][1]-s[0][1])\n              //   return 1.5 * k\n              // });\n        }\n\n        })\n\n    },\n    draw_size_bar: function(){\n      var self = this\n      d3.csv('treeDataset/size.csv', d3.autoType)\n        .then(function(data) {\n            var margin = {top: 10, right: 10, bottom: 50, left: 35},\n              width = document.getElementById(\"bar-size\").clientWidth - margin.left - margin.right,\n              height = document.getElementById(\"bar-size\").clientHeight - margin.top - margin.bottom;\n\n            var highlightData = sysDatasetObj.gethighlightBar()\n            var highlightFlag = false\n            if('size' in highlightData){\n              highlightData = highlightData['size']\n              highlightFlag = true\n            }\n\n\n            // append the svg object to the body of the page\n            var svg = d3.select(self.$el).select(\"#bar-size\")\n                .append(\"g\")\n                .attr(\"id\", 'bar-size-1')\n                .attr(\"transform\",\n                      \"translate(\" + margin.left + \", \" +  margin.right + \")\");\n            \n            svg.append(\"text\")\n              .style(\"text-anchor\", \"middle\")\n              .attr(\"x\", width-20)\n              .attr(\"y\", 12)\n              .attr(\"font-size\", \"15px\")\n              .attr(\"font-weight\", \"bolder\")\n              .attr(\"fill\", \"#666666\")\n              .text(\"Size\");\n\n            var x = d3.scaleBand()\n              .range([ 0, width ])\n              .domain(data.map(function(d) { return d.x; }))\n              .padding(0.2);\n            svg.append(\"g\")\n              .attr(\"class\", \"x-axis\")\n              .attr(\"transform\", \"translate(0,\" + height + \")\")\n              .call(d3.axisBottom(x))\n              .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n                .style(\"text-anchor\", \"end\");\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n              .domain([0, 1200])\n              .range([ height, 0]);\n\n            svg.append(\"g\")\n              .call(d3.axisLeft(y).ticks(4));\n\n            // Bars\n            svg.selectAll(\"mybar\")\n              .data(data)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"#CCCCCC\")   \n\n            if(highlightFlag){\n              svg.selectAll(\"highlightBar\")\n              .data(highlightData)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"orange\")   \n            }\n\n\n            svg.append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append('text')\n            .attr(\"class\", \"tree-name\")\n            .attr(\"x\", function(d) { return x(d.x); })\n            .attr(\"y\", function(d) { return y(d.y); })\n            .attr(\"dx\", \"10\")\n            .attr(\"dy\", '-1')\n            .attr(\"text-anchor\", \"middle\")\n            .text(function(d){return d.y;\n            })\n            .attr('font-size', \"10px\")\n            .attr('fill', '#808080');\n              \n        })\n    },\n    draw_height_bar: function(){\n      var self = this\n      d3.csv('treeDataset/height.csv', d3.autoType)\n        .then(function(data) {\n            var margin = {top: 10, right: 10, bottom: 50, left: 35},\n              width = document.getElementById(\"bar-height\").clientWidth - margin.left - margin.right,\n              height = document.getElementById(\"bar-height\").clientHeight - margin.top - margin.bottom;\n\n            // append the svg object to the body of the page\n            var svg = d3.select(self.$el).select(\"#bar-height\")\n                .append(\"g\")\n                .attr(\"id\", 'bar-height-1')\n                .attr(\"transform\",\n                      \"translate(\" + margin.left + \", \" +  margin.right + \")\");\n\n            var highlightData = sysDatasetObj.gethighlightBar()\n            var highlightFlag = false\n            if('height' in highlightData){\n              highlightData = highlightData['height']\n              highlightFlag = true\n            }\n            \n            svg.append(\"text\")\n              .style(\"text-anchor\", \"middle\")\n              .attr(\"x\", width-20)\n              .attr(\"y\", 12)\n              .attr(\"font-size\", \"15px\")\n              .attr(\"font-weight\", \"bolder\")\n              .attr(\"fill\", \"#666666\")\n              .text(\"Height\");\n\n            var x = d3.scaleBand()\n              .range([ 0, width ])\n              .domain(data.map(function(d) { return d.x; }))\n              .padding(0.2);\n            svg.append(\"g\")\n              .attr(\"class\", \"x-axis\")\n              .attr(\"transform\", \"translate(0,\" + height + \")\")\n              .call(d3.axisBottom(x))\n              .selectAll(\"text\")\n                .attr(\"transform\", \"translate(0,0)\")\n                .style(\"text-anchor\", \"middle\");\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n              .domain([0, 1200])\n              .range([ height, 0]);\n\n            svg.append(\"g\")\n              .call(d3.axisLeft(y).ticks(4));\n\n            // Bars\n            svg.selectAll(\"mybar\")\n              .data(data)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"#CCCCCC\")\n            \n            if(highlightFlag){\n              svg.selectAll(\"highlightBar\")\n              .data(highlightData)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"orange\")   \n            }\n\n            svg.append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append('text')\n            .attr(\"class\", \"tree-name\")\n            .attr(\"x\", function(d) { return x(d.x); })\n            .attr(\"y\", function(d) { return y(d.y); })\n            .attr(\"dx\", \"10\")\n            .attr(\"dy\", '-1')\n            .attr(\"text-anchor\", \"middle\")\n            .text(function(d){return d.y;\n            })\n            .attr('font-size', \"10px\")\n            .attr('fill', '#808080');\n              \n        })\n    },\n    draw_width_bar: function(){\n      var self = this\n      d3.csv('treeDataset/width.csv', d3.autoType)\n        .then(function(data) {\n            var margin = {top: 10, right: 10, bottom: 50, left: 35},\n              width = document.getElementById(\"bar-width\").clientWidth - margin.left - margin.right,\n              height = document.getElementById(\"bar-width\").clientHeight - margin.top - margin.bottom;\n\n            // append the svg object to the body of the page\n            var svg = d3.select(self.$el).select(\"#bar-width\")\n                .append(\"g\")\n                .attr(\"id\", 'bar-width-1')\n                .attr(\"transform\",\n                      \"translate(\" + margin.left + \", \" +  margin.right + \")\");\n            \n            var highlightData = sysDatasetObj.gethighlightBar()\n            var highlightFlag = false\n            if('width' in highlightData){\n              highlightData = highlightData['width']\n              highlightFlag = true\n            }\n\n            svg.append(\"text\")\n              .style(\"text-anchor\", \"middle\")\n              .attr(\"x\", width-20)\n              .attr(\"y\", 12)\n              .attr(\"font-size\", \"15px\")\n              .attr(\"font-weight\", \"bolder\")\n              .attr(\"fill\", \"#666666\")\n              .text(\"Width\");\n\n            var x = d3.scaleBand()\n              .range([ 0, width ])\n              .domain(data.map(function(d) { return d.x; }))\n              .padding(0.2);\n            svg.append(\"g\")\n              .attr(\"class\", \"x-axis\")\n              .attr(\"transform\", \"translate(0,\" + height + \")\")\n              .call(d3.axisBottom(x))\n              .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n                .style(\"text-anchor\", \"end\");\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n              .domain([0, 1200])\n              .range([ height, 0]);\n\n            svg.append(\"g\")\n              .call(d3.axisLeft(y).ticks(4));\n\n            // Bars\n            svg.selectAll(\"mybar\")\n              .data(data)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"#CCCCCC\")\n\n              if(highlightFlag){\n              svg.selectAll(\"highlightBar\")\n              .data(highlightData)\n              .enter()\n              .append(\"rect\")\n                .attr(\"x\", function(d) { return x(d.x); })\n                .attr(\"y\", function(d) { return y(d.y); })\n                .attr(\"width\", x.bandwidth())\n                .attr(\"height\", function(d) { return height - y(d.y); })\n                .attr(\"fill\", \"orange\")   \n            }\n \n\n            svg.append(\"g\")\n            .selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append('text')\n            .attr(\"class\", \"tree-name\")\n            .attr(\"x\", function(d) { return x(d.x); })\n            .attr(\"y\", function(d) { return y(d.y); })\n            .attr(\"dx\", \"10\")\n            .attr(\"dy\", '-1')\n            .attr(\"text-anchor\", \"middle\")\n            .text(function(d){return d.y;\n            })\n            .attr('font-size', \"10px\")\n            .attr('fill', '#808080');\n              \n        })\n    },\n\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.overview-panel-view {\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  right: 0%;\n  bottom: 0%;\n  .dataset-part{\n    position:absolute;\n    top: 1%;\n    bottom: 90%;\n    left: 0%;\n    right: 0%;\n    .dataset-text{\n      position:absolute;\n      top: 6%;\n      left: 5%;\n      font-size: 1rem;\n      font-weight: bolder;\n      color: black;\n    }\n    .dataset-select{\n      position:absolute;\n      top: 3%;\n      left: 30%;\n    }\n    .el-icon-circle-plus-outline{\n      position:absolute;\n      top: 12%;\n      left: 83%;\n    }\n  }\n  .projection-text{\n      position:absolute;\n      top: 7%;\n      left: 5%;\n      font-size: 1rem;\n      font-weight: bolder;\n      color: black;\n  }\n  .projection-part{\n    position: absolute;\n    top: 8%;\n    bottom: 60%;\n    left: 0%;\n    right: 0%;\n  }\n  .distribution-text{\n      position:absolute;\n      top: 40%;\n      left: 5%;\n      font-size: 1rem;\n      font-weight: bolder;\n      color: black;\n  }\n  .distribution-part{\n    position: absolute;\n    top: 43%;\n    bottom: 2%;\n    left: 0%;\n    right: 0%;\n  }\n\n\n\n}\n\n</style>\n<style scoped lang=\"less\">\n  /deep/.el-input__inner{   /*或者 .s2>>>.el-input__inner  */\n    // background:rgba(0,0,0,0.2);    /*调整inner的背景色，透明*/\n    height: 30px;    /*调整inner的高度*/\n    width: 150px;\n    // border-radius: 1px;    /*输入框圆角值*/\n  }\n\n</style>"]}]}
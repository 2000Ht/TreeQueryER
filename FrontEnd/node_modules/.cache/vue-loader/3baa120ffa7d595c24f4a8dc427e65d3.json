{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/REView/REComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/REView/REComponent.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\nimport { getComponentKey } from '@/utils/componentkey.js'\nimport REComponentTitle from '@/views/REView/REComponentTitle.vue'\n\n\nexport default {\n  name: 'REComponent',\n  components: {\n    REComponentTitle\n  },\n  props: {\n  },\n  data() {\n    return {\n    }\n  },\n  mounted() {\n   \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'lastDom',\n      'curRegexIndex'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n        'UPDATE_RETREE_DATA_STATE',\n        'UPDATE_SELECTED_DOM',\n        'RESET_DOM_KEY_STATE',\n        'UPDATE_REVIEW_DATA',\n        'UPDATE_REGEX_COMMIT_STATE',\n        'UPDATE_REGEX_CONTENT'\n    ]),\n    concatClick(d){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpNode = this.newNode()\n            tmpNode['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpPath = this.newPath()\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpPath)\n          tmpPath['composition'].splice(0, 0, this.selectedDom)\n          tmpPath['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent'] = tmpPath\n        }\n      }\n      else{\n        if(this.lastDom){\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.lastDom\n          this.lastDom['composition'].push(tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    upperClick(){\n      if(this.selectedDom){\n        if('branchUpper' in this.selectedDom){\n          if(this.selectedDom['branchRepeat'][1] == 1 && this.selectedDom['branchRepeat'][0] == 1) {\n            this.selectedDom['branchUpper'] = true\n          }\n        }\n        else if(this.selectedDom['repeat'][1] == 1 && this.selectedDom['repeat'][0] == 1)\n          this.selectedDom['upper'] = true\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    orClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' || this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpOr = this.newOr()\n          tmpOr['parent'] = this.selectedDom['parent']\n          var tmpIndex = this.selectedDom['index']\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpOr)\n          this.selectedDom['parent'] = tmpOr\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = tmpOr\n          tmpOr['composition'].push(this.selectedDom)\n          tmpOr['composition'].push(tmpNode)\n        } \n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    notClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node'){\n          this.selectedDom['notFlag'] = true\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    branchClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['type'] = 'wholeTree'\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n        }\n        if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n          else if(this.selectedDom['type'] == 'branch'){\n            var tmpPath = this.newPath()\n            tmpPath['branchUpper'] = true\n            tmpPath['branchRepeat'] = [1,1]\n            tmpPath['parent'] = this.selectedDom\n            this.selectedDom['composition'].push(tmpPath)\n          }\n        }\n      }\n      else{\n        if(this.lastDom){\n          if(this.lastDom['type'] == 'path'){\n            this.lastDom['type'] = 'wholeTree'\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n          else if(this.lastDom['type'] == 'wholeTree'){\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE() \n      this.RESET_DOM_KEY_STATE()     \n    },\n    existClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          \n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['exist']\n          this.selectedDom['exist']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n            this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom         \n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()    \n    },\n    allClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['all']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exallist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['all']\n          this.selectedDom['all']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n                  this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()   \n    },\n    anyClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Any'\n        this.selectedDom['nodeLabel'] = '.'\n        this.selectedDom['nodeColor'] = '#22CCCC'\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    rootClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Root'\n        this.selectedDom['nodeLabel'] = '^'\n        this.selectedDom['nodeColor'] = '#CC2222'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['height'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    leafClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Leaf'\n        this.selectedDom['nodeLabel'] = '$'\n        this.selectedDom['nodeColor'] = '#30CC22'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['degree'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    newNode(){\n      var retNode = {}\n      retNode['type'] = 'node'\n      retNode['repeat'] = [1,1]\n      retNode['data'] = {}\n      retNode['key'] = getComponentKey()\n      return retNode\n    },\n    newPath(){\n      var retPath = {}\n      retPath['type'] = 'path'\n      retPath['repeat'] = [1,1]\n      retPath['composition'] = []\n      var tmpNode  = this.newNode()\n      tmpNode['parent'] = retPath\n      retPath['composition'].push(tmpNode)\n      retPath['key'] = getComponentKey()\n      return retPath \n    },\n    newOr(){\n      var retOr = {}\n      retOr['type'] = 'or'\n      retOr['repeat'] = [1, 1]\n      retOr['composition'] = []\n      retOr['key'] = getComponentKey()\n      return retOr\n    },\n    newBranch(){\n      var retBranch = {}\n      retBranch['type'] = 'branch'\n      retBranch['composition'] = []\n      retBranch['key'] = getComponentKey()\n      retBranch['repeat'] = [1,1]\n      var tmpPath = this.newPath()\n      tmpPath['branchRepeat'] = [1, 1]\n      tmpPath['branchUpper'] = true\n      tmpPath['parent'] = retBranch\n      retBranch['composition'].push(tmpPath)\n      return retBranch\n    },\n    newWholeTree(){\n      var retWholeTree = {}\n      retWholeTree['type'] = 'wholeTree'\n      retWholeTree['key'] = getComponentKey()\n      retWholeTree['root'] = {}\n      retWholeTree['root']['parent'] = retWholeTree\n      retWholeTree['branch'] = this.newBranch()\n      retWholeTree['branch']['parent'] = retWholeTree\n      return retWholeTree\n\n    },\n    newElementComposition(){\n      var retElementComposition = {}\n      retElementComposition['type'] = 'elementComposition'\n      retElementComposition['exist'] = {}\n      retElementComposition['exist']['type'] = 'exist'\n      retElementComposition['exist']['composition'] = [] \n      retElementComposition['all'] = {}\n      retElementComposition['all']['type'] = 'all'\n      retElementComposition['all']['composition'] = []\n      retElementComposition['key'] = getComponentKey()\n      return retElementComposition\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {\n            \"type\": \"exist\",\n            \"composition\": [],\n          }\n          this.selectedDom['all'] = {\n            \"type\": \"all\",\n            \"composition\": [],\n          }\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.UPDATE_RETREE_DATA_STATE()  \n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE()\n      this.UPDATE_REGEX_CONTENT()\n    },\n    resetRegex(){\n      sysDatasetObj.resetRegex(this.curRegexIndex)\n      var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n      this.UPDATE_REVIEW_DATA()\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()\n    }\n\n  }\n}\n",{"version":3,"sources":["REComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"REComponent.vue","sourceRoot":"src/views/REView","sourcesContent":["<template>\n <div class=\"re-component-view\">\n   <div class=\"re-Icon\">\n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"notClick\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"existClick\"><img src=\"../../assets/JPG/ExistIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"allClick\"><img src=\"../../assets/JPG/AllIcon.jpg\"></button>\n        </div>\n    </div>\n    <div class=\"commit-delete-btn\">\n      <svg t=\"1646724215920\" v-on:click=\"deleteRegex\" class=\"delete-button operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3975\" width=\"25\" height=\"25\"><path d=\"M874.666667 241.066667h-202.666667V170.666667c0-40.533333-34.133333-74.666667-74.666667-74.666667h-170.666666c-40.533333 0-74.666667 34.133333-74.666667 74.666667v70.4H149.333333c-17.066667 0-32 14.933333-32 32s14.933333 32 32 32h53.333334V853.333333c0 40.533333 34.133333 74.666667 74.666666 74.666667h469.333334c40.533333 0 74.666667-34.133333 74.666666-74.666667V305.066667H874.666667c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32zM416 170.666667c0-6.4 4.266667-10.666667 10.666667-10.666667h170.666666c6.4 0 10.666667 4.266667 10.666667 10.666667v70.4h-192V170.666667z m341.333333 682.666666c0 6.4-4.266667 10.666667-10.666666 10.666667H277.333333c-6.4 0-10.666667-4.266667-10.666666-10.666667V309.333333h490.666666V853.333333z\" p-id=\"3976\"></path><path d=\"M426.666667 736c17.066667 0 32-14.933333 32-32V490.666667c0-17.066667-14.933333-32-32-32s-32 14.933333-32 32v213.333333c0 17.066667 14.933333 32 32 32zM597.333333 736c17.066667 0 32-14.933333 32-32V490.666667c0-17.066667-14.933333-32-32-32s-32 14.933333-32 32v213.333333c0 17.066667 14.933333 32 32 32z\" p-id=\"3977\"></path></svg>\n      <!-- <el-button class=\"delete-button\" v-on:click=\"deleteRegex\">\n          delete\n      </el-button> -->\n<svg t=\"1646724379273\" v-on:click=\"resetRegex\" class=\"reset-button operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4124\" width=\"25\" height=\"25\"><path d=\"M934.4 206.933333c-17.066667-4.266667-34.133333 6.4-38.4 23.466667l-23.466667 87.466667C797.866667 183.466667 654.933333 96 497.066667 96 264.533333 96 74.666667 281.6 74.666667 512s189.866667 416 422.4 416c179.2 0 339.2-110.933333 398.933333-275.2 6.4-17.066667-2.133333-34.133333-19.2-40.533333-17.066667-6.4-34.133333 2.133333-40.533333 19.2-51.2 138.666667-187.733333 232.533333-339.2 232.533333C298.666667 864 138.666667 706.133333 138.666667 512S300.8 160 497.066667 160c145.066667 0 277.333333 87.466667 330.666666 217.6l-128-36.266667c-17.066667-4.266667-34.133333 6.4-38.4 23.466667-4.266667 17.066667 6.4 34.133333 23.466667 38.4l185.6 49.066667c2.133333 0 6.4 2.133333 8.533333 2.133333 6.4 0 10.666667-2.133333 17.066667-4.266667 6.4-4.266667 12.8-10.666667 14.933333-19.2l49.066667-185.6c0-17.066667-8.533333-34.133333-25.6-38.4z\" p-id=\"4125\"></path></svg>\n      <!-- <el-button class=\"resset-button\" v-on:click=\"resetRegex\">\n          reset\n      </el-button> -->\n\n<!-- <svg t=\"1646723415525\" class=\"commit-icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3134\" width=\"25\" height=\"25\"><path d=\"M874.666667 501.333333c-17.066667 0-32 14.933333-32 32v298.666667c0 6.4-4.266667 10.666667-10.666667 10.666667H192c-6.4 0-10.666667-4.266667-10.666667-10.666667V192c0-6.4 4.266667-10.666667 10.666667-10.666667h469.333333c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32H192C151.466667 117.333333 117.333333 151.466667 117.333333 192v640c0 40.533333 34.133333 74.666667 74.666667 74.666667h640c40.533333 0 74.666667-34.133333 74.666667-74.666667V533.333333c0-17.066667-14.933333-32-32-32z\" p-id=\"3135\"></path><path d=\"M940.8 168.533333c-12.8-12.8-32-12.8-44.8 0l-390.4 384-106.666667-106.666666c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l130.133334 128c6.4 6.4 14.933333 8.533333 23.466666 8.533333s17.066667-2.133333 23.466667-8.533333l411.733333-405.333334c8.533333-10.666667 10.666667-32-2.133333-44.8z\" p-id=\"3136\"></path></svg> -->\n      <svg t=\"1646723957691\" v-on:click=\"commitRegex\" class=\"commit-icon operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3830\" width=\"25\" height=\"25\"><path d=\"M512 74.666667C270.933333 74.666667 74.666667 270.933333 74.666667 512S270.933333 949.333333 512 949.333333 949.333333 753.066667 949.333333 512 753.066667 74.666667 512 74.666667z m0 810.666666c-204.8 0-373.333333-168.533333-373.333333-373.333333S307.2 138.666667 512 138.666667 885.333333 307.2 885.333333 512 716.8 885.333333 512 885.333333z\" p-id=\"3831\"></path><path d=\"M701.866667 381.866667L448 637.866667 322.133333 512c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l149.333334 149.333333c6.4 6.4 14.933333 8.533333 23.466666 8.533334s17.066667-2.133333 23.466667-8.533334l277.333333-277.333333c12.8-12.8 12.8-32 0-44.8-14.933333-12.8-36.266667-12.8-49.066666-2.133333z\" p-id=\"3832\"></path></svg>\n    </div>\n\n                <!-- <div class=\"anyIcon\">\n          <button id=\"close-image\" @click=\"anyClick\"><img src=\"../../assets/JPG/AnyIcon.jpg\"></button>\n        </div>\n                <div class=\"rootIcon\">\n          <button id=\"close-image\" @click=\"rootClick\"><img src=\"../../assets/JPG/RootIcon.jpg\"></button>\n        </div>\n                <div class=\"leafIcon\">\n          <button id=\"close-image\" @click=\"leafClick\"><img src=\"../../assets/JPG/LeafIcon.jpg\"></button>\n        </div> -->\n    <!-- <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"concatIcon\">\n          <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"upperIcon\">\n          <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"orIcon\">\n          <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"notIcon\">\n          <button id=\"close-image\" @click=\"notClick\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"branchIcon\">\n          <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"elementCompositionIcon\">\n          <button id=\"close-image\" @click=\"existClick\"><img src=\"../../assets/JPG/ExistIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"elementCompositionIcon\">\n          <button id=\"close-image\" @click=\"allClick\"><img src=\"../../assets/JPG/ElementCompositionIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"conditionIcon\">\n          <button id=\"close-image\"><img src=\"../../assets/JPG/ConditionIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row> -->\n  \n    <!-- <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"anyIcon\">\n          <button id=\"close-image\" @click=\"anyClick\"><img src=\"../../assets/JPG/AnyIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n  \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"rootIcon\">\n          <button id=\"close-image\" @click=\"rootClick\"><img src=\"../../assets/JPG/RootIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n  \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"leafIcon\">\n          <button id=\"close-image\" @click=\"leafClick\"><img src=\"../../assets/JPG/LeafIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row> --> \n\n    <!-- <div class=\"concatIcon\">\n    <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n    </div>\n    <div class=\"upperIcon\">\n    <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n    </div>\n    <div class=\"orIcon\">\n    <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"notIcon\">\n    <button id=\"close-image\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"branchIcon\">\n    <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"elementCompositionIcon\">\n     <button id=\"close-image\" @click=\"elementCompositionClick\"><img src=\"../../assets/JPG/ElementCompositionIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"conditionIcon\">\n    <button id=\"close-image\"><img src=\"../../assets/JPG/ConditionIcon.jpg\"></button>\n    </div> -->\n\n</div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport { getComponentKey } from '@/utils/componentkey.js'\nimport REComponentTitle from '@/views/REView/REComponentTitle.vue'\n\n\nexport default {\n  name: 'REComponent',\n  components: {\n    REComponentTitle\n  },\n  props: {\n  },\n  data() {\n    return {\n    }\n  },\n  mounted() {\n   \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'lastDom',\n      'curRegexIndex'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n        'UPDATE_RETREE_DATA_STATE',\n        'UPDATE_SELECTED_DOM',\n        'RESET_DOM_KEY_STATE',\n        'UPDATE_REVIEW_DATA',\n        'UPDATE_REGEX_COMMIT_STATE',\n        'UPDATE_REGEX_CONTENT'\n    ]),\n    concatClick(d){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpNode = this.newNode()\n            tmpNode['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpPath = this.newPath()\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpPath)\n          tmpPath['composition'].splice(0, 0, this.selectedDom)\n          tmpPath['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent'] = tmpPath\n        }\n      }\n      else{\n        if(this.lastDom){\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.lastDom\n          this.lastDom['composition'].push(tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    upperClick(){\n      if(this.selectedDom){\n        if('branchUpper' in this.selectedDom){\n          if(this.selectedDom['branchRepeat'][1] == 1 && this.selectedDom['branchRepeat'][0] == 1) {\n            this.selectedDom['branchUpper'] = true\n          }\n        }\n        else if(this.selectedDom['repeat'][1] == 1 && this.selectedDom['repeat'][0] == 1)\n          this.selectedDom['upper'] = true\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    orClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' || this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpOr = this.newOr()\n          tmpOr['parent'] = this.selectedDom['parent']\n          var tmpIndex = this.selectedDom['index']\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpOr)\n          this.selectedDom['parent'] = tmpOr\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = tmpOr\n          tmpOr['composition'].push(this.selectedDom)\n          tmpOr['composition'].push(tmpNode)\n        } \n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    notClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node'){\n          this.selectedDom['notFlag'] = true\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    branchClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['type'] = 'wholeTree'\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n        }\n        if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n          else if(this.selectedDom['type'] == 'branch'){\n            var tmpPath = this.newPath()\n            tmpPath['branchUpper'] = true\n            tmpPath['branchRepeat'] = [1,1]\n            tmpPath['parent'] = this.selectedDom\n            this.selectedDom['composition'].push(tmpPath)\n          }\n        }\n      }\n      else{\n        if(this.lastDom){\n          if(this.lastDom['type'] == 'path'){\n            this.lastDom['type'] = 'wholeTree'\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n          else if(this.lastDom['type'] == 'wholeTree'){\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE() \n      this.RESET_DOM_KEY_STATE()     \n    },\n    existClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          \n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['exist']\n          this.selectedDom['exist']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n            this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom         \n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()    \n    },\n    allClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['all']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exallist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['all']\n          this.selectedDom['all']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n                  this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()   \n    },\n    anyClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Any'\n        this.selectedDom['nodeLabel'] = '.'\n        this.selectedDom['nodeColor'] = '#22CCCC'\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    rootClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Root'\n        this.selectedDom['nodeLabel'] = '^'\n        this.selectedDom['nodeColor'] = '#CC2222'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['height'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    leafClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Leaf'\n        this.selectedDom['nodeLabel'] = '$'\n        this.selectedDom['nodeColor'] = '#30CC22'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['degree'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    newNode(){\n      var retNode = {}\n      retNode['type'] = 'node'\n      retNode['repeat'] = [1,1]\n      retNode['data'] = {}\n      retNode['key'] = getComponentKey()\n      return retNode\n    },\n    newPath(){\n      var retPath = {}\n      retPath['type'] = 'path'\n      retPath['repeat'] = [1,1]\n      retPath['composition'] = []\n      var tmpNode  = this.newNode()\n      tmpNode['parent'] = retPath\n      retPath['composition'].push(tmpNode)\n      retPath['key'] = getComponentKey()\n      return retPath \n    },\n    newOr(){\n      var retOr = {}\n      retOr['type'] = 'or'\n      retOr['repeat'] = [1, 1]\n      retOr['composition'] = []\n      retOr['key'] = getComponentKey()\n      return retOr\n    },\n    newBranch(){\n      var retBranch = {}\n      retBranch['type'] = 'branch'\n      retBranch['composition'] = []\n      retBranch['key'] = getComponentKey()\n      retBranch['repeat'] = [1,1]\n      var tmpPath = this.newPath()\n      tmpPath['branchRepeat'] = [1, 1]\n      tmpPath['branchUpper'] = true\n      tmpPath['parent'] = retBranch\n      retBranch['composition'].push(tmpPath)\n      return retBranch\n    },\n    newWholeTree(){\n      var retWholeTree = {}\n      retWholeTree['type'] = 'wholeTree'\n      retWholeTree['key'] = getComponentKey()\n      retWholeTree['root'] = {}\n      retWholeTree['root']['parent'] = retWholeTree\n      retWholeTree['branch'] = this.newBranch()\n      retWholeTree['branch']['parent'] = retWholeTree\n      return retWholeTree\n\n    },\n    newElementComposition(){\n      var retElementComposition = {}\n      retElementComposition['type'] = 'elementComposition'\n      retElementComposition['exist'] = {}\n      retElementComposition['exist']['type'] = 'exist'\n      retElementComposition['exist']['composition'] = [] \n      retElementComposition['all'] = {}\n      retElementComposition['all']['type'] = 'all'\n      retElementComposition['all']['composition'] = []\n      retElementComposition['key'] = getComponentKey()\n      return retElementComposition\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {\n            \"type\": \"exist\",\n            \"composition\": [],\n          }\n          this.selectedDom['all'] = {\n            \"type\": \"all\",\n            \"composition\": [],\n          }\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.UPDATE_RETREE_DATA_STATE()  \n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE()\n      this.UPDATE_REGEX_CONTENT()\n    },\n    resetRegex(){\n      sysDatasetObj.resetRegex(this.curRegexIndex)\n      var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n      this.UPDATE_REVIEW_DATA()\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-component-view {\n  position: absolute;\n  top: 0%;\n  left:0%;\n  height: 100%;\n  width: 100%;\n  .re-Icon{\n    position: absolute;\n    top: 0%;\n    left:0%;\n    height: 100%;\n    width: 80%;\n    display: flex;\n    justify-content: center;\n    border-right: 1px #ddd solid;\n    .btnIcon{\n      margin-top: 8px;\n      margin-left: 10px;\n      margin-right: 10px;\n    }\n    button {\n      display: inline-block;\n      height: 24px;\n      padding: 0;\n      margin: 0;\n      vertical-align: top;\n      width: 44px;\n    }\n\n    #close-image img {\n      display: block;\n      height: 20px;  \n      width: 40px;\n    }\n  }\n  .commit-delete-btn{\n    position: absolute;\n    top: 0%;\n    left: 80%;\n    right: 0%;\n    display: flex;\n    justify-content: center;\n    .operation {\n      cursor: pointer;\n      &:hover{\n        fill: steelblue;\n      }\n    }\n    .commit-icon{\n    border: 1px #ddd bold;\n    font-size: 14px;\n    text-align: center !important;\n    margin-top: 8px;\n    margin-left: 16px;\n    //height: 20px !important;\n    //line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    //padding: 12px 6px !important;\n    }\n    .delete-button{\n        border: 1px #ddd bold;\n        font-size: 14px;\n        text-align: center !important;\n        margin-top: 8px;\n        margin-left: 16px;\n        //height: 20px !important;\n        //line-height: 0px !important;\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        //padding: 12px 6px !important;\n\n    }\n    .reset-button{\n        border: 1px #ddd bold;\n        font-size: 14px;\n        text-align: center !important;\n        margin-top: 8px;\n        margin-left: 16px;\n        //height: 20px !important;\n        //line-height: 0px !important;\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        //padding: 12px 12px !important;\n    }\n  }\n\n\n}\n\n</style>\n<style scoped lang=\"less\">\n.el-row {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n}\n.el-col {\n    border-radius: 4px;\n}\n\n</style>\n"]}]}
{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REPath.vue?vue&type=style&index=0&id=4ecd8921&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REPath.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.re-path {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n",{"version":3,"sources":["REPath.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"REPath.vue","sourceRoot":"src/views/REView/REComponents","sourcesContent":["<template>\n  <g class=\"re-path\">\n    <g v-for=\"(item, index1) in pathExpression['composition']\" :key=\"computeItemKey(index1)\">\n        <RENode v-if=\"item['type'] == 'node'\" :nodeExpression=\"item\" :key=\"item.key\" ></RENode>\n        <REPath v-if=\"item['type'] == 'path'\" :pathExpression=\"item\" :key=\"item.key\"></REPath>\n        <REOr v-if=\"item['type'] == 'or'\" :orExpression=\"item\" :key=\"item.key\"></REOr>\n    </g>\n    <path v-if=\"pathExpression['or']\" :d=\"orCompute\" />\n    <g v-if=\"pathExpression['branch']\">\n        <path :d=\"leftBracketBranchCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketBranchRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"20\" height=\"25\" opacity=\"0\"/>\n        <path :d=\"rightBracketBranchCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"rightBracketBranchRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"20\" height=\"25\" opacity=\"0\"/>\n        <text v-if=\"checkBranchRepeat()\" :transform=\"branchRepeatTransform\" style=\"alignment-baseline: hanging;\">{{pathExpression['branchRepeat'][0]}}..{{pathExpression['branchRepeat'][1]}}</text>\n        <rect class=\"repeat-rect\" v-if=\"checkBranchRepeat()\" width=\"15\" height=\"10\" :transform=\"branchRepeatTransform\" @click=\"updateRepeat()\"></rect>\n        <rect class=\"upper-rect\" v-if=\"pathExpression['branchUpper']\" width=\"10\" height=\"10\" :transform=\"branchUpperTransform\"  @click=\"updateRepeat()\"/>\n    </g>\n    <g v-if=\"pathExpression['bracket']\">\n        <path :d=\"leftBracketCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"15\" height=\"45\" opacity=\"0\"/>\n        <path :d=\"rightBracketCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"15\" height=\"45\" opacity=\"0\"/>\n    </g>\n    <text v-if=\"checkRepeat()\" \n            :transform=\"repeatTransform\" \n            style=\"alignment-baseline: hanging;\"\n        >\n            {{pathExpression['repeat'][0]}}..{{pathExpression['repeat'][1]}}\n    </text>\n    <rect class=\"upper-rect\" v-if=\"pathExpression['upper']\" width=\"10\" height=\"10\" :transform=\"upperTransform\" :style=\"upperStyle()\" @click=\"updateRepeat()\"/>\n    <rect class=\"repeat-rect\" v-if=\"checkRepeat()\" width=\"15\" height=\"10\" :transform=\"repeatTransform\" @click=\"updateRepeat()\"></rect>\n    <path v-if=\"pathExpression['selected']\" :d=\"selectedCompute\" />\n  </g>\n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n\nexport default {\n  name: 'REPath',\n  components: {\n    RENode,\n    REPath,\n  },\n  beforeCreate() {\n    this.$options.components.REOr = require(\"@/views/REView/REComponents/REOr.vue\").default;\n  },\n  props: {\n    pathExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        retObject: {}\n    }\n  },\n  mounted() {\n    //console.log('this.pathExpression', this.pathExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDomKey'\n    ]),\n    getPathHighlightState () {\n        return this.pathExpression.key === this.selectedDomKey\n    },\n    leftBracketTransform(){\n        return `translate(${this.pathExpression['xLeftBracket']}, ${this.pathExpression['yLeftBracket']})`\n    },\n    rightBracketTransform(){\n        return `translate(${this.pathExpression['xRightBracket']}, ${this.pathExpression['yRightBracket']})`\n    },\n    repeatTransform(){\n        return `translate(${this.pathExpression['xRepeat']}, ${this.pathExpression['yRepeat']})`\n    },\n    branchRepeatTransform(){\n        return `translate(${this.pathExpression['xBranchRepeat']}, ${this.pathExpression['yBranchRepeat']})`\n    },\n    branchUpperTransform(){\n        return `translate(${this.pathExpression['xBranchUpper']}, ${this.pathExpression['yBranchUpper']})`\n    },\n    leftBracketBranchCompute()\n\t{\n        var x1 = this.pathExpression['x1LeftBranchBracket']\n        var y1 = this.pathExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.pathExpression['x2LeftBranchBracket']\n        var y2 = this.pathExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    leftBracketBranchRectTransform()\n\t  {\n        var x1 = this.pathExpression['x1LeftBranchBracket']\n        var y1 = this.pathExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.pathExpression['x2LeftBranchBracket']\n        var y2 = this.pathExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn `translate(${midx}, ${y1})`\n    },\n    rightBracketBranchCompute()\n\t{\n        var x1 = this.pathExpression['x1RightBranchBracket']\n        var y1 = this.pathExpression['y1RightBranchBracket'] + 6\n        var x2 = this.pathExpression['x2RightBranchBracket']\n        var y2 = this.pathExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    rightBracketBranchRectTransform()\n\t{\n        var x1 = this.pathExpression['x1RightBranchBracket']\n        var y1 = this.pathExpression['y1RightBranchBracket'] + 6\n        var x2 = this.pathExpression['x2RightBranchBracket']\n        var y2 = this.pathExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn `translate(${x1}, ${y1})`\n    },\n    leftBracketCompute()\n\t{\n            var x1 = this.pathExpression['x1LeftBracket']\n            var y1 = this.pathExpression['y1LeftBracket']\n            var x2 = this.pathExpression['x2LeftBracket']\n            var y2 = this.pathExpression['y2LeftBracket']\n\n            var qx = x1-(y2-y1)/3\n            var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    leftBracketRectTransform(){\n      var x1 = this.pathExpression['x1LeftBracket']\n      var y1 = this.pathExpression['y1LeftBracket']\n      var x2 = this.pathExpression['x2LeftBracket']\n      var y2 = this.pathExpression['y2LeftBracket']\n\n      var qx = x1-(y2-y1)/3 + 5\n      var qy = (y2+y1)/2\n      return `translate(${qx}, ${this.pathExpression['y1LeftBracket']})`\n    },\n    rightBracketCompute()\n\t{\n        var x1 = this.pathExpression['x1RightBracket']\n        var y1 = this.pathExpression['y1RightBracket']\n        var x2 = this.pathExpression['x2RightBracket']\n        var y2 = this.pathExpression['y2RightBracket']\n\n        var qx = x1+(y2-y1)/3\n        var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    rightBracketRectTransform(){\n        var x1 = this.pathExpression['x1RightBracket']\n        var y1 = this.pathExpression['y1RightBracket']\n        var x2 = this.pathExpression['x2RightBracket']\n        var y2 = this.pathExpression['y2RightBracket']\n\n        var qx = x1 - 5\n        var qy = (y2+y1)/2\n        return `translate(${qx}, ${this.pathExpression['y1RightBracket']})`\n    },\n    orCompute(){\n        var x1 = this.pathExpression['xOr']\n        var y1 = this.pathExpression['yOr']\n\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" v \" + 30);\n    },\n    upperTransform(){\n        return `translate(${this.pathExpression['xUpper']}, ${this.pathExpression['yUpper']})`\n    },\n    selectedCompute(){\n        var x1 = this.pathExpression['x1Selected']\n        var x2 = this.pathExpression['x2Selected']\n        var y1 = this.pathExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART'\n    ]),\n    computeItemKey(d){\n        return 'item'+d\n    },\n    checkBranchRepeat(){\n        if('branchRepeat' in this.pathExpression)\n            if(this.pathExpression['branchRepeat'][0]!=1 || this.pathExpression['branchRepeat'][1]!=1)\n                return true\n        return false\n    },\n    checkRepeat(){\n        if('repeat' in this.pathExpression)\n            if(this.pathExpression['repeat'][0]!=1 || this.pathExpression['repeat'][1]!=1)\n                return true\n        return false\n    },\n    updateRepeat() {\n        this.UPDATE_REPEAT_DOM(this.pathExpression)\n    },\n    updateSelectedPath(){\n      this.UPDATE_SELECTED_DOM(this.pathExpression)\n      console.log\n    },\n    pathStyle(){\n        if(this.pathExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    upperStyle(){\n        if(this.pathExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    updateSelectedPart(){\n        if('selected' in this.pathExpression){\n            this.pathExpression['selected'] = !this.pathExpression['selected']\n        }\n        else{\n            this.pathExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-path {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n"]}]}
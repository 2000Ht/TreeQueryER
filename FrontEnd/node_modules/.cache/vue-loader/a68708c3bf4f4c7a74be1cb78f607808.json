{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/DataFlowView.vue?vue&type=style&index=0&id=8e1e8512&lang=less&scoped=true&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/DataFlowView.vue","mtime":1661095992543},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@header-height: 1rem;\n@component-div-width: 0px;\n@description-div-width: 0px;\n@description-div-margin: 10px;\n.dataflow-view {\n  height: 100%;\n  width: 100%;\n  #page{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(255, 255, 255);\n  overflow-y: hidden;\n  #header {\n    position: absolute;\n    top: 0%;\n    left: 0%;\n    width: 100%;\n    height: 2rem;\n    //border-top: #cccccc 1px solid;\n    // border-bottom: #cccccc 1px solid;\n    // background: #095FB0;\n    line-height: @header-height;\n    font-size: 1rem;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .header-title {\n      // font-weight: bold;\n      margin-left: 5px;\n      font-size: 1rem;\n      font-weight: bolder;\n      color: black;\n      top: 5px;\n      left: 5px;\n    }\n    .navitem {\n      display: inline-block;\n      cursor: pointer;\n      margin: 0px 10px;\n      padding: 2px;\n      &:hover {\n        background: #eeeeee;\n      }\n    }\n    #btn-list{\n    position: absolute;\n    left: 320px;\n    top: 4px;\n    display: flex;\n    justify-content: center;\n      .btnIcon{\n          margin-top: 0px;\n          margin-left: 10px;\n          margin-right: 10px;\n        }\n        button {\n          display: inline-block;\n          height: 24px;\n          padding: 0;\n          margin: 0;\n          vertical-align: top;\n          width: 44px;\n        }\n    \n        #close-image img {\n          display: block;\n          height: 20px;  \n          width: 40px;\n        }\n    }\n    .navtitle {\n      cursor: pointer;\n    }\n    .el-button{\n      font-family:element-icons !important;\n      font-weight:330 !important;\n      font-size:25px !important;\n      color:white !important;\n    }\n  }\n  .container {\n    position: absolute;\n    top: 2rem;\n    width: 100%;\n    bottom: 0%;\n    left: 0%;\n    //margin: auto;\n    .flowchart-container {\n      position: absolute;\n      right: 0;\n      top: 0%;\n      bottom: 0%;\n      left:0;\n      //margin: auto;\n    }\n  }\n  }\n}\n#toolbar {\n  margin-bottom: 10px;\n}\n\n.title {\n  margin-top: 10px;\n  margin-bottom: 0;\n}\n\n.subtitle {\n  margin-bottom: 10px;\n}\n\n#toolbar > button {\n  margin-right: 4px;\n}\n",{"version":3,"sources":["DataFlowView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"DataFlowView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"dataflow-view\">\n      <div id=\"page\">\n      <div id=\"header\">\n        <!-- <span class=\"navtitle\" style=\"padding-left: 1rem;\">Diagnosis Flow</span> -->\n        <!-- <el-divider direction=\"vertical\"></el-divider> -->\n        <span class=\"header-title\">\n          Visual Editor\n        </span>\n        <el-divider direction=\"vertical\"></el-divider>\n        <el-tooltip class=\"navitem\" key=\"add\" content=\"add component\" effect=\"light\">\n            <div slot=\"content\">\n              <span class=\"navitem\" @click=\"visible = false;addComponent(componentList[1])\">\n                  node\n              </span>\n              <span class=\"navitem\" @click=\"visible = false;addComponent(componentList[2])\">\n                  path\n              </span>\n            </div>\n            <i class=\"el-icon-plus\"></i>\n\n\n        </el-tooltip>\n\n          <span class=\"navitem\" @click=\"$refs.chart.remove()\">\n                <i class=\"el-icon-delete\"></i>\n          </span>\n        \n          <div id=\"btn-list\">\n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"concatClick\"><img src=\"../assets/JPG/ConcatIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"upperClick\"><img src=\"../assets/JPG/UpperIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"orClick\"><img src=\"../assets/JPG/OrIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"notClick\"><img src=\"../assets/JPG/NotIcon.jpg\"></button>\n        </div>\n\n    </div>\n\n      </div>\n      <div class=\"container\">\n        <!-- flow chart authoring canvas -->\n        <div class=\"flowchart-container\">\n          <flowchart\n            ref=\"chart\"\n            :nodes=\"nodes\"\n            :connections=\"connections\"\n            @editnode=\"handleEditNode\"\n            :width=\"'100%'\"\n            :height=\"500\"\n            :readonly=\"false\"\n            :excludeShownAttrArray=\"excludeShownAttrArray\"\n            >\n          </flowchart>\n        </div>\n\n      </div>\n  </div>\n  </div>\n  \n</template>\n\n\n<script>\n\nimport { mapState, mapMutations } from 'vuex';\nimport Flowchart from \"../components/flowchart/Flowchart\";\nimport { getComponentKey } from '../utils/componentkey';\n\n\nexport default {\n  name: 'DataFlowView',\n  components: {\n    Flowchart,\n  },\n  props: {\n\n  },\n  data() {\n      return {\n        nodes: [],\n        connections: [],\n        nodeForm: { target: null },\n        connectionForm: { target: null, operation: null },\n        defaultX: 10,\n        defaultY: 30,\n        defaultWidth: 48,\n        defaultHeight: 48,\n        componentList: [\n          {type: 'data', color: '#fdbf6f', name: 'data'},\n          {type: 'query', color: '#ff7f00', name: 'query'},\n          {type: 'vis', color: '#cab2d6', name: 'vis'},\n        ],// default components in the component panel\n        // the attributes be excluded in the node editing and edge editing dialog \n        excludeShownAttrArray: ['type', 'color', 'render', 'width', 'height', 'x', 'y', 'name', 'id'],\n        visible: false,\n\n      }\n  },\n async mounted() {},\n    computed: {\n    ...mapState([\n      'initialData',\n      'selectedDom'\n\n    ]),\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_CURRENT_REGEX',\n      'DELETE_REGEX_LIST',\n      'SHOW_REVIEW',\n      'SHOW_VISVIEW',\n      'UPDATE_CURRENT_DATA',\n      'UPDATE_REVIEW_DATA',\n      'UPDATE_REPEAT_STATE'\n    ]),\n    concatClick(){\n      var branch= sysDatasetObj.getSelectedBranch()\n      var index = sysDatasetObj.getSelectedBranchIndex()\n      var newNode =  {\n              'type': 'node',\n              'repeat': [1, 1],\n              'key': getComponentKey(),\n              'data': {\n\n              }\n            }   \n      branch['composition'].splice(index+1, 0, newNode)\n    },\n    upperClick(){\n      this.UPDATE_REPEAT_STATE(true)\n    },\n    orClick(){\n      var Or = sysDatasetObj.getSelectedOr()\n      var index = sysDatasetObj.getSelectedOrIndex()\n      if(index == -1){\n        Or['type'] = 'or'\n        Or['composition'] = [\n          {\n            'type': 'node',\n            'repeat': [1, 1],\n            'data': JSON.parse(JSON.stringify(Or['data'])),\n            'key': getComponentKey()\n          },\n          {\n            'type': 'node',\n            'repeat': [1, 1],\n            'data': {\n\n            },\n            'key': getComponentKey()\n          }\n        ]\n        if('definition' in Or && Or['definition']){\n          Or['composition'][0]['definition'] = Or['definition']\n          Or['composition'][0]['nodeName'] = Or['nodeName']\n          Or['composition'][0]['nodeColor'] = Or['nodeColor']\n        }\n        if('notFlag' in Or && Or['notFlag']){\n          Or['composition'][0]['notFlag'] = Or['notFlag']\n        }\n        delete Or['data']\n      }\n      else if(index != -2){\n              var newNode =  {\n              'type': 'node',\n              'repeat': [1, 1],\n              'key': getComponentKey(),\n              'data': {\n\n              }\n            }   \n        Or['composition'].splice(index+1, 0, newNode)\n      }\n    },\n    notClick(){\n      if(!('notFlag' in this.selectedDom)){\n        this.selectedDom['notFlag'] = true\n      }\n      else{\n        this.selectedDom['notFlag'] = !this.selectedDom['notFlag']\n      }\n\n    },\n    handleEditNode(node) {\n      // edit the detailed information of nodes when clicking \"edit\" button\n      // specifically, show the dialog of editing nodes' detailed information\n      this.nodeForm.target = node;\n      if(node['type'] == 'query'){\n        //this.nodeDialogVisible = true;\n        this.UPDATE_REVIEW_DATA()\n        this.SHOW_REVIEW()    \n      }\n    },\n    handleAddComponent(componentObj) {\n      // The component object contains\n      // 1. name\n      // 2. type\n      // 3. color\n      // 4. many attributes in attribute list [['attribute1'], ['attribute2'], ...]\n      this.componentList.push(componentObj)\n    },\n\n    addComponent(component) {\n      // add new component in the component list\n      let defaultX = this.defaultX, defaultY = this.defaultY, \n          defaultWidth = this.defaultWidth, defaultHeight = this.defaultHeight\n      let initComponent = {}\n      // id, x, y, width, height, name, type, and color are required attributes\n      initComponent['id'] = +new Date()\n      initComponent['x'] = defaultX\n      initComponent['y'] = defaultY\n      initComponent['width'] = defaultWidth\n      initComponent['height'] = defaultHeight\n      // defualt attributes are name, type, and color\n      initComponent['name'] = component.name\n      initComponent['type'] = component.type\n      initComponent['color'] = component.color\n      if(component['type'] == 'query'){   \n        initComponent['regex'] =  {\n              'type': 'node',\n              'repeat': [1, 1],\n              'key': getComponentKey(),\n              'data': {\n\n              }\n          }  \n        initComponent['regexIndex'] = sysDatasetObj.getRegexIndex() \n      }\n      else if(component['type'] == 'vis'){\n          initComponent['regex'] = {\n          'type': 'branch',\n          'key': getComponentKey(),\n          'repeat': [1 ,1],\n          'composition': [\n            {\n              'type': 'node',\n              'repeat': [1, 1],\n              'key': getComponentKey(),\n              'data': {\n\n              }\n            },\n            ]\n          }\n          initComponent['regexIndex'] = sysDatasetObj.getRegexIndex()   \n      }\n\n      // the attributes in the attribute list is the optional attribute\n      if (typeof(component.attributes) !== 'undefined') {\n        for (let i = 0; i < component.attributes.length; i++) {\n          let attrName = component.attributes[i]\n          initComponent[attrName] = \"\"\n        }\n      }\n      this.$refs.chart.add(initComponent)\n    },\n\n  },\n};\n</script>\n<style lang=\"less\" scoped>\n@header-height: 1rem;\n@component-div-width: 0px;\n@description-div-width: 0px;\n@description-div-margin: 10px;\n.dataflow-view {\n  height: 100%;\n  width: 100%;\n  #page{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(255, 255, 255);\n  overflow-y: hidden;\n  #header {\n    position: absolute;\n    top: 0%;\n    left: 0%;\n    width: 100%;\n    height: 2rem;\n    //border-top: #cccccc 1px solid;\n    // border-bottom: #cccccc 1px solid;\n    // background: #095FB0;\n    line-height: @header-height;\n    font-size: 1rem;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .header-title {\n      // font-weight: bold;\n      margin-left: 5px;\n      font-size: 1rem;\n      font-weight: bolder;\n      color: black;\n      top: 5px;\n      left: 5px;\n    }\n    .navitem {\n      display: inline-block;\n      cursor: pointer;\n      margin: 0px 10px;\n      padding: 2px;\n      &:hover {\n        background: #eeeeee;\n      }\n    }\n    #btn-list{\n    position: absolute;\n    left: 320px;\n    top: 4px;\n    display: flex;\n    justify-content: center;\n      .btnIcon{\n          margin-top: 0px;\n          margin-left: 10px;\n          margin-right: 10px;\n        }\n        button {\n          display: inline-block;\n          height: 24px;\n          padding: 0;\n          margin: 0;\n          vertical-align: top;\n          width: 44px;\n        }\n    \n        #close-image img {\n          display: block;\n          height: 20px;  \n          width: 40px;\n        }\n    }\n    .navtitle {\n      cursor: pointer;\n    }\n    .el-button{\n      font-family:element-icons !important;\n      font-weight:330 !important;\n      font-size:25px !important;\n      color:white !important;\n    }\n  }\n  .container {\n    position: absolute;\n    top: 2rem;\n    width: 100%;\n    bottom: 0%;\n    left: 0%;\n    //margin: auto;\n    .flowchart-container {\n      position: absolute;\n      right: 0;\n      top: 0%;\n      bottom: 0%;\n      left:0;\n      //margin: auto;\n    }\n  }\n  }\n}\n#toolbar {\n  margin-bottom: 10px;\n}\n\n.title {\n  margin-top: 10px;\n  margin-bottom: 0;\n}\n\n.subtitle {\n  margin-bottom: 10px;\n}\n\n#toolbar > button {\n  margin-right: 4px;\n}\n</style>\n\n\n\n"]}]}
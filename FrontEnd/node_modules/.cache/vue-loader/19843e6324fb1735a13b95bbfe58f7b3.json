{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/SliceDiceTreemap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/SliceDiceTreemap.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_slice_and_dice_treemap: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      d3.select('#slice_and_dice_treemap').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"sdt\")\n        }\n      }\n      // console.log(keep_random_highlight)\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n\n          let padding_r = (min_width_height *(1+min_width_height/this.scale)) / this.scale;\n          // let font_size_r = (min_width_height * 10) / this.scale;\n          let text_x_r = (min_width_height * 19) / this.scale;\n\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          let root = d3.treemap()\n            .tile(d3.treemapSliceDice)\n            .size([innerWidth, innerHeight])\n            .paddingInner(padding_r)\n            .paddingTop(padding_r)\n            .paddingRight(padding_r)\n            .paddingBottom(padding_r)\n            .paddingLeft(padding_r)\n            .round(true) (\n              d3.hierarchy(data)\n                .eachBefore(function(d){\n                  d.data.id = (d.parent? d.parent.data.id+'.':'')+d.data.name;\n                })\n                .sum( d=> d.value )\n                .sort((a,b) => b.value - a.value)\n            );\n\n          let group = function(d){return d.id.split(\".\")[1]; };\n          let label = function(d,n){return [...d.name.split(/(?=[A-Z][a-z])/g), n.value.toLocaleString(\"en\")].join(\"\\n\"); };\n          let title = function(d,n){return `PATH: ${d.id}\\nNAME:${d.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n          \n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)\n          \n          let G = root.leaves().map(d=>group(d.data, d));\n          let fill = '#ccc';\n          let zDomain = G;\n          zDomain = new d3.set(zDomain);\n          let color = d3.scaleOrdinal(zDomain, [DimGray,LightGray]);\n          let fillOpacity = 0.9;\n          let L = root.leaves().map(d=>label(d.data, d));\n          let T = root.leaves().map(d=>title(d.data, d));\n\n          const svg = d3.select(this.$el)\n            .select('#slice_and_dice_treemap')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${margin.left/2}, ${margin.top/2})`);\n\n          g.append('style').text(`\n            .rect-sdt-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n            .highlight-sdt-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let node = g.selectAll('a')\n            .data(root.leaves())\n            .join('a')\n              .attr('transform', d=>`translate(${d.x0},${d.y0})`)\n\n          node.append('rect')\n            .attr('class',d=>d.data.name+'sdt')\n            .attr('fill', color ? (d,i)=>color(G[i]) : fill )\n            .attr('fill-opacity', fillOpacity)\n            .attr('width', d=>d.x1 - d.x0)\n            .attr('height', d=>d.y1 - d.y0)\n            .on(\"mouseover\", mouseovered(true,keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false,keep_random_highlight));\n\n          if(T){node.append('title').text((d,i)=>T[i]); }\n\n          if(L && needlable){\n            let uid = `O-${Math.random().toString(16).slice(2)}`;\n\n            node.append(\"clipPath\")\n              .attr(\"id\", (d, i) => `${uid}-clip-${i}`)\n            .append(\"rect\")\n              .attr(\"width\", d => d.x1 - d.x0)\n              .attr(\"height\", d => d.y1 - d.y0);\n\n            node.append(\"text\")\n              .attr(\"clip-path\", (d, i) => `url(${new URL(`#${uid}-clip-${i}`, location)})`)\n            .selectAll(\"tspan\")\n            .data((d, i) => `${L[i]}`.split(/\\n/g))\n            .join(\"tspan\")\n              .attr(\"x\", text_x_r)\n              .attr(\"y\", (d, i, D) => `${(i === D.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\n              .attr(\"fill-opacity\", (d, i, D) => i === D.length - 1 ? 0.7 : null)\n              .text(d => d);   \n          }\n\n          function mouseovered(active,keep_random_highlight){\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).classed(\"highlight-sdt-active\", true);\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-sdt-active\", active);\n            }\n          }\n\n\n      // });\n\n    }\n  }\n}\n",{"version":3,"sources":["SliceDiceTreemap.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA","file":"SliceDiceTreemap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"slice_and_dice_treemap\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_slice_and_dice_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_slice_and_dice_treemap: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      d3.select('#slice_and_dice_treemap').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"sdt\")\n        }\n      }\n      // console.log(keep_random_highlight)\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n\n          let padding_r = (min_width_height *(1+min_width_height/this.scale)) / this.scale;\n          // let font_size_r = (min_width_height * 10) / this.scale;\n          let text_x_r = (min_width_height * 19) / this.scale;\n\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          let root = d3.treemap()\n            .tile(d3.treemapSliceDice)\n            .size([innerWidth, innerHeight])\n            .paddingInner(padding_r)\n            .paddingTop(padding_r)\n            .paddingRight(padding_r)\n            .paddingBottom(padding_r)\n            .paddingLeft(padding_r)\n            .round(true) (\n              d3.hierarchy(data)\n                .eachBefore(function(d){\n                  d.data.id = (d.parent? d.parent.data.id+'.':'')+d.data.name;\n                })\n                .sum( d=> d.value )\n                .sort((a,b) => b.value - a.value)\n            );\n\n          let group = function(d){return d.id.split(\".\")[1]; };\n          let label = function(d,n){return [...d.name.split(/(?=[A-Z][a-z])/g), n.value.toLocaleString(\"en\")].join(\"\\n\"); };\n          let title = function(d,n){return `PATH: ${d.id}\\nNAME:${d.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n          \n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)\n          \n          let G = root.leaves().map(d=>group(d.data, d));\n          let fill = '#ccc';\n          let zDomain = G;\n          zDomain = new d3.set(zDomain);\n          let color = d3.scaleOrdinal(zDomain, [DimGray,LightGray]);\n          let fillOpacity = 0.9;\n          let L = root.leaves().map(d=>label(d.data, d));\n          let T = root.leaves().map(d=>title(d.data, d));\n\n          const svg = d3.select(this.$el)\n            .select('#slice_and_dice_treemap')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${margin.left/2}, ${margin.top/2})`);\n\n          g.append('style').text(`\n            .rect-sdt-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n            .highlight-sdt-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let node = g.selectAll('a')\n            .data(root.leaves())\n            .join('a')\n              .attr('transform', d=>`translate(${d.x0},${d.y0})`)\n\n          node.append('rect')\n            .attr('class',d=>d.data.name+'sdt')\n            .attr('fill', color ? (d,i)=>color(G[i]) : fill )\n            .attr('fill-opacity', fillOpacity)\n            .attr('width', d=>d.x1 - d.x0)\n            .attr('height', d=>d.y1 - d.y0)\n            .on(\"mouseover\", mouseovered(true,keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false,keep_random_highlight));\n\n          if(T){node.append('title').text((d,i)=>T[i]); }\n\n          if(L && needlable){\n            let uid = `O-${Math.random().toString(16).slice(2)}`;\n\n            node.append(\"clipPath\")\n              .attr(\"id\", (d, i) => `${uid}-clip-${i}`)\n            .append(\"rect\")\n              .attr(\"width\", d => d.x1 - d.x0)\n              .attr(\"height\", d => d.y1 - d.y0);\n\n            node.append(\"text\")\n              .attr(\"clip-path\", (d, i) => `url(${new URL(`#${uid}-clip-${i}`, location)})`)\n            .selectAll(\"tspan\")\n            .data((d, i) => `${L[i]}`.split(/\\n/g))\n            .join(\"tspan\")\n              .attr(\"x\", text_x_r)\n              .attr(\"y\", (d, i, D) => `${(i === D.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\n              .attr(\"fill-opacity\", (d, i, D) => i === D.length - 1 ? 0.7 : null)\n              .text(d => d);   \n          }\n\n          function mouseovered(active,keep_random_highlight){\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).classed(\"highlight-sdt-active\", true);\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-sdt-active\", active);\n            }\n          }\n\n\n      // });\n\n    }\n  }\n}\n</script>"]}]}
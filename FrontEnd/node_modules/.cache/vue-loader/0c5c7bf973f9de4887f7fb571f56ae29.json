{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/EleNode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/EleNode.vue","mtime":1660969172656},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'EleNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0\n    }\n  },\n  mounted() {\n    \n    //console.log('nodeExpression', this.nodeExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        console.log(\"shiajdi\")\n        this.rectKey = (this.rectKey + 1) % 2\n      },\n      selectedDomKey: function(){\n        console.log(\"selectedDomKey222: \",this.selectedDomKey)\n      }\n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${140}, ${1})`\n    },\n\n    textX(){\n        return 155\n    },\n    textY(){\n        return 16\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_CONDITION_STATE'\n    ]),\n\n    checkName(){\n\n        if('nodeName' in this.nodeExpression){\n        \n            return true\n        }\n        return false\n    },\n    updateSelectedNode() {\n       // this.UPDATE_NODE_DEFINITION_STATE()\n        this.UPDATE_SELECTED_DOM(this.nodeExpression)\n        this.UPDATE_CONDITION_STATE(false)\n    },\n    nodeStyle(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition']){\n                if(this.nodeExpression.key === this.selectedDomKey){\n                    return ( \n                             \"fill: \" + this.nodeExpression['nodeColor'] + \"; \"+\n                             \"stroke-dasharray: 0 0; \" + \n                             \"stroke-width: 1;\"\n                    )\n                }\n                return (\n                   \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n                    \"stroke-dasharray: 0 0; \" + \n                    \"stroke-width: 1;\"\n                )\n\n            }\n        }\n        // if('key' in this.nodenodeExpression this.nodeExpression.key === this.selectedDomKey){\n        //     return ( \"stroke: red !important\"  );\n        // }\n        return (\n            \"stroke: #c4bbbb; \" + \n            \"stroke-width: 2; \" + \n            \"stroke-dasharray: 4 2;\" + \n            \"fill: white; \"\n        )\n\n    },\n    nameStyle(){\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"fill: black !important;\"\n        }\n        else return \"fill: white !important;\"\n    }\n\n  }\n}\n",{"version":3,"sources":["EleNode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"EleNode.vue","sourceRoot":"src/views/REView/REComponents","sourcesContent":["<template>\n    <svg class=\"re-node\">\n        <rect class=\"node-rect\" :class=\"{'highlighted': getNodeHighlightState, 'defined': getNodeDefineState}\" \n            :style=\"nodeStyle()\"\n            width=\"30\" height=\"30\" \n            :transform=\"nodeTransform\" \n            :key = \"rectKey\"\n            @click=\"updateSelectedNode\"/>\n\n        <text \n            :v-if=\"checkName()\"\n            class=\"node-name\"\n            :style=\"nameStyle()\"\n            :x = \"textX\"\n            :y = \"textY\"\n            text-anchor= \"middle\"\n            alignment-baseline= \"middle\"\n            @click=\"updateSelectedNode\">\n            {{nodeExpression['nodeName']}}\n        </text>\n        <text>\n        </text>\n\n\n    </svg>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'EleNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0\n    }\n  },\n  mounted() {\n    \n    //console.log('nodeExpression', this.nodeExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        console.log(\"shiajdi\")\n        this.rectKey = (this.rectKey + 1) % 2\n      },\n      selectedDomKey: function(){\n        console.log(\"selectedDomKey222: \",this.selectedDomKey)\n      }\n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${140}, ${1})`\n    },\n\n    textX(){\n        return 155\n    },\n    textY(){\n        return 16\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_CONDITION_STATE'\n    ]),\n\n    checkName(){\n\n        if('nodeName' in this.nodeExpression){\n        \n            return true\n        }\n        return false\n    },\n    updateSelectedNode() {\n       // this.UPDATE_NODE_DEFINITION_STATE()\n        this.UPDATE_SELECTED_DOM(this.nodeExpression)\n        this.UPDATE_CONDITION_STATE(false)\n    },\n    nodeStyle(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition']){\n                if(this.nodeExpression.key === this.selectedDomKey){\n                    return ( \n                             \"fill: \" + this.nodeExpression['nodeColor'] + \"; \"+\n                             \"stroke-dasharray: 0 0; \" + \n                             \"stroke-width: 1;\"\n                    )\n                }\n                return (\n                   \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n                    \"stroke-dasharray: 0 0; \" + \n                    \"stroke-width: 1;\"\n                )\n\n            }\n        }\n        // if('key' in this.nodenodeExpression this.nodeExpression.key === this.selectedDomKey){\n        //     return ( \"stroke: red !important\"  );\n        // }\n        return (\n            \"stroke: #c4bbbb; \" + \n            \"stroke-width: 2; \" + \n            \"stroke-dasharray: 4 2;\" + \n            \"fill: white; \"\n        )\n\n    },\n    nameStyle(){\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"fill: black !important;\"\n        }\n        else return \"fill: white !important;\"\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-node {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n\n    // &.defined{\n    //     stroke: #000000;\n    //     stroke-width: 3;\n    //     stroke-dasharray: 0 0;\n    //     fill: white;\n    // }\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n\n<style scoped lang=\"less\">\n.node-name { \n    fill: white; \n    font-size: 13px;\n}\n</style>\n"]}]}
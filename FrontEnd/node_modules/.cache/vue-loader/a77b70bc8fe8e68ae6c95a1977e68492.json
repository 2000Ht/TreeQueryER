{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/ComponentDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/ComponentDialog.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport '../assets/modal.css';\n\nexport default {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    }\n  },\n  data() {\n    return {\n      newComponent: {\n        name: '',\n        type: '',\n        color: '#409EFF',\n        attributes: []\n      }\n    };\n  },\n  methods: {\n    async handleClickSaveComponent() {\n      // save this component\n      // when new component name and type are not empty, then initialize new component\n      if (this.newComponent.name.length == 0) {\n        this.$message.error('Empty component name!');\n        return\n      }\n      if (this.newComponent.type.length == 0) {\n        this.$message.error('Empty component type!');\n        return\n      }\n      // create new component according to the attributes\n      this.removeEmptyAttribute()\n      let savedComponent = JSON.parse(JSON.stringify(this.newComponent))\n      this.$emit('addcomponent', savedComponent);\n      // after add new component, clear the attribute of the component\n      this.newComponent['name'] = ''\n      this.newComponent['type'] = ''\n      this.newComponent['color'] = '#409EFF'\n      this.newComponent['attributes'] = []\n      this.$emit('update:visible', false);\n    },\n    async handleClickCancelComponent() {\n      // cancel this component\n      this.$emit('update:visible', false);\n    },\n    async addNewAttribute() {\n      this.newComponent['attributes'].push([\"\"])\n    },\n    async removeAttribute(index) {\n      if ((typeof(index) != 'undefined') && (index != null)) {\n        if ((index >= 0) && (index < this.newComponent.attributes.length)) {\n          this.newComponent.attributes.splice(index, 1)\n        }\n      }\n    },\n    removeEmptyAttribute() {\n      // remove the empty attribute from the attribute list in component object\n      let attributes = this.newComponent['attributes']\n      for (let i = (attributes.length - 1); i >= 0; i--) {\n        if (attributes[i].length == 0) {\n          attributes.splice(i, 1)\n        }\n      }\n    }\n  },\n  watch: {\n    connection: {\n      immediate: true,\n      handler(val) {\n        if (!val) { return; }\n        this.connectionForm.id = val.id;\n        this.connectionForm.type = val.type;\n        this.connectionForm.name = val.name;\n        this.connectionForm.expression = val.expression;\n      },\n    },\n  },\n};\n",{"version":3,"sources":["ComponentDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ComponentDialog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div class=\"modal\" v-if=\"visible\" style=\"width: 320px\">\n            <div class=\"header\">\n                <span>New Component</span>\n            </div>\n            <div class=\"body\">\n                <el-form ref=\"form\" :model=\"newComponent\" label-width=\"120px\">\n                  <el-row class=\"component-attribute\">\n                      <el-col :span=\"21\">\n                        <el-input size=\"mini\" placeholder=\"component name (required)\" v-model=\"newComponent.name\"></el-input>\n                      </el-col>\n                      <el-col :offset=\"1\" :span=\"2\">\n                        <el-color-picker v-model=\"newComponent.color\"></el-color-picker>\n                      </el-col>\n                  </el-row>\n                  <el-row class=\"component-attribute\">\n                      <el-col :span=\"24\">\n                        <el-input size=\"mini\" placeholder=\"component type (required)\" v-model=\"newComponent.type\"></el-input>\n                      </el-col>\n                  </el-row>\n                  <el-row v-for=\"(attr, index) in newComponent.attributes\"class=\"component-attribute\">\n                      <el-col :span=\"23\">\n                        <el-input size=\"mini\" placeholder=\"attribute name\" v-model=\"attr[0]\"></el-input>\n                      </el-col>\n                      <el-col :span=\"1\" class=\"attibute-space close\">\n                        <i class=\"el-icon-close\" @click=\"removeAttribute(index)\"></i>\n                      </el-col>\n                  </el-row>\n                </el-form>\n            </div>\n            <div class=\"footer\">\n                <button @click=\"addNewAttribute\"><i class=\"el-icon-plus\"></i> attrbute</button>\n                <button @click=\"handleClickCancelComponent\">Cancel</button>\n                <button @click=\"handleClickSaveComponent\">Save</button>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n  import '../assets/modal.css';\n\n  export default {\n    props: {\n      visible: {\n        type: Boolean,\n        default: false,\n      }\n    },\n    data() {\n      return {\n        newComponent: {\n          name: '',\n          type: '',\n          color: '#409EFF',\n          attributes: []\n        }\n      };\n    },\n    methods: {\n      async handleClickSaveComponent() {\n        // save this component\n        // when new component name and type are not empty, then initialize new component\n        if (this.newComponent.name.length == 0) {\n          this.$message.error('Empty component name!');\n          return\n        }\n        if (this.newComponent.type.length == 0) {\n          this.$message.error('Empty component type!');\n          return\n        }\n        // create new component according to the attributes\n        this.removeEmptyAttribute()\n        let savedComponent = JSON.parse(JSON.stringify(this.newComponent))\n        this.$emit('addcomponent', savedComponent);\n        // after add new component, clear the attribute of the component\n        this.newComponent['name'] = ''\n        this.newComponent['type'] = ''\n        this.newComponent['color'] = '#409EFF'\n        this.newComponent['attributes'] = []\n        this.$emit('update:visible', false);\n      },\n      async handleClickCancelComponent() {\n        // cancel this component\n        this.$emit('update:visible', false);\n      },\n      async addNewAttribute() {\n        this.newComponent['attributes'].push([\"\"])\n      },\n      async removeAttribute(index) {\n        if ((typeof(index) != 'undefined') && (index != null)) {\n          if ((index >= 0) && (index < this.newComponent.attributes.length)) {\n            this.newComponent.attributes.splice(index, 1)\n          }\n        }\n      },\n      removeEmptyAttribute() {\n        // remove the empty attribute from the attribute list in component object\n        let attributes = this.newComponent['attributes']\n        for (let i = (attributes.length - 1); i >= 0; i--) {\n          if (attributes[i].length == 0) {\n            attributes.splice(i, 1)\n          }\n        }\n      }\n    },\n    watch: {\n      connection: {\n        immediate: true,\n        handler(val) {\n          if (!val) { return; }\n          this.connectionForm.id = val.id;\n          this.connectionForm.type = val.type;\n          this.connectionForm.name = val.name;\n          this.connectionForm.expression = val.expression;\n        },\n      },\n    },\n  };\n</script>\n<style lang=\"less\">\n  .el-color-picker__trigger {\n    height: 28px !important;\n    width: 28px !important;\n  }\n  .el-color-picker {\n    height: 28px !important;\n  }\n</style>\n<style lang=\"less\" scoped>\n  .body {\n    max-height: 300px;\n    overflow-y: auto;\n  }\n  .component-attribute {\n    margin-bottom: 10px;\n  }\n  .attibute-space {\n    line-height: 28px;\n    vertical-align: middle;\n    text-align: center;\n    cursor: pointer;\n    &.close:hover {\n      color: red;\n    }\n  }\n</style>"]}]}
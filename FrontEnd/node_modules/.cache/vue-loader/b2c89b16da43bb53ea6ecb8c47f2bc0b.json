{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue?vue&type=style&index=0&id=7a3d493c&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue","mtime":1670506964894},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .page_list{\n        position: absolute;\n        top: 0.1rem;\n        right: 0px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .similarity-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 68%;\n    }\n    .similarity-switch{\n        position: absolute;\n        top: 30px;\n        left: 85%;\n    }\n    .tree-list {\n        position: absolute;\n        top: 10%;\n        bottom: 3%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 19.5% 19.5% 19.5% 19.5% 19.5%;\n        padding: 10px;\n        grid-column-gap: 5px;\n        grid-row-gap: 5px;\n        .tree-item{\n            height: 135px;\n        }\n\n    }\n}\n\n",{"version":3,"sources":["RecommendPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"RecommendPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"recommend-panel-view\">\n    <span class=\"recommend-title\">Query Results ({{tree_num}} trees)</span>\n    <!-- <span class=\"num-text\">Num</span>\n    <div class=\"num-slider\">\n        <el-slider v-model=\"num\" :step=\"5\" :min=\"0\" :max=\"20\"  :marks=\"marks\" show-stops></el-slider>\n    </div>\n    <span class=\"similarity-text\">Similarity</span> -->\n    <!-- <el-switch class=\"similarity-switch\" v-model=\"similarity\" active-color=\"steelbule\" inactive-color=\"grey\"></el-switch> -->\n    <div class=\"page_list\">\n        <el-pagination\n            layout=\"prev, pager, next\"\n            :total=\"tree_num\"\n            @current-change=\"pageChange\"\n            :current-page=\"current_page\">\n        </el-pagination>\n    </div>\n    <div class=\"tree-list\">\n        <div v-for=\"tree in tmp_list\" :key=\"tree\" class=\"tree-item\">\n            <svg v-bind:id=\"'svg-' + tree\" style=\"position: relative; width: 100%; height: 100%;\">\n                <g v-bind:id=\"'g-level-1-'+tree\">\n                    <g v-bind:id=\"'g-level-1-path-'+tree\"></g>\n                    <g v-bind:id=\"'g-level-1-node-'+tree\"></g>\n                </g>\n            </svg>\n        </div>\n    \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n        tree_num: 0,\n        current_page: 1,\n        tree_size: 0,\n      \n    }\n  },\n  beforeMount(){\n  },\n  mounted() {\n  \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n        this.current_page = 1\n        // this.recommend_list = sysDatasetObj.getRecommendData()\n        this.recommend_list = sysDatasetObj.getCurResult()\n        this.tree_num = sysDatasetObj.getResultNum()\n        this.draw_node_link_tree_list()\n      },\n      treeListState: function(){\n        this.recommend_list = sysDatasetObj.getCurResult()\n        this.tree_num = sysDatasetObj.getResultNum()\n        this.draw_node_link_tree_list()\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'treeListState'\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'UPDATE_VIS_TREE',\n        'DATA_QUERY_PAGE'\n    ]),\n    pageChange: function(page_index){\n        this.current_page = page_index\n        this.DATA_QUERY_PAGE(page_index)\n    },\n    draw_node_link_tree_list: function(){\n        let self = this\n        for(var i=0; i<self.tmp_list.length; i++){\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-name').remove();\n            // // d3.select(self.$el).select('#svg-'+i).selectAll('.rect-none').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.text-path').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('path').remove();\n            d3.select(self.$el).select('#svg-'+i).selectAll('*').remove();\n            \n        }\n        for(var i = 0; i < self.recommend_list.length; i++){\n\n            let width = 143\n            let height = 130\n            let data = self.recommend_list[i]['data']\n            self.tree_size = self.recommend_list[i]['size']\n\n            console.log(\"width: \", width, \"height: \", height)\n\n            let scale = 300\n\n            let isVertical = 1;\n            let min_width_height = Math.min(width, height);\n            let trbl = (min_width_height * 20) / scale;\n            let margin = { top: trbl, right: trbl, bottom: 20, left: trbl };\n            let innerWidth = width - 10;\n            let innerHeight = height - 25;\n\n            let r = (min_width_height * 3)/ scale;\n            let r_min = (min_width_height * 2.5)/ scale;\n            let r_max = (min_width_height * 3.5)/ scale;\n            // r = r_max\n            let strokeWidth = (min_width_height * r) / scale;\n            let strokeOpacity = (min_width_height ) / scale;\n\n            let degree_max = 0\n            let root = d3.tree().size([innerWidth, innerHeight]) (\n                d3.hierarchy(data)\n                    .eachBefore(d=>{\n                    // d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n                    // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n                    // d.data.data.height = d.height; //重新画图之后要重新计算高度\n                    // d.data.data.degree = d.children ? d.children.length : 0;\n                    // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n                })\n            );\n\n            let DimGray = d3.rgb(105,105,105)\n            // let LightGray = d3.rgb(211,211,211)\n            let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n            let color = d3.interpolate(DimGray, DimGray)\n\n            self.RootDes = root.descendants()\n            let RootDes = self.RootDes\n\n            const svg = d3.select(self.$el).select('#svg-'+i)\n            let tmp_g = svg.append('g')\n                            .attr(\"id\", \"g-level-1-\"+i)\n            tmp_g.append(\"g\")\n                .attr(\"id\", \"g-level-1-path-\"+i)\n            tmp_g.append(\"g\")\n                .attr(\"id\", \"g-level-1-node-\"+i)\n\n\n           svg.selectAll('.tree-name').remove();\n\n            svg.append(\"text\")\n            .attr(\"class\", \"tree-name\")\n            .attr(\"y\", height-4)\n            .attr(\"x\", width/2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"10\")\n            .attr(\"fill\", \"#808080\")\n            .text(self.recommend_list[i]['data']['doi']);\n\n            // svg.append(\"rect\")\n            //     .attr(\"width\", width)\n            //     .attr(\"height\", height)\n            //     .attr(\"transform\", \"translate(0,0)\")\n            //     .attr(\"fill\", \"none\")\n            //     .attr(\"stroke-width\", \"1.5\")\n            //     .attr(\"stroke\", \"grey\")\n            //     .attr(\"stroke-dasharray\", \"4 2\")\n            svg.append('path')\n                .attr(\"class\", \"text-path\")\n                .attr(\"id\", \"text-path\"+i)\n                .classed(\"text-path-selected\", false)\n                .attr(\"d\", function(){\n                    let x0 = 1\n                    let y0 = height -15\n                    let x1 = width-1\n                    let y1 = height - 15\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                })\n                // .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n            svg.append(\"rect\")\n            .attr(\"class\", \"rect-none\")\n            .attr(\"id\", \"rect-none\"+i)\n            .attr(\"width\", width-2)\n            .attr(\"height\", height-16.5)\n            .attr(\"transform\", \"translate(1,1)\")\n            .attr(\"fill-opacity\", '0')\n            .attr(\"treeindex\", i)\n            .attr(\"style\", \"cursor: pointer;\")\n            .attr('stroke', '#f4606c')\n            .attr('stroke-opacity', '0')\n            .attr('stroke-dasharray', '4 2')\n            .attr('stroke-width', '1.5')\n            .on(\"click\", function(){\n                 sysDatasetObj.updateVisTree(this.getAttribute(\"treeindex\"))\n                 self.UPDATE_VIS_TREE()\n                 let tmp = '#text-path'+this.getAttribute(\"treeindex\")\n                 d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false)\n                 d3.select(self.$el).select(tmp).classed(\"text-path-selected\", true)\n            })\n\n\n            let t = svg.transition()\n                .duration(750)\n\n            let g = svg.select('#g-level-1-'+i)\n                .attr('transform', `translate(${5}, ${5})`);\n\n            let path_logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([1.5, 0.3]);\n\n            if(isVertical)\n            {\n                g.select('#g-level-1-path-'+i)\n                .attr('class', 'gLink')\n                .attr('stroke-opacity', 0.2)\n                .attr('stroke-width', function(){\n                    return path_logScale(self.tree_size)\n                })\n                .selectAll('path')\n                .data(root.links(), function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let source = d.source.data.data.nodeIndex\n                    // let target = d.target.data.data.nodeIndex\n                    // return \"node\"+source+\"node\"+target;\n                })\n                .join(\n                    enter => enter.append('path')\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                    exit => exit\n                    .remove()\n                );\n\n                // 保留\n                let node = g.select('#g-level-1-node-'+i)\n                .attr('class', 'brush')\n                .selectAll('a')\n                .data(RootDes, function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let node_id = d.data.data.nodeIndex\n                    // return node_id;\n                })\n                .join(\n                    enter => enter.append('a')\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                    exit => exit\n                    .remove()\n                )\n\n                let logScale = d3.scaleLog()\n                    .domain([1, 2000])\n                    .range([3, 1]);\n                d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n                node.append(\"circle\")\n                .attr('class', 'tree-node')\n                .attr('id', d=> 'node-id-' + d.nodeIndex)\n                //.attr(\"fill\", d => color(linear(d.height)) )\n                .attr(\"fill\", \"steelblue\")\n                .attr(\"r\", function(){\n                    return logScale(self.tree_size)\n                })\n                .call(self.tooltip_ele(\"node_link_tree\"));\n\n            }\n\n        }\n        d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false)\n        d3.select(self.$el).select('#text-path0').classed(\"text-path-selected\", true)\n    }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .page_list{\n        position: absolute;\n        top: 0.1rem;\n        right: 0px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .similarity-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 68%;\n    }\n    .similarity-switch{\n        position: absolute;\n        top: 30px;\n        left: 85%;\n    }\n    .tree-list {\n        position: absolute;\n        top: 10%;\n        bottom: 3%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 19.5% 19.5% 19.5% 19.5% 19.5%;\n        padding: 10px;\n        grid-column-gap: 5px;\n        grid-row-gap: 5px;\n        .tree-item{\n            height: 135px;\n        }\n\n    }\n}\n\n</style>\n\n<style lang=\"less\">\n.text-path{\n    stroke: #c4bbbb;\n    stroke-width: 1px; \n    fill: none;\n    &.text-path-selected{\n        stroke: red !important;\n    }\n}\n</style>"]}]}
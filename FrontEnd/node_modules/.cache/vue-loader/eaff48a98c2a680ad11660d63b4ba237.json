{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RegRecommendationPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RegRecommendationPanel.vue","mtime":1668606377110},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RegRecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        reg_list: [],\n        key_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n        max_height: 0,\n      \n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      regPanelState: function(){\n        d3.select(this.$el).selectAll(\"svg\").remove()\n        let tmp_dict = sysDatasetObj.getRegDict()\n        console.log(\"tmp_dict\", tmp_dict)\n        this.reg_list = []\n        this.key_list = []\n        this.tmp_list = []\n        let tmp_index = 0\n        for(let key in tmp_dict){\n            this.reg_list.push(tmp_dict[key])\n            this.key_list.push(key)\n            this.tmp_list.push(tmp_index)\n            d3.select(this.$el).select(\".reg-list\")\n                .append(\"svg\")\n                .attr(\"id\", 'svg-'+tmp_index)\n                .attr(\"style\", 'position: relative; width: 100%; height: 100%;')\n            tmp_index += 1\n        }\n\n        this.draw_reg_list()\n      },\n      visPanelState: function(){\n\n        \n      },\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'regPanelState'\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'DATA_QUERY_INDEX',\n        'DATA_QUERY_CODING'\n    ]),\n\n    compute_node_position1: function(root){\n        \n        root['width'] = 25\n        if(root['type'] == 'node')\n            root['height'] = 25\n        else\n            root['height'] = root['composition'].length * (25+5)\n        // for(let comp of root['composition']){\n        //     if(comp['repeat'][0]!=1 || comp['repeat'][1]!=1){\n        //         root['width'] = 25 + 5\n        //     }\n        // }\n        if(root['children'].length==0){\n            root['box_width'] = root['width']\n            return\n        }\n        for(let child_node of root['children']){\n            this.compute_node_position1(child_node)\n        } \n        let children_width = 0\n        for(let child_node of root['children']){\n            children_width += child_node['box_width'] + 18\n        }\n        children_width -= 18\n        root['box_width'] = children_width>root['width'] ? children_width : root['width']\n        let relative_x = root['width']/2 - children_width/2\n        for(let child_node of root['children']){\n            child_node['relative_x'] = relative_x + child_node['box_width']/2 - child_node['width']/2\n            relative_x += child_node['box_width'] + 18\n        }\n    },\n\n    compute_node_position2: function(root){\n        if(root['y'] + root['height'] > this.max_height){\n            this. max_height = root['y'] + root['height']\n        }\n        for(let child_node of root['children']){\n            child_node['x'] = root['x'] + child_node['relative_x']\n            child_node['y'] = root['y'] + root['height'] + 15\n            this.compute_node_position2(child_node)\n        }\n    },\n    draw_reg_list: function(){\n            let self = this\n            self.max_height = 0\n            for(var i = 0; i < self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let reg = self.reg_list[i]['reg']\n                let node_width = 25\n                let node_margin = {height: 10, width: 10}\n                reg['composition'] = []\n                reg['x'] = width/2 - node_width/2\n                reg['y'] = 10\n                self.compute_node_position1(reg)\n                self.compute_node_position2(reg, width/2 - node_width/2)\n\n            }\n            for(var i=0; i<self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let height = self.max_height + 20\n                console.log(\"height: \",height)\n                let reg = self.reg_list[i]['reg']\n                d3.select(self.$el).select('#svg-'+i).selectAll('*').remove();\n                const svg = d3.select(self.$el).select('#svg-'+i)\n                    .attr(\"style\", function(){\n                        return \"width: \" + width + \" !important;\" +\n                            \"height: \" + height + \" !important;\"\n                    })\n                self.draw_node(reg, svg)\n                svg.append(\"path\")\n                    .attr('d', function(){\n                    var x0 = width\n                    var y0 = 0\n                    var x1 = width\n                    var y1 = height\n\n\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                    })\n                    .attr('style','stroke: #c4bbbb; stroke-width: 2px; fill: none;')\n                svg.append(\"text\")\n                    .attr('x', width/2)\n                    .attr('y', height-5)\n                    .attr('font-size', '12px')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .text(() => \"Num: \" + self.reg_list[i]['num'])\n                svg.append(\"rect\")\n                .attr(\"class\", \"rect-none\")\n                .attr(\"width\", width-8)\n                .attr(\"height\", height-1)\n                .attr(\"transform\", \"translate(4,1)\")\n                .attr(\"fill-opacity\", '0')\n                .attr(\"reg_coding\", self.key_list[i])\n                .attr(\"style\", \"cursor: pointer;\")\n                .attr('stroke', '#f4606c')\n                .attr('stroke-opacity', '0')\n                .attr('stroke-dasharray', '4 2')\n                .attr('stroke-width', '1.5')\n                .on(\"click\", function(){\n                    self.DATA_QUERY_CODING(this.getAttribute(\"reg_coding\"))\n                    d3.selectAll('.rect-none').attr('fill-opacity', '0')\n                    // this.setAttribute('stroke-opacity', '1')\n                    this.setAttribute('fill-opacity', '0.1')\n                })\n                \n            }\n\n\n    },\n    draw_node: function(node, svg){\n        if(node['type'] == 'node'){\n            svg.append('rect')\n            .attr('class', 'unselectable title')\n            .attr('x', node['x'])\n            .attr('y', node['y'])\n            .attr('width', 25)\n            .attr('height', 25)\n            .attr('style', function(){\n                return (\n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                )\n            })\n\n            if('nodeName' in node){\n                if(node['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n            }\n\n            for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n            }\n        }\n        else if(node['type'] == 'branch'){\n        let curX = node['x']\n        let curY = node['y']\n\n        svg.append('path')\n        .attr('class', 'bPath')\n        .attr('d', function(){\n          var x0 = curX\n          var y0 = curY + 5\n          var x1 = curX + 12.5\n          var y1 = curY\n          var x2 = curX + 25\n          var y2 = curY + 5\n\n          return \"M \" +  x0 + \" \" +  y0 +\n                \" L \" + x1+ \" \" + y1 + \n                \" L \" + x2+ \" \" + y2\n        })\n        .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        svg.append('text')\n        .attr('x', curX)\n        .attr('y', curY-4)\n        .attr('font-size', '9px')\n        .attr('alignment-baseline', 'hanging')\n        .attr('text-anchor', 'middle')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#2c2c2c')\n        .text(() => node['repeat'][0])\n        \n        if(node['repeat'][1] == '*'){\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '12px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n        else{\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '9px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n\n\n\n        curY += 5\n        \n        for(let i in node['composition']){\n          if(node['composition'][i]['type'] == 'node'){\n            if('notFlag' in node['composition'][i] && node['composition'][i]['notFlag']){\n              svg.append('path')\n              .attr('d', function(){\n                var x1 = curX-4\n                var y1 = curY+5\n            \n                return ( \"M \" + x1 + \" \" + y1 +\n                        \"v \" + 27);\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              svg.append('circle')\n              .attr('cx', curX-4)\n              .attr('cy', curY+37)\n              .attr('r', '1')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n            }\n\n            svg.append('rect')\n              .attr('class', 'unselectable title')\n              .attr('x', curX)\n              .attr('y', curY)\n              .attr('width', 25)\n              .attr('height', 25)\n              .attr('style', function(){\n                  return (\n                   \n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['composition'][i]['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                  )\n              })\n            if('nodeName' in node['composition'][i]){\n                if(node['composition'][i]['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n            }\n\n            if(!(node['composition'][i]['repeat'][0] == 1 && node['composition'][i]['repeat'][1] == 1)){\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x1 = curX + 25 + 2;\n                var y1 = curY + 9;\n                var x2 = curX + 25 + 2;\n                var y2 = curY + 16;\n                var r = 5;\n                return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x0 = curX + 25 + 2\n                var y0 = curY + 16\n                var x1 = x0 + 2.5\n                var y1 = y0 + 3\n\n                return \"M \" +  x1 + \",\" +  y1 +\n                  \" L \" + x0 + \",\" + y0 ;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n                svg.append('text')\n                .attr('x', curX + 25 + 4)\n                .attr('y', curY )\n                .attr('font-size', '7px')\n                .attr('alignment-baseline', 'hanging')\n                    .attr('font-weight', 'bold')\n                    .attr('fill', '#2c2c2c')\n                .text(() => node['composition'][i]['repeat'][0])\n                if(node['composition'][i]['repeat'][1] == '*'){\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '10px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n                else{\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '7px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n\n            }\n\n            curY = curY + 20 + 5\n\n\n          }\n\n        }\n        for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n        }\n        }\n\n        if(node['children'].length > 0){\n            let node_bottom_x = node['x'] + 12.5\n            let node_bottom_y = node['y'] + node['height']\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = node_bottom_x\n                let y0 = node_bottom_y\n                let x1 = node_bottom_x\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n            let x_left = 10000\n            let x_right = 0\n            for(let child_node of node['children']){\n                svg.append('path')\n                .attr('d', function(){\n                    let x0 = child_node['x'] + 12.5\n                    let y0 = node_bottom_y + 7.5\n                    let x1 = child_node['x'] + 12.5\n                    let y1 = node_bottom_y + 15\n                    x_left = x0<x_left ? x0 : x_left\n                    x_right = x0>x_right? x0 : x_right\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                })\n                .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n            }\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = x_left\n                let y0 = node_bottom_y + 7.5\n                let x1 = x_right\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        }\n\n    },\n\n\n  }\n\n}\n",{"version":3,"sources":["RegRecommendationPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA","file":"RegRecommendationPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"reg-recommend-panel-view\">\n    <span class=\"recommend-title\">Recommendation</span>\n    <!-- <span class=\"num-text\">Num</span>\n    <div class=\"num-slider\">\n        <el-slider v-model=\"num\" :step=\"5\" :min=\"0\" :max=\"20\"  :marks=\"marks\" show-stops></el-slider>\n    </div> -->\n    <div class=\"reg-list\">\n        <!-- <div v-for=\"reg in tmp_list\" :key=\"reg\" class=\"reg-item\"> -->\n            <!-- <svg v-bind:id=\"'svg-' + reg\" style=\"position: relative; width: 100%; height: 100%;\">\n            </svg> -->\n        <!-- </div> -->\n    \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RegRecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        reg_list: [],\n        key_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n        max_height: 0,\n      \n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      regPanelState: function(){\n        d3.select(this.$el).selectAll(\"svg\").remove()\n        let tmp_dict = sysDatasetObj.getRegDict()\n        console.log(\"tmp_dict\", tmp_dict)\n        this.reg_list = []\n        this.key_list = []\n        this.tmp_list = []\n        let tmp_index = 0\n        for(let key in tmp_dict){\n            this.reg_list.push(tmp_dict[key])\n            this.key_list.push(key)\n            this.tmp_list.push(tmp_index)\n            d3.select(this.$el).select(\".reg-list\")\n                .append(\"svg\")\n                .attr(\"id\", 'svg-'+tmp_index)\n                .attr(\"style\", 'position: relative; width: 100%; height: 100%;')\n            tmp_index += 1\n        }\n\n        this.draw_reg_list()\n      },\n      visPanelState: function(){\n\n        \n      },\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'regPanelState'\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'DATA_QUERY_INDEX',\n        'DATA_QUERY_CODING'\n    ]),\n\n    compute_node_position1: function(root){\n        \n        root['width'] = 25\n        if(root['type'] == 'node')\n            root['height'] = 25\n        else\n            root['height'] = root['composition'].length * (25+5)\n        // for(let comp of root['composition']){\n        //     if(comp['repeat'][0]!=1 || comp['repeat'][1]!=1){\n        //         root['width'] = 25 + 5\n        //     }\n        // }\n        if(root['children'].length==0){\n            root['box_width'] = root['width']\n            return\n        }\n        for(let child_node of root['children']){\n            this.compute_node_position1(child_node)\n        } \n        let children_width = 0\n        for(let child_node of root['children']){\n            children_width += child_node['box_width'] + 18\n        }\n        children_width -= 18\n        root['box_width'] = children_width>root['width'] ? children_width : root['width']\n        let relative_x = root['width']/2 - children_width/2\n        for(let child_node of root['children']){\n            child_node['relative_x'] = relative_x + child_node['box_width']/2 - child_node['width']/2\n            relative_x += child_node['box_width'] + 18\n        }\n    },\n\n    compute_node_position2: function(root){\n        if(root['y'] + root['height'] > this.max_height){\n            this. max_height = root['y'] + root['height']\n        }\n        for(let child_node of root['children']){\n            child_node['x'] = root['x'] + child_node['relative_x']\n            child_node['y'] = root['y'] + root['height'] + 15\n            this.compute_node_position2(child_node)\n        }\n    },\n    draw_reg_list: function(){\n            let self = this\n            self.max_height = 0\n            for(var i = 0; i < self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let reg = self.reg_list[i]['reg']\n                let node_width = 25\n                let node_margin = {height: 10, width: 10}\n                reg['composition'] = []\n                reg['x'] = width/2 - node_width/2\n                reg['y'] = 10\n                self.compute_node_position1(reg)\n                self.compute_node_position2(reg, width/2 - node_width/2)\n\n            }\n            for(var i=0; i<self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let height = self.max_height + 20\n                console.log(\"height: \",height)\n                let reg = self.reg_list[i]['reg']\n                d3.select(self.$el).select('#svg-'+i).selectAll('*').remove();\n                const svg = d3.select(self.$el).select('#svg-'+i)\n                    .attr(\"style\", function(){\n                        return \"width: \" + width + \" !important;\" +\n                            \"height: \" + height + \" !important;\"\n                    })\n                self.draw_node(reg, svg)\n                svg.append(\"path\")\n                    .attr('d', function(){\n                    var x0 = width\n                    var y0 = 0\n                    var x1 = width\n                    var y1 = height\n\n\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                    })\n                    .attr('style','stroke: #c4bbbb; stroke-width: 2px; fill: none;')\n                svg.append(\"text\")\n                    .attr('x', width/2)\n                    .attr('y', height-5)\n                    .attr('font-size', '12px')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .text(() => \"Num: \" + self.reg_list[i]['num'])\n                svg.append(\"rect\")\n                .attr(\"class\", \"rect-none\")\n                .attr(\"width\", width-8)\n                .attr(\"height\", height-1)\n                .attr(\"transform\", \"translate(4,1)\")\n                .attr(\"fill-opacity\", '0')\n                .attr(\"reg_coding\", self.key_list[i])\n                .attr(\"style\", \"cursor: pointer;\")\n                .attr('stroke', '#f4606c')\n                .attr('stroke-opacity', '0')\n                .attr('stroke-dasharray', '4 2')\n                .attr('stroke-width', '1.5')\n                .on(\"click\", function(){\n                    self.DATA_QUERY_CODING(this.getAttribute(\"reg_coding\"))\n                    d3.selectAll('.rect-none').attr('fill-opacity', '0')\n                    // this.setAttribute('stroke-opacity', '1')\n                    this.setAttribute('fill-opacity', '0.1')\n                })\n                \n            }\n\n\n    },\n    draw_node: function(node, svg){\n        if(node['type'] == 'node'){\n            svg.append('rect')\n            .attr('class', 'unselectable title')\n            .attr('x', node['x'])\n            .attr('y', node['y'])\n            .attr('width', 25)\n            .attr('height', 25)\n            .attr('style', function(){\n                return (\n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                )\n            })\n\n            if('nodeName' in node){\n                if(node['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n            }\n\n            for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n            }\n        }\n        else if(node['type'] == 'branch'){\n        let curX = node['x']\n        let curY = node['y']\n\n        svg.append('path')\n        .attr('class', 'bPath')\n        .attr('d', function(){\n          var x0 = curX\n          var y0 = curY + 5\n          var x1 = curX + 12.5\n          var y1 = curY\n          var x2 = curX + 25\n          var y2 = curY + 5\n\n          return \"M \" +  x0 + \" \" +  y0 +\n                \" L \" + x1+ \" \" + y1 + \n                \" L \" + x2+ \" \" + y2\n        })\n        .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        svg.append('text')\n        .attr('x', curX)\n        .attr('y', curY-4)\n        .attr('font-size', '9px')\n        .attr('alignment-baseline', 'hanging')\n        .attr('text-anchor', 'middle')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#2c2c2c')\n        .text(() => node['repeat'][0])\n        \n        if(node['repeat'][1] == '*'){\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '12px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n        else{\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '9px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n\n\n\n        curY += 5\n        \n        for(let i in node['composition']){\n          if(node['composition'][i]['type'] == 'node'){\n            if('notFlag' in node['composition'][i] && node['composition'][i]['notFlag']){\n              svg.append('path')\n              .attr('d', function(){\n                var x1 = curX-4\n                var y1 = curY+5\n            \n                return ( \"M \" + x1 + \" \" + y1 +\n                        \"v \" + 27);\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              svg.append('circle')\n              .attr('cx', curX-4)\n              .attr('cy', curY+37)\n              .attr('r', '1')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n            }\n\n            svg.append('rect')\n              .attr('class', 'unselectable title')\n              .attr('x', curX)\n              .attr('y', curY)\n              .attr('width', 25)\n              .attr('height', 25)\n              .attr('style', function(){\n                  return (\n                   \n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['composition'][i]['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                  )\n              })\n            if('nodeName' in node['composition'][i]){\n                if(node['composition'][i]['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n            }\n\n            if(!(node['composition'][i]['repeat'][0] == 1 && node['composition'][i]['repeat'][1] == 1)){\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x1 = curX + 25 + 2;\n                var y1 = curY + 9;\n                var x2 = curX + 25 + 2;\n                var y2 = curY + 16;\n                var r = 5;\n                return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x0 = curX + 25 + 2\n                var y0 = curY + 16\n                var x1 = x0 + 2.5\n                var y1 = y0 + 3\n\n                return \"M \" +  x1 + \",\" +  y1 +\n                  \" L \" + x0 + \",\" + y0 ;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n                svg.append('text')\n                .attr('x', curX + 25 + 4)\n                .attr('y', curY )\n                .attr('font-size', '7px')\n                .attr('alignment-baseline', 'hanging')\n                    .attr('font-weight', 'bold')\n                    .attr('fill', '#2c2c2c')\n                .text(() => node['composition'][i]['repeat'][0])\n                if(node['composition'][i]['repeat'][1] == '*'){\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '10px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n                else{\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '7px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n\n            }\n\n            curY = curY + 20 + 5\n\n\n          }\n\n        }\n        for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n        }\n        }\n\n        if(node['children'].length > 0){\n            let node_bottom_x = node['x'] + 12.5\n            let node_bottom_y = node['y'] + node['height']\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = node_bottom_x\n                let y0 = node_bottom_y\n                let x1 = node_bottom_x\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n            let x_left = 10000\n            let x_right = 0\n            for(let child_node of node['children']){\n                svg.append('path')\n                .attr('d', function(){\n                    let x0 = child_node['x'] + 12.5\n                    let y0 = node_bottom_y + 7.5\n                    let x1 = child_node['x'] + 12.5\n                    let y1 = node_bottom_y + 15\n                    x_left = x0<x_left ? x0 : x_left\n                    x_right = x0>x_right? x0 : x_right\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                })\n                .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n            }\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = x_left\n                let y0 = node_bottom_y + 7.5\n                let x1 = x_right\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        }\n\n    },\n\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.reg-recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .reg-list {\n        position: absolute;\n        top: 7%;\n        bottom: 0%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 33% 33% 33%;\n        padding: 10px;\n        grid-column-gap: 0px;\n        grid-row-gap: 5px;\n        // .reg-item{\n        //     height: 300px;\n        // }\n    }\n}\n\n</style>"]}]}
{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/VisPanel.vue?vue&type=style&index=0&id=a4951404&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/VisPanel.vue","mtime":1670211131832},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vis-panel-view{\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  right: 0%;\n  bottom: 0%;\n  .title-text{\n    position: absolute;\n    font-size: 1rem;\n    font-weight: bolder;\n    color: black;\n    top: 5px;\n    left: 5px;\n  }\n  .size-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 30px;\n    left: 5px;\n  }\n  .height-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 50px;\n    left: 5px;\n  }\n  .width-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 70px;\n    left: 5px;\n  }\n  .node-link-tree-panel {\n    position: absolute;\n    top: 2%;\n    bottom: 2%;\n    left: 2%;\n    right: 2%;\n  }\n  .tree-select{\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 100px;\n\n  }\n}\n\n",{"version":3,"sources":["VisPanel.vue"],"names":[],"mappingsfile":"VisPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"vis-panel-view\">\n     <span class=\"title-text\">Tree Visualization</span>\n     <span class=\"size-text\">size:{{treeSize}}</span>\n     <span class=\"height-text\">height:{{treeHeight}}</span>\n     <span class=\"width-text\">width:{{treeWidth}}</span>\n    <div class=\"node-link-tree-panel\" ref=\"nodeLinkPanel\">\n        <svg id=\"node-link-tree\" style=\"position: absolute; width: 100%; height: 100%;\">\n            <!-- <g id=\"g-level-1\">\n                <g id=\"g-level-1-path\"></g>\n                <g id=\"g-level-1-node\"></g>\n            </g> -->\n        </svg>\n    </div>\n    <!-- <el-select class=\"tree-select\" v-model=\"value\" :placeholder=\"initalLabel\" size=\"mini\"  @change=\"treeChange\">\n      <el-option\n        v-for=\"item in options\"\n        :key=\"item[0]\"\n        :label=\"item[1]\"\n        :value=\"item[0]\">\n      </el-option>\n    </el-select> -->\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\n\nexport default {\n  name: 'VisPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n      treeSize: 0,\n      treeHeight: 0,\n      treeWidth: 0,\n      options: [],\n      value: '',\n      initalLabel: '',\n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n\n        d3.select(this.$el).select('#node-link-tree').selectAll('*').remove()\n        let tmpData = sysDatasetObj.getVisData()\n        if('data' in tmpData){\n          this.width = this.$refs.nodeLinkPanel.clientWidth\n          this.height = this.$refs.nodeLinkPanel.clientHeight\n          this.initalLabel = sysDatasetObj.getVisData()['data']['doi']\n          this.draw_node_link_tree(this.width, this.height, tmpData)\n        }\n        else{\n          this.treeSize = 0\n          this.treeHeight = 0\n          this.treeWidth = 0\n        }\n      },\n      visTreeDataState: function(){\n        d3.select(this.$el).select('#node-link-tree').selectAll('*').remove()\n        let tmpData = sysDatasetObj.getVisTreeData()\n        if('data' in tmpData){\n          this.width = this.$refs.nodeLinkPanel.clientWidth\n          this.height = this.$refs.nodeLinkPanel.clientHeight\n          this.initalLabel = sysDatasetObj.getVisTreeData()['data']['doi']\n          this.draw_node_link_tree(this.width, this.height, tmpData)\n        }\n        else{\n          this.treeSize = 0\n          this.treeHeight = 0\n          this.treeWidth = 0\n        }\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'visTreeDataState',\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n      'DATA_QUERY_INDEX'\n    ]),\n    treeChange: function(command){\n       this.DATA_QUERY_INDEX(parseInt(this.value))\n    },\n    draw_node_link_tree: function(width, height, data){\n        let self = this\n\n        let data_index = sysDatasetObj.getSameTree(parseInt(data['index'])-1)\n        d3.selectAll(\".dot\").classed(\"dot-highlighted\", false)\n        // d3.select(\"#dot\"+data_index).classed(\"dot-selected\", false)\n        // d3.select(\"#dot\"+data_index).classed(\"dot-highlighted\", true)\n\n        let tmp_transform = d3.select('#dot'+data_index).attr(\"transform\")\n        let tmp_data = d3.select('#dot'+data_index).data()\n\n        let tmp_x = +d3.select('#dot'+data_index).attr(\"x\")\n        let tmp_y = +d3.select('#dot'+data_index).attr(\"y\")\n        let tmp_r = +d3.select('#dot'+data_index).attr(\"r\")\n\n        let tmp_selected = d3.select('#dot'+data_index).attr(\"class\")\n        let dot_selected_flag = false\n        if (tmp_selected.search(/dot-selected/) != -1){\n            dot_selected_flag = true\n        }\n        \n        d3.select('#dot'+data_index).remove()\n\n        d3.select(\".overview-svg\")\n        .selectAll('#dot'+data_index)\n            .data(tmp_data)\n            .enter()\n            .append(\"circle\")\n            .attr(\"class\",\"dot\")\n            .attr(\"id\", function(d) { return \"dot\"+data_index})\n            .classed(\"dot-highlighted\", true)\n            .classed(\"dot-selected\", dot_selected_flag)\n            .attr(\"transform\", function(d){\n              return tmp_transform;\n            })\n            .attr(\"m\", function(d) {return d['m']})\n            .attr(\"r\", function(){\n              return tmp_r;\n            })\n            .on('click', function(){\n                // d3.selectAll(\".dot\").classed(\"dot-selected\", false)\n                // d3.select(this).classed('dot-selected', true)\n                self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"m\")))\n            });\n\n        self.treeSize = data['size']\n        self.treeHeight = data['height']\n        self.treeWidth = data['width']\n        data = data['data']\n\n        let scale = 300\n\n        let isVertical = 1;\n        let min_width_height = Math.min(width, height);\n        let trbl = (min_width_height * 20) / scale;\n        let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n        let innerWidth = width - 40;\n        let innerHeight = height - 47;\n\n        let r = (min_width_height * 3)/ scale;\n        let r_min = (min_width_height * 2.5)/ scale;\n        let r_max = (min_width_height * 3.5)/ scale;\n        // r = r_max\n        let strokeWidth = (min_width_height * r/5) / scale;\n        let strokeOpacity = (min_width_height *0.4) / scale;\n\n        let degree_max = 0\n        let root = d3.tree().size([innerWidth, innerHeight]) (\n            d3.hierarchy(data)\n                .eachBefore(d=>{\n                // d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n                // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n                // d.data.data.height = d.height; //重新画图之后要重新计算高度\n                // d.data.data.degree = d.children ? d.children.length : 0;\n                // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n            })\n        );\n\n        let DimGray = d3.rgb(105,105,105)\n        // let LightGray = d3.rgb(211,211,211)\n        let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n        let color = d3.interpolate(DimGray, DimGray)\n\n        self.RootDes = root.descendants()\n        let RootDes = self.RootDes\n\n        const svg = d3.select(self.$el).select('#node-link-tree')\n\n        svg.selectAll('.vis-tree-name').remove();\n        svg.append(\"text\")\n          .attr(\"class\", \"vis-tree-name\")\n          .attr(\"y\", height-5)\n          .attr(\"x\", width/2)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"20\")\n          .attr(\"fill\", \"#808080\")\n          .text(data['doi']);\n\n        let t = svg.transition()\n            .duration(750)\n\n        let g = svg.append('g')\n            .attr('id', 'g-level-1')\n            .attr('transform', `translate(${20}, ${10})`);\n        // let g = svg.select('#g-level-1')\n        //     .attr('transform', `translate(${20}, ${10})`);\n\n        let path_logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([5, 1]);\n\n        if(isVertical)\n        {\n            g.append('g')\n            .attr('id', 'g-level-1-path')\n            .attr('class', 'gLink')\n            .attr('stroke-opacity', 0.2)\n            // .attr('stroke-width', strokeWidth)\n            .attr('stroke-width', function(){\n              return path_logScale(self.treeSize)\n            })\n            .attr(\"stroke\", \"red !important\")\n            .attr(\"style\", \"fill: red !important\")\n            .selectAll('path')\n            .data(root.links(), function(d, i) {\n                //真正的nodeIndex在数据上传前就计算好\n                // let source = d.source.data.data.nodeIndex\n                // let target = d.target.data.data.nodeIndex\n                // return \"node\"+source+\"node\"+target;\n            })\n            .join(\n                enter => enter.append('path')\n                .attr(\"stroke\", \"red !important\")\n                .attr(\"fill\", \"red !important\")\n                .each(function(d){d.target.linkNode=self;})\n                .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                update => update\n                .call(update => update.transition(t)\n                .each(function(d){d.target.linkNode=self;})\n                .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                exit => exit\n                .remove()\n            );\n\n            let g_node_stoke = g.append('g')\n                       .attr(\"class\", \"g-nodes-stroke\")\n\n            // 保留\n            let node = g.append('g')\n            .attr('id', 'g-level-1-node')\n            .selectAll('g')\n            .data(RootDes, function(d, i) {\n                //真正的nodeIndex在数据上传前就计算好\n                // let node_id = d.data.data.nodeIndex\n                // return node_id;\n            })\n            .join(\n                enter => enter.append('g')\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                update => update\n                .call(update => update.transition(t)\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                exit => exit\n                .remove()\n            )\n            let logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([10, 5]);\n\n            \n            let node_stroke = []\n\n            d3.select(self.$el).select('#node_link_tree').selectAll('.tree-node').remove();\n\n            node.append(\"g\")\n            .attr(\"id\", d=>\"node-stroke-\"+d['data'].index)\n            .append(\"circle\")\n            .attr('class', 'tree-node')\n            .attr('id', d=> 'node-id-' + d['data'].index)\n            .attr(\"fill\", function(d){\n              if('color_flag' in d['data'] && d['data']['color_flag']){\n                for(let i=0; i<d['data']['color'].length; i++){\n                  let tmp = {}\n                  tmp['node_data'] = d \n                  tmp['index'] = d['data']['index']\n                  tmp['color'] = d['data']['color'][i]\n                  tmp['x'] = d.x\n                  tmp['y'] = d.y\n                  tmp['r'] = logScale(self.treeSize)*0.7 + i*2 + 1\n                  node_stroke.push(tmp)\n                }\n                return \"white\"\n              }\n              return \"steelblue\"\n            })\n            .attr(\"r\", function(d){\n              return logScale(self.treeSize)\n            })\n            .call(self.tooltip_ele(\"node-link-tree\"))\n\n\n            for(let tmp_stroke of node_stroke){\n              d3.select('#node-stroke-'+tmp_stroke['index']).append(\"circle\")\n              .attr(\"stroke\", tmp_stroke['color'])\n              .attr(\"stroke-width\", '2')\n              .attr(\"r\", tmp_stroke['r'])\n              .attr(\"fill-opacity\", '0')\n              .attr(\"transform\", d => `translate(${0},${0})`)\n              .call(self.tooltip_ele(\"node-link-tree\"))\n            }\n\n\n        }\n\n    }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.vis-panel-view{\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  right: 0%;\n  bottom: 0%;\n  .title-text{\n    position: absolute;\n    font-size: 1rem;\n    font-weight: bolder;\n    color: black;\n    top: 5px;\n    left: 5px;\n  }\n  .size-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 30px;\n    left: 5px;\n  }\n  .height-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 50px;\n    left: 5px;\n  }\n  .width-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 70px;\n    left: 5px;\n  }\n  .node-link-tree-panel {\n    position: absolute;\n    top: 2%;\n    bottom: 2%;\n    left: 2%;\n    right: 2%;\n  }\n  .tree-select{\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 100px;\n\n  }\n}\n\n</style>"]}]}
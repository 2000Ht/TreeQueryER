{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/EditorView/EleNode.vue?vue&type=style&index=0&id=120e967d&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/EditorView/EleNode.vue","mtime":1700550468980},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.re-node {\n  height: 100%;\n  width: 30%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n}\n.node-rect-opacity{\n    opacity: 0;\n    cursor: pointer;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n",{"version":3,"sources":["EleNode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EleNode.vue","sourceRoot":"src/views/EditorView","sourcesContent":["<template>\n    <svg class=\"re-node\">\n        <rect class=\"node-rect\" :class=\"{'highlighted': getNodeHighlightState, 'defined': getNodeDefineState}\" \n            :style=\"nodeStyle()\"\n            width=\"30\" height=\"30\" \n            :transform=\"nodeTransform\" \n            :key = \"rectKey\"\n            @click=\"updateSelectedNode\"/>\n        <text \n            :v-if=\"checkName()\"\n            class=\"node-name\"\n            :style=\"nameStyle()\"\n            :transform=\"nameTransform\" \n            text-anchor= \"middle\"\n            alignment-baseline= \"middle\"\n            @click=\"updateSelectedNode\">\n            {{nodeExpression['nodeName']}}\n        </text>\n        <rect class=\"node-rect-opacity\"\n            width=\"30\" height=\"30\" \n            :transform=\"nodeTransform\" \n            :key = \"rectKey1\"\n            @click=\"updateSelectedNode\"/>\n\n\n    </svg>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'EleNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0,\n        rectKey1: 1,\n    }\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        this.rectKey = (this.rectKey + 1) % 2\n        this.rectKey1 = (this.rectKey1 + 1)%2\n      },\n      selectedDomKey: function(){\n      }\n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${20}, ${1})`\n    },\n    nameTransform(){\n        if(this.nodeExpression['nodeName'] == '.')\n            return `translate(${35}, ${9})`\n        return `translate(${35}, ${18})`\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_CONDITION_STATE'\n    ]),\n\n    checkName(){\n        if('nodeName' in this.nodeExpression){\n            return true\n        }\n        return false\n    },\n    updateSelectedNode() {\n        sysDatasetObj.updateSelectedDomKey(this.nodeExpression['key'])\n        this.UPDATE_SELECTED_DOM(this.nodeExpression)\n        this.UPDATE_CONDITION_STATE(false)\n        this.UPDATE_NODE_DEFINITION_STATE()\n    },\n    nodeStyle(){\n        let tmpKey = sysDatasetObj.getSelectedDomKey()\n        if(this.nodeExpression.key === tmpKey){\n            return ( \n                        \"fill: \" + this.nodeExpression['nodeColor'] + \"; \"+\n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"+\n                        \"stroke: red;\"\n            )\n        }\n        return (\n            \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n            \"stroke-dasharray: 0 0; \" + \n            \"stroke-width: 1;\"\n        )\n\n    },\n    nameStyle(){\n        if(this.nodeExpression['nodeName'] == '.'){\n            return \"fill: white !important; font-size: 40px;\"\n        }\n        else \n            return \"fill: white !important; font-size: 18px;\"\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-node {\n  height: 100%;\n  width: 30%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n}\n.node-rect-opacity{\n    opacity: 0;\n    cursor: pointer;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n\n<style scoped lang=\"less\">\n\n</style>\n"]}]}
{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REBranch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REBranch.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n\nexport default {\n  name: 'REBranch',\n  components: {\n    RENode,\n    REPath,\n    REOr\n  },\n  beforeCreate() {\n    this.$options.components.REPath = require(\"@/views/REView/REComponents/REPath.vue\").default;\n  },\n  props: {\n    branchExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n\n    }\n  },\n  mounted() {\n    console.log(\"REBranch Refrshed\")\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n    ]),\n    getNodeHighlightState () {\n        return this.branchExpression.key === this.selectedDomKey\n    },\n    branchTransform(){\n        return `translate(${this.branchExpression['x']}, ${this.branchExpression['y']})`\n    },\n    bracketCompute(){\n      var x1 = this.branchExpression['x1Bracket']\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn ( \" M \" +  x1 + \" \" +  y1 +\n         \t\t \" h \" + -8 +\n                 \" V \" + y2 +\n                 \" h \" + 8);\n    },\n    bracketTransform(){\n      var x1 = this.branchExpression['x1Bracket'] - 8\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn `translate(${x1}, ${y1})`\n    },\n    heightCompute(){\n        var x1 = this.branchExpression['x1Bracket']\n        var y1 = this.branchExpression['y1Bracket']\n        var x2 = this.branchExpression['x2Bracket']\n        var y2 = this.branchExpression['y2Bracket']\n\n        return y2-y1\n    },\n    selectedCompute(){\n        var x1 = this.branchExpression['x1Selected']\n        var x2 = this.branchExpression['x2Selected']\n        var y1 = this.branchExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_SELECTED_PART'\n    ]),\n    computeItemKey(d){\n        return \"item\"+d\n    },\n    updateSelectedBranch() {\n        this.UPDATE_SELECTED_DOM(this.branchExpression)\n    },\n    updateSelectedPart(){\n        if('selected' in this.branchExpression){\n            this.branchExpression['selected'] = !this.branchExpression['selected']\n        }\n        else{\n            this.branchExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    \n  }\n}\n",{"version":3,"sources":["REBranch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"REBranch.vue","sourceRoot":"src/views/REView/REComponents","sourcesContent":["<template>\n    <g class=\"re-branch\">\n        <path :d=\"bracketCompute\" @click=\"updateSelectedBranch()\" @dblclick=\"updateSelectedPart\" :class=\"{'highlighted': getNodeHighlightState }\"/>\n        <rect :transform=\"bracketTransform\" @click=\"updateSelectedBranch()\" @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"10\" :height=\"heightCompute\" opacity=\"0\"/>\n        <g v-for=\"(item, index) in branchExpression['composition']\" :key=\"computeItemKey(index)\">\n            <RENode v-if=\"item['type'] == 'node'\" :nodeExpression=\"item\"></RENode>\n            <REPath v-if=\"item['type'] == 'path'\" :pathExpression=\"item\"></REPath>\n            <REOr v-if=\"item['type'] == 'or'\" :orExpression=\"item\"></REOr>\n        </g>\n        <path v-if=\"branchExpression['selected']\" :d=\"selectedCompute\" />\n    </g>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n\nexport default {\n  name: 'REBranch',\n  components: {\n    RENode,\n    REPath,\n    REOr\n  },\n  beforeCreate() {\n    this.$options.components.REPath = require(\"@/views/REView/REComponents/REPath.vue\").default;\n  },\n  props: {\n    branchExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n\n    }\n  },\n  mounted() {\n    console.log(\"REBranch Refrshed\")\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n    ]),\n    getNodeHighlightState () {\n        return this.branchExpression.key === this.selectedDomKey\n    },\n    branchTransform(){\n        return `translate(${this.branchExpression['x']}, ${this.branchExpression['y']})`\n    },\n    bracketCompute(){\n      var x1 = this.branchExpression['x1Bracket']\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn ( \" M \" +  x1 + \" \" +  y1 +\n         \t\t \" h \" + -8 +\n                 \" V \" + y2 +\n                 \" h \" + 8);\n    },\n    bracketTransform(){\n      var x1 = this.branchExpression['x1Bracket'] - 8\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn `translate(${x1}, ${y1})`\n    },\n    heightCompute(){\n        var x1 = this.branchExpression['x1Bracket']\n        var y1 = this.branchExpression['y1Bracket']\n        var x2 = this.branchExpression['x2Bracket']\n        var y2 = this.branchExpression['y2Bracket']\n\n        return y2-y1\n    },\n    selectedCompute(){\n        var x1 = this.branchExpression['x1Selected']\n        var x2 = this.branchExpression['x2Selected']\n        var y1 = this.branchExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_SELECTED_PART'\n    ]),\n    computeItemKey(d){\n        return \"item\"+d\n    },\n    updateSelectedBranch() {\n        this.UPDATE_SELECTED_DOM(this.branchExpression)\n    },\n    updateSelectedPart(){\n        if('selected' in this.branchExpression){\n            this.branchExpression['selected'] = !this.branchExpression['selected']\n        }\n        else{\n            this.branchExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-branch {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n    &.highlighted {\n        stroke: red;\n    }\n}\n</style>\n"]}]}
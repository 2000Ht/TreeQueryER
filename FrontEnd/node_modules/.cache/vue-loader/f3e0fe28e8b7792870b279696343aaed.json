{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/AttributeEle.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/AttributeEle.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.barchart-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n.text-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n@attr_init_brush_colr: #FF6347;\n.highlight-bar-initg-active {\n  fill: @attr_init_brush_colr;\n}\n",{"version":3,"sources":["AttributeEle.vue"],"names":[],"mappingsqfA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AttributeEle.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<div>\n  <svg :id=\"'svg-chart' + vis_attr\">\n    <g :id=\"'svg-chart-g' + vis_attr\"></g>\n    <g :id=\"'svg-chart-g1' + vis_attr\"></g>\n    <g :id=\"'brush-g' + vis_attr\"></g>  <!--初始层上的brush-->\n    <!-- <g :id=\"'brush-g1' + vis_attr\"></g> -->\n    <g :id=\"'svg-chart-xaxis' + vis_attr\"></g>\n    <g :id=\"'svg-chart-yaxis' + vis_attr\"></g>\n    <g :id=\"'svg-chart-text' + vis_attr\"></g>\n    <g :id=\"'svg-chart-text1' + vis_attr\"></g>\n  </svg>\n</div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nimport busInvert from '../brushedInvert'\nexport default {\n  name: 'AttributeEle',\n  components: {\n\n  },\n  props: {\n    vis_attr: String,\n    dataBackGround: Object,\n    dataHighLight: Array,\n  },\n  data() {\n    return {\n      brushed_data: null, //从层次结构可视化获得的刷选数据\n      init_brushed_data: null, //最初的层次结构可视化数据\n      init_x_scale: null, //最初的层次结构数据x轴比例尺\n      init_y_scale: null, //最初的层次结构数据y轴比例尺\n      watch_jsonDataIn: 0,\n      attr_ele_brushed_data: null, //在属性柱状图上刷选的数据\n      data_backGround: null,\n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n    this.draw_attribute();\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      brushed_data: function(){\n        this.draw_attribute();\n      },\n      treeViewState: function() {\n        this.watch_jsonDataIn = 1;\n        this.data_background = this.dataBackGround['data']\n        this.draw_attribute();\n      },\n      // dataBackGround: function(){\n      //   this.watch_jsonDataIn = 1;\n      //   this.data_background = this.dataBackGround['data']\n      //   this.draw_attribute();\n      //   console.log('dataBackGround:',this.dataBackGround)\n      // },\n      dataHighLight: function(){\n        if(this.dataHighLight==null || typeof this.dataHighLight == 'undefined' || !(this.dataHighLight instanceof Array) ) return;\n        else{\n          this.dataHighLight.forEach(ele=>{\n            //ele 是treeIn数组 或者 treeOut数组\n            if(ele['type']=='treeOut' && ele['data'][0]){\n              // console.log('dataHighLight----treeOut',ele)\n              let eiChildrenIndexList = []\n              ele['data'].forEach(ei=>{\n                eiChildrenIndexList = eiChildrenIndexList.concat(d3.hierarchy(ei).descendants().map(d=>d.data.data.nodeIndex))\n              })\n              eiChildrenIndexList = Array.from(new Set( eiChildrenIndexList ))\n              let sendHighLight = d3.hierarchy(this.data_background).descendants().filter(d=>eiChildrenIndexList.includes(d.data.data.nodeIndex)).map(d=>d.data)\n              // console.log(sendHighLight)\n              this.brushed_data = sendHighLight\n              this.draw_attribute()\n            }\n            if(!ele['data'][0]){ //页面上的Out是\"请选择\" 或者为null\n              console.log(\"treeOut['data'][0]:\", ele['data'][0])\n            }\n          })\n        }\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'treeViewState'\n    ]),\n  },\n  created(){\n    bus.$on('brushed_data', (data)=>{\n      this.brushed_data = data;\n    })\n  },\n  methods: {\n    draw_attribute: function() {\n      //绘制刷选或者选择的数据；同时当前没有更新底层数据\n      if(this.brushed_data!=null && this.brushed_data.length > 0 && !this.watch_jsonDataIn){\n        let brushed_data = Object.values(this.brushed_data)\n        let vis_show = {}\n        let data_keys = Object.keys(brushed_data[0].data)\n        data_keys.forEach(ele=>{\n          vis_show[ele] = []\n          brushed_data.forEach(ei=>{\n            if(ei.data[ele] == null){ vis_show[ele].push(0)}\n            else{vis_show[ele].push(ei.data[ele])}\n          })\n        })\n        this.drawChart(vis_show[this.vis_attr], this.vis_attr, 0, '#ff6347')\n      }\n      else{\n        //绘制每次初始化的数据 以及 brush的数据为空时也需要重新绘图\n        if(this.dataBackGround['data'])\n        {\n          this.watch_jsonDataIn = 0\n          let data = this.dataBackGround['data']\n          let d = d3.hierarchy(data).eachBefore(d=>{\n            d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n            d.data.data.height = d.height; //重新画图之后要重新计算高度\n            d.data.data.degree = d.children ? d.children.length : 0; //重新画图之后要重新计算节点出度\n          })\n          let desc = d.descendants()\n          let data_keys = Object.keys(d.data.data)\n          let vis_show = {}\n          data_keys.forEach(ele=>{\n            vis_show[ele] = desc.map(d=>{\n              if(d.data.data[ele] == null){return 0;}\n              else if(d.data.data[ele] instanceof Array){return d.data.data[ele].length;}\n              else{return d.data.data[ele]}\n            })\n          })\n          // console.log(vis_show)\n          this.drawChart(vis_show[this.vis_attr], this.vis_attr, 1, '#ff6347')\n        }\n      }\n    },\n    drawChart: function(items, xlabel, isinit, colorup, colorbackground='gray'){\n      // let self = this\n      let margin = {top:20, right:20, bottom:50, left:20}\n      let width = d3.select('#svg-chart'+ this.vis_attr).node().getBoundingClientRect().width\n      let height = d3.select('#svg-chart' + this.vis_attr).node().getBoundingClientRect().height\n\n      //初始化绘图\n      if(isinit){\n        let color = colorbackground//\"gray\"\n        let data1 = {}\n        items.forEach(ele => {\n          if(data1[ele]){ \n            data1[ele]++;\n          }\n          else{ \n            data1[ele] = 1;\n          }\n        });\n        let attr_show_skew = 0 //x轴类型 数字0 字符串1 时间\n        if(xlabel == 'created_at' || xlabel == 'time'\n         || xlabel == 'edu' || xlabel == 'followers_count_str'\n         || xlabel == 'geo' || xlabel == 'location'\n         || xlabel == 'region' || xlabel == 'source'\n         || xlabel == 'type'){\n          attr_show_skew = 1\n        }\n        console.log('attr_show_skew: ',attr_show_skew)\n        let data = []\n        for (var key in data1) {\n          let tmp = {}\n          tmp['name'] = key\n          tmp['count'] = data1[key]\n          data.push(tmp)\n        }\n        this.init_brushed_data = JSON.parse(JSON.stringify(data)) //深拷贝 //保存初始化数据\n\n        \n\n        let y = d3.scaleLinear()\n          .domain([0, d3.max(this.init_brushed_data, d => d.count)]).nice()\n          .range([height - margin.bottom, margin.top])\n          .interpolate(d3.interpolateRound)\n        \n        let x = d3.scaleBand()\n          .domain(this.init_brushed_data.map(d => d.name).sort(function(a, b){return parseInt(a)-parseInt(b)}))\n          .range([margin.left, width - margin.right - margin.left])\n          .padding(0.1)\n          .round(true)\n        \n        this.init_x_scale = x;\n        this.init_y_scale = y;\n\n        let svg_ = d3.select(\"#svg-chart\"+ this.vis_attr)\n\n        let t = svg_.transition()\n          .duration(750)\n\n        // const brush = d3.brushX()\n        //   .extent([[margin.left, margin.top],[width-margin.right-margin.left, height-margin.bottom]])\n        //   .on(\"start\", brushstart)\n        //   .on(\"brush\", brushing)\n        //   .on(\"end\", brushend)\n\n        let mv_left = 10\n        let vis_attr = this.vis_attr\n        let index = 0\n        svg_.select(\"#svg-chart-g\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          .selectAll(\".histogram-bar\")\n          .data(data)\n          .join(\n            enter => enter.append(\"rect\")\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"initg\"+ vis_attr + d.index;}) //在初始svg-chart-g上的高亮\n              .attr('class',\"histogram-bar\")\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d =>y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count))\n              .attr(\"fill\", color),\n            update => update\n              .call(update => update.transition(t)\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"initg\"+ vis_attr + d.index;}) //在初始svg-chart-g上的高亮\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d => y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count)))\n              .attr(\"fill\", color),\n            exit => exit\n              .remove()\n          )\n        \n        svg_.select(\"#brush-g\"+ this.vis_attr).selectAll('*').remove();\n        // svg_.select(\"#brush-g1\"+ this.vis_attr).selectAll('*').remove();\n        \n        let brushG = svg_.select('#brush-g'+ this.vis_attr)\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          // .call(brush)\n          // .call(brush.move, x.range())\n\n        \n        svg_.select(\"#svg-chart-text\"+ this.vis_attr)\n          .selectAll(\"text\")\n          .data(data)\n          .join(\n            enter => enter.append(\"text\")\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"black\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",6)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.35em')\n              .text(d=>d.count),\n            update => update\n              .call(update => update.transition(t)\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"black\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",6)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.35em')\n              .text(d=>d.count)),\n            exit => exit\n              .remove()\n          )\n        \n        svg_.select(\"#svg-chart-g1\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-text1\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr).selectAll('*').remove();\n        let fontsize = 6\n\n        //label是否需要倾斜\n        if(attr_show_skew){\n          svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n            .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n            .call(d3.axisBottom(x))\n              .selectAll('text')\n              .attr(\"font-size\",fontsize)\n              .attr(\"text-anchor\", \"start\")\n              .attr('transform','rotate(30)')\n        }\n        else{\n          svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n            .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n            .call(d3.axisBottom(x))\n              .selectAll('text')\n              .attr(\"font-size\",fontsize)\n              .attr(\"text-anchor\", \"start\")\n        }\n        svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n          // .call(d3.axisBottom(x))\n          // .call(g => g.select(\".domain\"))\n          .call(g => g.append(\"text\")\n            .attr(\"x\", width - margin.left - margin.right)\n            .attr(\"y\", 15)\n            .attr(\"fill\", 'currentColor')\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\",fontsize)\n            .text(xlabel))\n          .node()\n        \n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${margin.left + 10},0)`)\n          .call(d3.axisLeft(y))\n          .selectAll('text')\n            .attr(\"font-size\",fontsize)\n            .attr(\"text-anchor\", \"end\")\n\n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${margin.left + 10},0)`)\n          // .call(d3.axisLeft(y))\n          // .call(g => g.select(\".domain\"))\n          .call(g => g.select(\".tick:last-of-type text\").clone()\n            .attr(\"x\", -25)\n            .attr(\"y\", -10)\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"transform\",\"rotate(0)\")\n            .attr(\"font-size\",fontsize)\n            .text(\"Count/N\"))\n          .node()\n        \n        svg_.call(brush, brushG)\n\n        function brush(cell){\n          const brush = d3.brushX()\n            .extent([[margin.left+mv_left, margin.top],[width-margin.right-margin.left+mv_left, height-margin.bottom]])\n            .on(\"start\", brushstarted)\n            .on(\"brush\", brushed)\n            .on(\"end\", brushended)\n          \n          cell.call(brush);\n\n          let brushCell;\n          let selected = []\n          function brushstarted() {\n            if (brushCell !== this) {\n              d3.select(brushCell).call(brush.move, null);\n              brushCell = this;\n            }\n            svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", true)\n            svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", true)\n            // console.log(\"brush开始\") //按下操作\n          }\n\n          function brushed() { \n            // console.log(\"d3.event.selection\", d3.event.selection) //按下下拉才执行此函数\n            svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", true)\n            svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", true)\n\n            let [x0, x1] = d3.event.selection;\n            selected = []\n            data.forEach(ele=>{\n              if( x0 <= x(ele.name) + mv_left && x1 >= x(ele.name) + mv_left + x.bandwidth() ){\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", true);\n                selected.push(ele)\n              }\n              else{\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", false);\n              }\n            })\n            //brush的时候传数据\n            busInvert.$emit('attr_ele_brushed_data', selected)\n          }\n\n          function brushended() {\n            if (d3.event.selection != null){\n              //brushend的时候传数据\n              // busInvert.$emit('attr_ele_brushed_data', selected)\n              return;\n            }\n            else{\n              svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", false)\n              svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", false)\n              svg_.selectAll('.histogram-bar').classed('highlight-bar-initg-active', false)\n\n              //当d3.event.selection == null 时，将之前的刷选清除掉\n              selected.forEach(ele=>{\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", false);\n              })\n              busInvert.$emit('attr_ele_brushed_data', [])\n              // console.log(\"brush结束\")\n              return;\n            }\n          }\n\n        }\n\n      }\n      else{\n        let color = colorup//d3.rgb(255, 99, 71) //d3.rgb(28, 194, 83); //\"steelblue\"\n        let data1 = {}\n        // 统计items各个类别的个数, 构成一个字典 data1 = {\"类别1\":个数2, \"类别2\":个数2}\n        items.forEach(ele => {\n          if(data1[ele]){ \n            data1[ele]++;\n          }\n          else{ \n            data1[ele] = 1;\n          }\n        });\n        //data是一个列表，里面包含的是字典 data = [{\"name\":\"类别1\", \"count\": 个数1}, {\"name\":\"类别2\", \"count\": 个数2}]\n        // let data = this.init_brushed_data //浅拷贝\n        let data = JSON.parse(JSON.stringify(this.init_brushed_data)) //深拷贝\n        data.forEach(ele => {ele['count'] = 0})\n        for (var key in data1) {\n          data.forEach(ele=>{\n            if(ele['name']==key){\n              ele['count'] = data1[key]\n            }\n          })\n        }\n\n        let y = d3.scaleLinear()\n          .domain([0, d3.max(this.init_brushed_data, d => d.count)]).nice()\n          .range([height - margin.bottom, margin.top])\n          .interpolate(d3.interpolateRound)\n        let x = d3.scaleBand()\n          .domain(this.init_brushed_data.map(d => d.name).sort(function(a, b){return parseInt(a)-parseInt(b)}))\n          .range([margin.left, width - margin.right - margin.left])\n          .padding(0.1)\n          .round(true)\n\n        let svg_ = d3.select(\"#svg-chart\"+ this.vis_attr)\n\n        let t = svg_.transition()\n          .duration(750)\n\n        let mv_left = 10\n        let vis_attr = this.vis_attr\n        let index = 0\n        svg_.select(\"#svg-chart-g1\"+ this.vis_attr)\n          .attr('class', 'barchart-g1')\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          .selectAll(\".histogram-bar\")\n          .data(data)\n          .join(\n            enter => enter.append(\"rect\")\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"g1\"+ vis_attr + d.index;})\n              .attr('class', 'histogram-bar')\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d =>y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count))\n              .attr(\"fill\", color),\n            update => update\n              .call(update => update.transition(t)\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"g1\"+ vis_attr + d.index;})\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d => y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count)))\n              .attr(\"fill\", color),\n            exit => exit\n              .remove()\n          )\n\n        svg_.select(\"#svg-chart-text1\"+ this.vis_attr)\n          .attr('class', 'text-g1')\n          .selectAll(\"text\")\n          .data(data)\n          .join(\n            enter => enter.append(\"text\")\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"white\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",5)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.70em')\n              .text(d=>d.count? d.count : null), //个数为0 不显示\n            update => update\n              .call(update => update.transition(t)\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"white\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",5)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.70em')\n              .text(d=>d.count? d.count: null)),\n            exit => exit\n              .remove()\n          )\n\n      }\n    }\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"less\">\n.barchart-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n.text-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n@attr_init_brush_colr: #FF6347;\n.highlight-bar-initg-active {\n  fill: @attr_init_brush_colr;\n}\n</style>"]}]}
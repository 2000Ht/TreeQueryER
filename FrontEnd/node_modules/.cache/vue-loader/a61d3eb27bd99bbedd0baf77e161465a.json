{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/DescriptionDialog.vue?vue&type=style&index=1&id=e4768338&lang=less&scoped=true&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/DescriptionDialog.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.body {\n  max-height: 300px;\n  overflow-y: auto;\n}\n.description-attribute {\n  margin-bottom: 10px;\n}\n.attibute-space {\n  line-height: 28px;\n  vertical-align: middle;\n  text-align: center;\n  cursor: pointer;\n  &.close:hover {\n    color: red;\n  }\n}\n",{"version":3,"sources":["DescriptionDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DescriptionDialog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div class=\"modal\" v-if=\"visible\" style=\"width: 320px\">\n            <div class=\"header\">\n                <span>{{ dialogTitle }}</span>\n            </div>\n            <div class=\"body\">\n                <el-form ref=\"form\" :model=\"descriptionObj\" label-width=\"120px\">\n                  <el-row class=\"description-attribute\">\n                      <el-col :span=\"24\">\n                        <el-input size=\"mini\" placeholder=\"title (required)\" v-model=\"descriptionObj.title\"></el-input>\n                      </el-col>\n                  </el-row>\n                  <el-row class=\"description-attribute\">\n                      <el-col :span=\"24\">\n                        <el-input type=\"textarea\" :rows=\"2\" size=\"mini\" placeholder=\"description (required)\" v-model=\"descriptionObj.content\">\n                        </el-input>\n                      </el-col>\n                  </el-row>\n                </el-form>\n            </div>\n            <div class=\"footer\">\n                <button @click=\"handleClickCancelDescription\">Cancel</button>\n                <button @click=\"handleClickProcessDescription\">Process</button>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n  import '../assets/modal.css';\n\n  export default {\n    props: {\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      descriptionObj: {\n        type: Object,\n        default: {} // default attributes: title, content\n      },\n      dialogTitle: {\n        type: String,\n        default: \"New Description\" //  when new a description, the dialog title is \"New Description\"; otherwise the dialog title is \"Edit Description\"\n      }\n    },\n    data() {\n      return {\n      };\n    },\n    methods: {\n      async handleClickProcessDescription() {\n        console.log('descriptionObj', this.descriptionObj)\n        // save current description object\n        // when new description name and type are not empty, then initialize new description\n        if (this.dialogTitle === \"New Description\") {\n          this.newDescription()\n        } else {\n          this.editDescription()\n        }\n        this.$emit('update:visible', false);\n      },\n      async handleClickCancelDescription() {\n        // cancel this description\n        this.$emit('update:visible', false);\n      },\n      newDescription: function() {\n        let content = this.descriptionObj['content']\n        // extract the component from the content of description\n        this.descriptionObj['component'] = this.extractComponent(content)\n        this.$emit('adddescription', this.descriptionObj);\n      },\n      editDescription: function() {\n        // edit the descriptions\n        let content = this.descriptionObj['content']\n        this.descriptionObj['component'] = this.extractComponent(content)\n      },\n      extractComponent: function(content) {\n        // extract the components from the content\n        // *TODO* current we only use the static extraction results\n        let component = {type: 'created', color: '#fdbf6f', name: 'incident created', ID: '1718299292', DateTime: '2020-10-23 13:20', Description: 'short description'}\n        return component\n      }\n    },\n    watch: {}\n  };\n</script>\n<style lang=\"less\">\n  .el-color-picker__trigger {\n    height: 28px !important;\n    width: 28px !important;\n  }\n  .el-color-picker {\n    height: 28px !important;\n  }\n  .el-textarea__inner {\n    font-family: sans-serif;\n  }\n</style>\n<style lang=\"less\" scoped>\n  .body {\n    max-height: 300px;\n    overflow-y: auto;\n  }\n  .description-attribute {\n    margin-bottom: 10px;\n  }\n  .attibute-space {\n    line-height: 28px;\n    vertical-align: middle;\n    text-align: center;\n    cursor: pointer;\n    &.close:hover {\n      color: red;\n    }\n  }\n</style>"]}]}
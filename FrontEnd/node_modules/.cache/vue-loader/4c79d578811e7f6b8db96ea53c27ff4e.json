{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/VoronoiTreemap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/VoronoiTreemap.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\nimport * as seedrandom from 'seedrandom'\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_voronoi_treemap: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      let seed = seedrandom(2022)\n\n      d3.select('#voronoi_treemap').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"vt\")\n        }\n      }\n      // console.log(keep_random_highlight)\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n        \n          let min_width_height = Math.min(width, height);\n\n          let trbl = (min_width_height * 10) / this.scale;\n          let text_x_r = (min_width_height * 7) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n\n          let voronoiTreemap = d3VoronoiTreemap.voronoiTreemap()\n            .prng(seed)\n            .clip([\n            \t[margin.left, margin.top],\n  \t\t        [margin.left, height - margin.bottom],\n  \t\t        [width - margin.right, height - margin.bottom],\n  \t\t        [width - margin.right, margin.top],\n              ])\n\n          let root = d3.hierarchy(data)\n              .eachBefore(function(d){\n                d.data.id = (d.parent? d.parent.data.id+'.':'')+d.data.name;\n              })\n              .sum( d=> d.value )\n              .sort((a,b) => b.value - a.value)\n          voronoiTreemap(root)\n\n          let allNodes = root.descendants()\n          \t.sort((a,b)=>a.depth - b.depth)\n          \t.map((d,i)=>Object.assign({},d,{id:i}));\n          \n          let title = function(n){return `PATH: ${n.data.id}\\nNAME: ${n.data.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)       \n          let color = d3.scaleOrdinal([DimGray,LightGray])\n\n          const svg = d3.select(this.$el)\n            .select('#voronoi_treemap')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n\n          g.append('style').text(`\n            .rect-vt-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 2px;\n            }\n          `);\n\n          let node = g.selectAll('a')\n          \t.data(allNodes)\n          \t.join('a');\n\n          node.append('path')\n            .attr('class', d=>d.data.name+'vt')\n          \t.style('fill', d => d.depth === 1 ? color(d.data.name) : 'none')\n            .attr('d', d=>'M'+d.polygon.join('L')+'Z')\n    \t\t    .attr('stroke', '#F5F5F2')\n    \t\t    .attr('stroke-width', d => (min_width_height*(8 - d.depth * 5))/this.scale)\n    \t\t    .style('fill-opacity', d => d.depth >= 1 ? 1 : 0)\n    \t\t    .attr('pointer-events', d => d.depth >= 2 ? 'all' : 'none')\n            .on(\"mouseover\", mouseovered(true,keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false,keep_random_highlight));\n\n          node.append('title')\n            .text(d=>title(d))\n\n          if(needlable){\n            node.append(\"text\")\n      \t\t\t\t.data(allNodes.filter(d =>d.depth === 2))\n      \t\t\t  .join('text')\n      \t\t\t    .attr('class', d => `label-${d.id}`)\n      \t\t\t    .attr('text-anchor', 'middle')\n      \t\t\t    .attr('transform', d => `translate(${d.polygon.site.x},${d.polygon.site.y})`)\n      \t\t\t    .text(d => d.data.name)\n      \t\t\t    .style('font-size', text_x_r)\n      \t\t\t    .style('fill', '#F5F5F5')\n          }\n\n          function mouseovered(active,keep_random_highlight){\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).style('stroke', 'steelblue').style('stroke-width','2px');\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-vt-active\", active);\n            }\n          }\n\n      // });\n\n    }\n  }\n}\n",{"version":3,"sources":["VoronoiTreemap.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","file":"VoronoiTreemap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"voronoi_treemap\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport * as seedrandom from 'seedrandom'\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_voronoi_treemap: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      let seed = seedrandom(2022)\n\n      d3.select('#voronoi_treemap').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"vt\")\n        }\n      }\n      // console.log(keep_random_highlight)\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n        \n          let min_width_height = Math.min(width, height);\n\n          let trbl = (min_width_height * 10) / this.scale;\n          let text_x_r = (min_width_height * 7) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n\n          let voronoiTreemap = d3VoronoiTreemap.voronoiTreemap()\n            .prng(seed)\n            .clip([\n            \t[margin.left, margin.top],\n  \t\t        [margin.left, height - margin.bottom],\n  \t\t        [width - margin.right, height - margin.bottom],\n  \t\t        [width - margin.right, margin.top],\n              ])\n\n          let root = d3.hierarchy(data)\n              .eachBefore(function(d){\n                d.data.id = (d.parent? d.parent.data.id+'.':'')+d.data.name;\n              })\n              .sum( d=> d.value )\n              .sort((a,b) => b.value - a.value)\n          voronoiTreemap(root)\n\n          let allNodes = root.descendants()\n          \t.sort((a,b)=>a.depth - b.depth)\n          \t.map((d,i)=>Object.assign({},d,{id:i}));\n          \n          let title = function(n){return `PATH: ${n.data.id}\\nNAME: ${n.data.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)       \n          let color = d3.scaleOrdinal([DimGray,LightGray])\n\n          const svg = d3.select(this.$el)\n            .select('#voronoi_treemap')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n\n          g.append('style').text(`\n            .rect-vt-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 2px;\n            }\n          `);\n\n          let node = g.selectAll('a')\n          \t.data(allNodes)\n          \t.join('a');\n\n          node.append('path')\n            .attr('class', d=>d.data.name+'vt')\n          \t.style('fill', d => d.depth === 1 ? color(d.data.name) : 'none')\n            .attr('d', d=>'M'+d.polygon.join('L')+'Z')\n    \t\t    .attr('stroke', '#F5F5F2')\n    \t\t    .attr('stroke-width', d => (min_width_height*(8 - d.depth * 5))/this.scale)\n    \t\t    .style('fill-opacity', d => d.depth >= 1 ? 1 : 0)\n    \t\t    .attr('pointer-events', d => d.depth >= 2 ? 'all' : 'none')\n            .on(\"mouseover\", mouseovered(true,keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false,keep_random_highlight));\n\n          node.append('title')\n            .text(d=>title(d))\n\n          if(needlable){\n            node.append(\"text\")\n      \t\t\t\t.data(allNodes.filter(d =>d.depth === 2))\n      \t\t\t  .join('text')\n      \t\t\t    .attr('class', d => `label-${d.id}`)\n      \t\t\t    .attr('text-anchor', 'middle')\n      \t\t\t    .attr('transform', d => `translate(${d.polygon.site.x},${d.polygon.site.y})`)\n      \t\t\t    .text(d => d.data.name)\n      \t\t\t    .style('font-size', text_x_r)\n      \t\t\t    .style('fill', '#F5F5F5')\n          }\n\n          function mouseovered(active,keep_random_highlight){\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).style('stroke', 'steelblue').style('stroke-width','2px');\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-vt-active\", active);\n            }\n          }\n\n      // });\n\n    }\n  }\n}\n</script>"]}]}
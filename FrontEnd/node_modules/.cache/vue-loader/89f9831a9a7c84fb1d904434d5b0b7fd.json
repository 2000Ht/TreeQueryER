{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REListNode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REListNode.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n    import { getComponentKey } from '@/utils/componentkey.js'\n\nexport default {\n  name: 'REListNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0\n    }\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        this.rectKey = (this.rectKey + 1) % 2\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${this.nodeExpression['x']}, ${this.nodeExpression['y']})`\n    },\n    labelTransform(){\n        let tmpX = this.nodeExpression['x'] + 6.5\n        let tmpY = this.nodeExpression['y'] + 4\n        return `translate(${tmpX}, ${tmpY})`\n    },\n    repeatTransform(){\n        return `translate(${this.nodeExpression['xRepeat']}, ${this.nodeExpression['yRepeat']})`\n    },\n    branchRepeatTransform(){\n        return `translate(${this.nodeExpression['xBranchRepeat']}, ${this.nodeExpression['yBranchRepeat']})`\n    },\n    upperTransform(){\n        return `translate(${this.nodeExpression['xUpper']}, ${this.nodeExpression['yUpper']})`\n    },\n    orCompute(){\n        var x1 = this.nodeExpression['xOr']\n        var y1 = this.nodeExpression['yOr']\n\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" v \" + 30);\n    },\n    notCompute(){\n        var x1 = this.nodeExpression['notX']\n        var y1 = this.nodeExpression['notY']\n        \n        return ( \"M \" + x1 + \" \" + y1 +\n                 \"v \" + 22);\n    },\n    selectedCompute(){\n        var x1 = this.nodeExpression['x1Selected']\n        var x2 = this.nodeExpression['x2Selected']\n        var y1 = this.nodeExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n    leftBracketBranchCompute()\n\t{\n\n        var x1 = this.nodeExpression['x1LeftBranchBracket']\n        var y1 = this.nodeExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2LeftBranchBracket']\n        var y2 = this.nodeExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    rightBracketBranchCompute()\n\t{\n        var x1 = this.nodeExpression['x1RightBranchBracket']\n        var y1 = this.nodeExpression['y1RightBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2RightBranchBracket']\n        var y2 = this.nodeExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    textX(){\n        return this.nodeExpression['x'] + 15\n    },\n    textY(){\n        return this.nodeExpression['y'] + 17\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_RETREE_DATA_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_SELECTED_LIST_DOM',\n      'UPDATE_NODE_DEFINITION_STATE2'\n    ]),\n    checkRepeat() {\n        if('repeat' in this.nodeExpression)\n            if(this.nodeExpression['repeat'][0]!=1 || this.nodeExpression['repeat'][1]!=1){\n                        return true\n            }\n        return false\n    },\n    checkBranchRepeat() {\n        if('branchRepeat' in this.nodeExpression)\n            if(this.nodeExpression['branchRepeat'][0]!=1 || this.nodeExpression['branchRepeat'][1]!=1)\n                return true\n        return false\n    },\n    checkLabel(){\n        if('nodeName' in this.nodeExpression){\n            return true\n        }\n        return false\n    },\n    updateNode() {\n\n        if(this.selectedDom){\n            if(this.selectedDom['type'] == 'node'){\n                this.selectedDom['definition'] = true\n                this.selectedDom['nodeName'] = this.nodeExpression['nodeName']\n                this.selectedDom['nodeColor'] = this.nodeExpression['nodeColor']\n                this.selectedDom['data'] = JSON.parse(JSON.stringify(this.nodeExpression['data']))\n                this.selectedDom['key'] = getComponentKey()\n                \n                this.UPDATE_RETREE_DATA_STATE()   \n                this.RESET_DOM_KEY_STATE()  \n                // this.UPDATE_NODE_DEFINITION_STATE()\n                // this.UPDATE_SELECTED_DOM(this.nodeExpression)\n            }\n        }\n        else{\n            this.UPDATE_SELECTED_LIST_DOM(this.nodeExpression)\n            this.UPDATE_NODE_DEFINITION_STATE2()\n        }\n\n        \n    },\n    updateSelectedPart(){\n        if('selected' in this.nodeExpression){\n            this.nodeExpression['selected'] = !this.nodeExpression['selected']\n        }\n        else{\n            this.nodeExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    updateRepeat() {\n        this.UPDATE_REPEAT_DOM(this.nodeExpression)\n    },\n    nodeStyle(){\n        if('nodeColor' in this.nodeExpression){\n            return (\n                \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n                \"stroke-dasharray: 0 0; \" + \n                \"stroke-width: 1;\"\n            )\n\n        }\n        if(this.nodeExpression.key === this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n        return (\n            \"stroke: #c4bbbb; \" + \n            \"stroke-width: 2; \" + \n            \"stroke-dasharray: 4 2;\" + \n            \"fill: white; \"\n        )\n\n    },\n    upperStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    notStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important; \" +\n                     \"fill: red\" \n                    );\n        }\n    },\n    nameStyle(){\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"font-weight:bold; fill: black !important;\"\n        }\n        else return \"font-weight:bold; fill: white !important;\"\n    }\n\n  }\n}\n",{"version":3,"sources":["REListNode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"REListNode.vue","sourceRoot":"src/views/REView/REComponents","sourcesContent":["\n<template>\n    <div class=\"re-node\">\n        <svg>\n            <rect class=\"node-rect\" :class=\"{'highlighted': getNodeHighlightState, 'defined': getNodeDefineState}\" \n                :style=\"nodeStyle()\"\n                width=\"45\" height=\"45\" \n                :key = \"rectKey\"\n                @click=\"updateNode\"/>\n            <text\n                :v-if=\"checkLabel()\"\n                class=\"node-name\"\n                :style=\"nameStyle()\"\n                text-anchor= \"middle\"\n                alignment-baseline= \"middle\"\n                :dx=\"22.5\"\n                :dy=\"22.5\"\n                @click=\"updateNode\">\n                {{nodeExpression['nodeName']}}\n            </text>\n        </svg>\n\n\n\n    </div>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import { getComponentKey } from '@/utils/componentkey.js'\n\nexport default {\n  name: 'REListNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0\n    }\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        this.rectKey = (this.rectKey + 1) % 2\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${this.nodeExpression['x']}, ${this.nodeExpression['y']})`\n    },\n    labelTransform(){\n        let tmpX = this.nodeExpression['x'] + 6.5\n        let tmpY = this.nodeExpression['y'] + 4\n        return `translate(${tmpX}, ${tmpY})`\n    },\n    repeatTransform(){\n        return `translate(${this.nodeExpression['xRepeat']}, ${this.nodeExpression['yRepeat']})`\n    },\n    branchRepeatTransform(){\n        return `translate(${this.nodeExpression['xBranchRepeat']}, ${this.nodeExpression['yBranchRepeat']})`\n    },\n    upperTransform(){\n        return `translate(${this.nodeExpression['xUpper']}, ${this.nodeExpression['yUpper']})`\n    },\n    orCompute(){\n        var x1 = this.nodeExpression['xOr']\n        var y1 = this.nodeExpression['yOr']\n\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" v \" + 30);\n    },\n    notCompute(){\n        var x1 = this.nodeExpression['notX']\n        var y1 = this.nodeExpression['notY']\n        \n        return ( \"M \" + x1 + \" \" + y1 +\n                 \"v \" + 22);\n    },\n    selectedCompute(){\n        var x1 = this.nodeExpression['x1Selected']\n        var x2 = this.nodeExpression['x2Selected']\n        var y1 = this.nodeExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n    leftBracketBranchCompute()\n\t{\n\n        var x1 = this.nodeExpression['x1LeftBranchBracket']\n        var y1 = this.nodeExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2LeftBranchBracket']\n        var y2 = this.nodeExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    rightBracketBranchCompute()\n\t{\n        var x1 = this.nodeExpression['x1RightBranchBracket']\n        var y1 = this.nodeExpression['y1RightBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2RightBranchBracket']\n        var y2 = this.nodeExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    textX(){\n        return this.nodeExpression['x'] + 15\n    },\n    textY(){\n        return this.nodeExpression['y'] + 17\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_RETREE_DATA_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_SELECTED_LIST_DOM',\n      'UPDATE_NODE_DEFINITION_STATE2'\n    ]),\n    checkRepeat() {\n        if('repeat' in this.nodeExpression)\n            if(this.nodeExpression['repeat'][0]!=1 || this.nodeExpression['repeat'][1]!=1){\n                        return true\n            }\n        return false\n    },\n    checkBranchRepeat() {\n        if('branchRepeat' in this.nodeExpression)\n            if(this.nodeExpression['branchRepeat'][0]!=1 || this.nodeExpression['branchRepeat'][1]!=1)\n                return true\n        return false\n    },\n    checkLabel(){\n        if('nodeName' in this.nodeExpression){\n            return true\n        }\n        return false\n    },\n    updateNode() {\n\n        if(this.selectedDom){\n            if(this.selectedDom['type'] == 'node'){\n                this.selectedDom['definition'] = true\n                this.selectedDom['nodeName'] = this.nodeExpression['nodeName']\n                this.selectedDom['nodeColor'] = this.nodeExpression['nodeColor']\n                this.selectedDom['data'] = JSON.parse(JSON.stringify(this.nodeExpression['data']))\n                this.selectedDom['key'] = getComponentKey()\n                \n                this.UPDATE_RETREE_DATA_STATE()   \n                this.RESET_DOM_KEY_STATE()  \n                // this.UPDATE_NODE_DEFINITION_STATE()\n                // this.UPDATE_SELECTED_DOM(this.nodeExpression)\n            }\n        }\n        else{\n            this.UPDATE_SELECTED_LIST_DOM(this.nodeExpression)\n            this.UPDATE_NODE_DEFINITION_STATE2()\n        }\n\n        \n    },\n    updateSelectedPart(){\n        if('selected' in this.nodeExpression){\n            this.nodeExpression['selected'] = !this.nodeExpression['selected']\n        }\n        else{\n            this.nodeExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    updateRepeat() {\n        this.UPDATE_REPEAT_DOM(this.nodeExpression)\n    },\n    nodeStyle(){\n        if('nodeColor' in this.nodeExpression){\n            return (\n                \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n                \"stroke-dasharray: 0 0; \" + \n                \"stroke-width: 1;\"\n            )\n\n        }\n        if(this.nodeExpression.key === this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n        return (\n            \"stroke: #c4bbbb; \" + \n            \"stroke-width: 2; \" + \n            \"stroke-dasharray: 4 2;\" + \n            \"fill: white; \"\n        )\n\n    },\n    upperStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    notStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important; \" +\n                     \"fill: red\" \n                    );\n        }\n    },\n    nameStyle(){\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"font-weight:bold; fill: black !important;\"\n        }\n        else return \"font-weight:bold; fill: white !important;\"\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-node {\n  height: 100%;\n  width: 100%;\n    .node-name { \n        fill: white; \n        font-size: 18px;\n    }\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n\n    // &.defined{\n    //     stroke: #000000;\n    //     stroke-width: 3;\n    //     stroke-dasharray: 0 0;\n    //     fill: white;\n    // }\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n\n"]}]}
{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/GraphPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/GraphPanel.vue","mtime":1664106011785},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\nimport Vis from \"vis\";\n\nexport default {\n  name: 'GraphPanel',\n  components: {\n  },\n  props: {\n    \n  },\n  data() {\n    return {\n\n    }\n  },\n  beforeMount(){\n    \n  },\n  mounted() {\n    this.drawNetwork()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    drawNetwork(){\n        var nodesJson = d3.json('treeDataset/CitationNetworkId.json')\n                        .then (function(data){\n                            return data\n        })\n        var edgesJson = d3.json('treeDataset/CitationNetwork.json')\n                        .then (function(data){\n                            return data\n        })\n        var nodes = new Vis.DataSet([\n            \n        ]);\n\n        // create an array with edges\n        var edges = new Vis.DataSet([\n        { from: 1, to: 3 },\n        { from: 1, to: 2 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 },\n        { from: 3, to: 3 },\n        ]);\n\n        // create a network\n        var container = document.getElementById('myNetwork');\n\n        // provide the data in the vis format\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n        var options = {\n            width: '100%',\n            height: '100%',\n\n        };\n\n        // initialize your network!\n        var network = new Vis.Network(container, data, options);\n        }\n\n  }\n\n}\n",{"version":3,"sources":["GraphPanel.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"GraphPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"graph-vis-view\">\n    <div id=\"myNetwork\" class=\"myChart\" width=\"100%\" height=\"100%\"></div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport Vis from \"vis\";\n\nexport default {\n  name: 'GraphPanel',\n  components: {\n  },\n  props: {\n    \n  },\n  data() {\n    return {\n\n    }\n  },\n  beforeMount(){\n    \n  },\n  mounted() {\n    this.drawNetwork()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    drawNetwork(){\n        var nodesJson = d3.json('treeDataset/CitationNetworkId.json')\n                        .then (function(data){\n                            return data\n        })\n        var edgesJson = d3.json('treeDataset/CitationNetwork.json')\n                        .then (function(data){\n                            return data\n        })\n        var nodes = new Vis.DataSet([\n            \n        ]);\n\n        // create an array with edges\n        var edges = new Vis.DataSet([\n        { from: 1, to: 3 },\n        { from: 1, to: 2 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 },\n        { from: 3, to: 3 },\n        ]);\n\n        // create a network\n        var container = document.getElementById('myNetwork');\n\n        // provide the data in the vis format\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n        var options = {\n            width: '100%',\n            height: '100%',\n\n        };\n\n        // initialize your network!\n        var network = new Vis.Network(container, data, options);\n        }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.graph-vis-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .myChart{\n        position: absolute;\n        top: 0%;\n        bottom: 0%;\n        left: 0%;\n        right: 0%;\n    }\n}\n\n</style>"]}]}
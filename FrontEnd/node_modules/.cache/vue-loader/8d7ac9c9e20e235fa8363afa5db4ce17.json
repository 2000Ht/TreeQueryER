{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/RECanvas.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/RECanvas.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REWholeTree from '@/views/REView/REComponents/REWholeTree.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n    import { getComponentKey } from '@/utils/componentkey.js'\n    import { simpleStringify } from '@/utils/stringify.js'\n\nexport default {\n  name: 'RECanvas',\n  components: {\n    RENode,\n    REPath,\n    REWholeTree,\n    REOr\n  },\n  props: {\n    regularExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n      curX: 40,\n      curY: 80,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      sympolList: [\n        {\n          type: null,\n          x: 0,\n          y:0,\n          height: 0,\n          width: 0\n        }\n      ],\n      dialogVisible: false,\n      repeatMin:'',\n      repeatMax:'',\n      updateKey: 0,\n      commitDialogVisible: false,\n      commitName:'',\n      commitDescription:'',\n      commitContent:'',\n      regexContent: '',\n    }\n  },\n  beforeMount() {\n    this.positionCompute()\n    this.contentCompute()\n  },\n  mounted() {\n    this.positionCompute()\n    this.contentCompute()\n    this.initCanvasParas()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      reTreeDataState: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      curRegexIndex: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      selectedRepeatDomState: function(){\n\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.repeatMin = this.selectedRepeatDom['branchRepeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['branchRepeat'][1] + ''\n      }\n      else{\n        this.repeatMin = this.selectedRepeatDom['repeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['repeat'][1] + ''\n      }\n      this.dialogVisible = true\n\n      },\n      selectedPartState: function(){\n        this.positionCompute()\n        this.contentCompute()\n      }\n  },\n  beforeMount(){\n    \n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'reTreeDataState',\n      'selectedRepeatDom',\n      'selectedRepeatDomState',\n      'lastDom',\n      'curRegex',\n      'regexCommitState',\n      'selectedDom',\n      'selectedPartState',\n      'curRegexIndex'\n    ]),\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_REGEX_COMMIT_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_LAST_DOM',\n      'ADD_REGEX_LIST',\n      'UPDATE_NODE_DEFINITION_STATE'\n    ]),\n    initCanvasParas(){\n      this.canvasWidth = this.$refs.canvas.clientWidth\n      this.canvasHeight = this.$refs.canvas.clientHeight\n    },\n    positionCompute(){ \n          if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        if((this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length)+ \n          (this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length)>0)\n            this.UPDATE_LAST_DOM(null)\n        else{\n          this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n        }\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }    \n      this.curX = 40\n      this.curY = 80\n      for(var i=0; i<this.regularExpression['target']['composition'].length; i++){\n        if(this.regularExpression['target']['composition'][i]['type']==\"node\"){\n          this.nodeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          this.regularExpression['target']['composition'][i]['key'] = getComponentKey()\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"path\"){\n          this.pathCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          for(let tmpNode of this.regularExpression['target']['composition'][i]['composition']){\n            tmpNode['parent'] = this.regularExpression['target']['composition'][i]\n          }\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"or\"){\n          this.orCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"wholeTree\"){\n          this.wholeTreeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n      }\n      console.log('this.regularExpression11', JSON.parse(simpleStringify(this.regularExpression)))\n      // console.log('force update')\n      // console.log('regularExpression', this.regularExpression)\n      this.$forceUpdate()\n    },\n    wholeTreeCompute(regWholeTree){\n      for(var i=0; i<regWholeTree['composition'].length; i++){\n        regWholeTree['composition'][i]['index'] = i\n        if(regWholeTree['composition'][i]['type'] == \"or\"){\n          this.orCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"branch\"){\n          this.branchCompute(regWholeTree['composition'][i])\n        }\n      }\n      if('elementComposition' in regWholeTree){\n        this.elementCompositionCompute(regWholeTree['elementComposition'])\n      }\n    },\n    branchCompute(regBranch){\n      var beginX = this.curX\n      var beginY = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      var maxX = 0\n\n      regBranch['x1Bracket'] = beginX+10\n      regBranch['y1Bracket'] = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      regBranch['x2Bracket'] = beginX+10\n      regBranch['y2Bracket'] = this.curY+15+(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      beginX = beginX + 20\n\n      if(regBranch['selected']){\n          regBranch['x1Selected'] = this.curX\n          regBranch['ySelected'] = this.curY + 40\n      }\n\n      for(var item of regBranch['composition']){\n        this.curX = beginX\n        this.curY = beginY\n        item['x1LeftBranchBracket'] = this.curX+5\n        item['y1LeftBranchBracket'] = this.curY\n        item['x2LeftBranchBracket'] = this.curX+5\n        item['y2LeftBranchBracket'] = this.curY+30\n        this.curX = this.curX + 15\n        if(item['selected']){\n          item['x1Selected'] = this.curX\n          item['ySelected'] = this.curY + 40\n        }\n        if(item['type'] == \"or\"){\n          item['branch'] = true\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          item['branch'] = true\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          item['branch'] = true\n          this.nodeCompute(item)\n        }\n        if(item['selected']){\n          item['x2Selected'] = this.curX - 15\n        }\n        item['x1RightBranchBracket'] = this.curX-5\n        item['y1RightBranchBracket'] = this.curY\n        item['x2RightBranchBracket'] = this.curX-5\n        item['y2RightBranchBracket'] = this.curY+30\n        this.curX = this.curX + 10\n        if('branchRepeat' in item){      \n          if(item['branchRepeat'][0] !=1 || item['branchRepeat'][1] !=1){\n            item['xBranchRepeat'] = this.curX\n            item['yBranchRepeat'] = this.curY\n            this.curX = this.curX + 20\n          }\n        }\n        if('branchUpper' in item && item['branchUpper']){\n          item['xBranchUpper'] = this.curX\n          item['yBranchUpper'] = this.curY\n          this.curX = this.curX + 15\n        }\n        this.curX = this.curX + 10\n\n        if(this.curX>maxX){\n          maxX = this.curX\n        }\n        beginY = beginY + 45\n      }\n      if(regBranch['selected']){\n        regBranch['x2Selected'] = maxX - 10\n      }\n      this.curX = maxX\n      this.curY = 80\n      regBranch.key = getComponentKey()\n    },\n    elementCompositionCompute(regElementComposition){\n      var tmpLength = regElementComposition['exist']['composition'].length + regElementComposition['all']['composition'].length\n      var beginX = this.curX\n      var beginY = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      var maxX = 0\n\n      regElementComposition['x1'] = beginX\n      regElementComposition['y1'] = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      regElementComposition['x2'] = beginX\n      regElementComposition['y2'] = this.curY+15+(tmpLength*30+(tmpLength-1)*15)/2\n      beginX = beginX + 15\n      \n      if(regElementComposition['exist']['composition'].length > 0){\n        for(var item of regElementComposition['exist']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xExist'] = this.curX\n          item['yExist'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      if(regElementComposition['all']['composition'].length > 0){\n        for(var item of regElementComposition['all']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xAll'] = this.curX\n          item['yAll'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      this.curX = maxX\n      this.curY = 80\n      regElementComposition.key = getComponentKey()\n    },\n    orCompute(regOr){\n      if('or' in regOr){\n        delete regOr['or']\n        delete regOr['xOr']\n        delete regOr['yOr']\n      }\n      regOr['x1LeftBracket'] = this.curX+7\n      regOr['y1LeftBracket'] = this.curY\n      regOr['x2LeftBracket'] = this.curX+7\n      regOr['y2LeftBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if(regOr['selected']){\n        regOr['x1Selected'] = this.curX\n        regOr['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i<regOr['composition'].length; i++){\n        regOr['composition'][i]['index'] = i\n        if(regOr['composition'][i]['type'] == \"or\"){\n          this.orCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"path\"){\n          regOr['composition'][i]['bracket'] = true\n          this.pathCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regOr['composition'][i])\n        }\n        if(i<regOr['composition'].length-1){\n          regOr['composition'][i]['or'] = true\n          regOr['composition'][i]['xOr'] = this.curX\n          regOr['composition'][i]['yOr'] = this.curY\n          this.curX = this.curX +  15\n        }\n      }\n      if(regOr['selected']){\n        regOr['x2Selected'] = this.curX - 15\n      }\n      regOr['x1RightBracket'] = this.curX-7\n      regOr['y1RightBracket'] = this.curY\n      regOr['x2RightBracket'] = this.curX-7\n      regOr['y2RightBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if('upper' in regOr && regOr['upper']){\n        regOr['xUpper'] = this.curX-10\n        regOr['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regOr){\n          if(regOr['repeat'][0] !=1 || regOr['repeat'][1] !=1){\n          regOr['xRepeat'] = this.curX-15\n          regOr['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regOr.key = getComponentKey()\n    },\n    pathCompute(regPath) {\n      if('or' in regPath){\n        delete regPath['or']\n        delete regPath['xOr']\n        delete regPath['yOr']\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1LeftBracket'] = this.curX+7\n          regPath['y1LeftBracket'] = this.curY\n          regPath['x2LeftBracket'] = this.curX+7\n          regPath['y2LeftBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if(regPath['selected']){\n        regPath['x1Selected'] = this.curX\n        regPath['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i < regPath['composition'].length; i++){\n        regPath['composition'][i]['index'] = i\n        if(regPath['composition'][i]['type'] == \"or\"){\n          this.orCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regPath['composition'][i])\n        }\n      }\n      if(regPath['selected']){\n        regPath['x2Selected'] = this.curX - 15\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1RightBracket'] = this.curX-7\n          regPath['y1RightBracket'] = this.curY\n          regPath['x2RightBracket'] = this.curX-7\n          regPath['y2RightBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if('upper' in regPath && regPath['upper']){\n        regPath['xUpper'] = this.curX-10\n        regPath['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regPath){\n        if(regPath['repeat'][0] != 1 || regPath['repeat'][1] != 1){\n          regPath['xRepeat'] = this.curX-15\n          regPath['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regPath.key = getComponentKey()\n    },\n    // nodesCompute(regNodes){\n    //   for(var Node of regNodes['nodes']){\n    //     this.nodeCompute(Node)\n    //   }\n    //   if(regNodes['repeat'][0]!=1 || regNodes['repeat'][1]!=1){\n    //     regNodes['x']=this.curX-35\n    //     regNodes['y']=this.curY-15\n    //     this.curX = this.curX + 10\n    //   }\n    // },\n    nodeCompute(regNode) {   \n      if('or' in regNode){\n        delete regNode['or']\n        delete regNode['xOr']\n        delete regNode['yOr']\n      }\n      if('notFlag' in regNode && regNode['notFlag']){\n        regNode['notX'] = this.curX\n        regNode['notY'] = this.curY\n        this.curX = this.curX + 10\n      }\n      regNode['x']=this.curX\n      regNode['y']=this.curY\n      if(regNode['selected']){\n        regNode['x1Selected'] = this.curX\n        regNode['x2Selected'] = this.curX + 30\n        regNode['ySelected'] = this.curY + 40\n      }\n      this.curX = this.curX + 45\n      if('upper' in regNode && regNode['upper']){\n        regNode['xUpper'] = this.curX-10\n        regNode['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regNode){\n        if(regNode['repeat'][0] !=1 || regNode['repeat'][1] !=1){\n          regNode['xRepeat'] = this.curX-10\n          regNode['yRepeat'] = this.curY\n          this.curX = this.curX + 20\n        }\n      }\n    },\n    computeTargetKey(d) {\n      return 'target' + d\n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE(this.regularExpression)\n      if('regexName' in this.regularExpression){\n        this.commitName = this.regularExpression['regexName']\n      }\n      if('regexDescription' in this.regularExpression){\n        this.commitDescription = this.regularExpression['regexDescription']\n      }\n      this.commitDialogVisible = true\n    },\n    updateRepeat(){\n      this.dialogVisible = false\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.selectedRepeatDom['branchRepeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['branchRepeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['branchRepeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['branchUpper'] = false\n      }\n      else{\n        this.selectedRepeatDom['repeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['repeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['repeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['upper'] = false\n      }\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    resetDom(){\n      if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        this.UPDATE_LAST_DOM(null)\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }\n      this.UPDATE_NODE_DEFINITION_STATE()\n      this.RESET_DOM_KEY_STATE()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    contentCompute(){\n      // this.commitDialogVisible = false\n      // this.regularExpression['regexName'] = this.commitName\n      // this.regularExpression['regexDescription'] = this.commitDescription\n      this.regexContent = ''\n      for(let item of this.regularExpression['target']['composition'][0]['composition']){\n        if(item['type'] == 'node'){\n          this.nodeContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'path'){\n          this.pathContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'or'){\n          this.orContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'branch'){\n          this.branchContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        let tmpLength = this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length \n            + this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length\n        let tmpIndex = 0\n        if(tmpLength>0){\n              this.regexContent = this.regexContent + ' || '\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition']){\n                this.regexContent = this.regexContent + '∃'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition']){\n                this.regexContent = this.regexContent + '∀'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n            } \n      }\n      this.regularExpression['regexContent'] = this.regexContent\n      console.log(\"regexContent\",this.regexContent)\n      // this.ADD_REGEX_LIST(this.regularExpression)\n    },\n    nodeContent(regexNode){\n      if('notFlag' in regexNode && regexNode['notFlag']){\n        this.regexContent = this.regexContent + '!'\n      }\n      this.regexContent = this.regexContent + 'N'\n      if(regexNode['repeat'][0] !=1 || regexNode['repeat'][1] != 1){\n        this.regexContent = this.regexContent + '('\n        this.regexContent = this.regexContent + regexNode['repeat'][0]\n        this.regexContent = this.regexContent + ','\n        this.regexContent = this.regexContent + regexNode['repeat'][1]\n        this.regexContent = this.regexContent + ')'\n      }\n    },\n    pathContent(regexPath){\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + '('\n      }\n      for(let i=0; i < regexPath['composition'].length; i++)\n      {\n        if(regexPath['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'path'){\n            this.pathContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'or'){\n            this.orContent(regexPath['composition'][i])\n        }\n        if(i<regexPath['composition'].length-1){\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + ')'\n      }\n      if('repeat' in regexPath){\n        if(regexPath['repeat'][0] != 1 || regexPath['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexPath['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexPath['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },  \n    orContent(regexOr){\n      this.regexContent = this.regexContent + '('\n      for(let i=0; i < regexOr['composition'].length; i++){\n        if(regexOr['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'path'){\n            this.pathContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'or'){\n            this.orContent(regexOr['composition'][i])\n        }\n        if(i<regexOr['composition'].length-1){\n          this.regexContent = this.regexContent + '|'\n        }\n      }\n      this.regexContent = this.regexContent + ')'\n      if('repeat' in regexOr){\n        if(regexOr['repeat'][0] != 1 || regexOr['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexOr['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexOr['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },\n    branchContent(regexBranch){\n      this.regexContent = this.regexContent + '['\n      for(let i=0; i < regexBranch['composition'].length; i++){\n        this.regexContent = this.regexContent + '<'\n        if(regexBranch['composition'][i]['type'] == \"or\"){\n          this.orContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"path\"){\n          this.pathContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"node\"){\n          this.nodeContent(regexBranch['composition'][i])\n        }\n        this.regexContent = this.regexContent + '>'\n        if('branchRepeat' in regexBranch['composition'][i]){      \n          if(regexBranch['composition'][i]['branchRepeat'][0] !=1 || regexBranch['composition'][i]['branchRepeat'][1] !=1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][1]\n          this.regexContent = this.regexContent + ')'\n          }\n        }\n        if(i<regexBranch['composition'].length-1){\n          this.regexContent = this.regexContent + ','\n        }\n      }\n      this.regexContent = this.regexContent + ']'\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {}\n          this.selectedDom['all'] = {}\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    }\n  \n  }\n\n}\n",{"version":3,"sources":["RECanvas.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"RECanvas.vue","sourceRoot":"src/views/REView","sourcesContent":["<template>\n<div class=\"re-canvas-div\">\n  <svg class=\"re-canvas\" ref=\"canvas\" :key=\"updateKey\">\n    <rect class=\"re-cover\" @click=\"resetDom\"></rect>\n    <g v-for=\"(item, index) in regularExpression['target']['composition']\" :key=\"computeTargetKey(index)\">\n      <g v-if=\"item['type']=='node'\">\n        <RENode :nodeExpression=\"item\" :key=\"item.key\"></RENode>\n      </g>\n      <g v-if=\"item['type']=='or'\">\n        <REOr :orExpression=\"item\" :key=\"item.key\"></REOr>\n      </g>\n      <g v-if=\"item['type']=='path'\">\n        <REPath :pathExpression=\"item\" :key=\"item.key\"></REPath>\n      </g>\n      <g v-if=\"item['type']=='wholeTree'\">\n        <REWholeTree :wholeTreeExpression=\"item\" :key=\"item.key\"></REWholeTree>\n      </g>\n    </g>\n  </svg>\n  \n  <el-dialog\n    title=\"Commit\"\n    :visible.sync=\"commitDialogVisible\"\n    width=\"20%\"\n   >\n    <el-row>\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: center\">name:</el-col>\n      <el-col :span=\"8\"><el-input v-model=\"commitName\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <el-row >\n      <el-col :span=\"8\" style=\"font-size: 20px\">description:</el-col>\n      <el-col :span=\"8\"><el-input v-model=\"commitDescription\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <span slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"commitDialogVisible = false\">取 消</el-button>\n      <el-button type=\"primary\" @click=\"updateRegexList()\">确 定</el-button>\n    </span>\n  </el-dialog>\n\n  <el-dialog\n    title=\"Repeat\"\n    :visible.sync=\"dialogVisible\"\n    width=\"20%\"\n   >\n    <el-row>\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: right; line-height: 20px; margin-top: 2px\">start:</el-col>\n      <el-col :span=\"10\" :offset=\"1\"><el-input v-model=\"repeatMin\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <el-row >\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: right;line-height: 20px; margin-top: 2px\">end:</el-col>\n      <el-col :span=\"10\" :offset=\"1\"><el-input v-model=\"repeatMax\" placeholder=\"\" ></el-input></el-col>\n    </el-row>\n    <span slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"dialogVisible=false\" style=\"padding:5px 5px 5px 5px\">cancel</el-button>\n      <el-button @click=\"updateRepeat()\" style=\"padding:5px 5px 5px 5px\">submit</el-button>\n    </span>\n  </el-dialog>\n\n</div>\n  \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REWholeTree from '@/views/REView/REComponents/REWholeTree.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n    import { getComponentKey } from '@/utils/componentkey.js'\n    import { simpleStringify } from '@/utils/stringify.js'\n\nexport default {\n  name: 'RECanvas',\n  components: {\n    RENode,\n    REPath,\n    REWholeTree,\n    REOr\n  },\n  props: {\n    regularExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n      curX: 40,\n      curY: 80,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      sympolList: [\n        {\n          type: null,\n          x: 0,\n          y:0,\n          height: 0,\n          width: 0\n        }\n      ],\n      dialogVisible: false,\n      repeatMin:'',\n      repeatMax:'',\n      updateKey: 0,\n      commitDialogVisible: false,\n      commitName:'',\n      commitDescription:'',\n      commitContent:'',\n      regexContent: '',\n    }\n  },\n  beforeMount() {\n    this.positionCompute()\n    this.contentCompute()\n  },\n  mounted() {\n    this.positionCompute()\n    this.contentCompute()\n    this.initCanvasParas()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      reTreeDataState: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      curRegexIndex: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      selectedRepeatDomState: function(){\n\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.repeatMin = this.selectedRepeatDom['branchRepeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['branchRepeat'][1] + ''\n      }\n      else{\n        this.repeatMin = this.selectedRepeatDom['repeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['repeat'][1] + ''\n      }\n      this.dialogVisible = true\n\n      },\n      selectedPartState: function(){\n        this.positionCompute()\n        this.contentCompute()\n      }\n  },\n  beforeMount(){\n    \n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'reTreeDataState',\n      'selectedRepeatDom',\n      'selectedRepeatDomState',\n      'lastDom',\n      'curRegex',\n      'regexCommitState',\n      'selectedDom',\n      'selectedPartState',\n      'curRegexIndex'\n    ]),\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_REGEX_COMMIT_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_LAST_DOM',\n      'ADD_REGEX_LIST',\n      'UPDATE_NODE_DEFINITION_STATE'\n    ]),\n    initCanvasParas(){\n      this.canvasWidth = this.$refs.canvas.clientWidth\n      this.canvasHeight = this.$refs.canvas.clientHeight\n    },\n    positionCompute(){ \n          if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        if((this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length)+ \n          (this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length)>0)\n            this.UPDATE_LAST_DOM(null)\n        else{\n          this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n        }\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }    \n      this.curX = 40\n      this.curY = 80\n      for(var i=0; i<this.regularExpression['target']['composition'].length; i++){\n        if(this.regularExpression['target']['composition'][i]['type']==\"node\"){\n          this.nodeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          this.regularExpression['target']['composition'][i]['key'] = getComponentKey()\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"path\"){\n          this.pathCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          for(let tmpNode of this.regularExpression['target']['composition'][i]['composition']){\n            tmpNode['parent'] = this.regularExpression['target']['composition'][i]\n          }\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"or\"){\n          this.orCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"wholeTree\"){\n          this.wholeTreeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n      }\n      console.log('this.regularExpression11', JSON.parse(simpleStringify(this.regularExpression)))\n      // console.log('force update')\n      // console.log('regularExpression', this.regularExpression)\n      this.$forceUpdate()\n    },\n    wholeTreeCompute(regWholeTree){\n      for(var i=0; i<regWholeTree['composition'].length; i++){\n        regWholeTree['composition'][i]['index'] = i\n        if(regWholeTree['composition'][i]['type'] == \"or\"){\n          this.orCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"branch\"){\n          this.branchCompute(regWholeTree['composition'][i])\n        }\n      }\n      if('elementComposition' in regWholeTree){\n        this.elementCompositionCompute(regWholeTree['elementComposition'])\n      }\n    },\n    branchCompute(regBranch){\n      var beginX = this.curX\n      var beginY = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      var maxX = 0\n\n      regBranch['x1Bracket'] = beginX+10\n      regBranch['y1Bracket'] = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      regBranch['x2Bracket'] = beginX+10\n      regBranch['y2Bracket'] = this.curY+15+(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      beginX = beginX + 20\n\n      if(regBranch['selected']){\n          regBranch['x1Selected'] = this.curX\n          regBranch['ySelected'] = this.curY + 40\n      }\n\n      for(var item of regBranch['composition']){\n        this.curX = beginX\n        this.curY = beginY\n        item['x1LeftBranchBracket'] = this.curX+5\n        item['y1LeftBranchBracket'] = this.curY\n        item['x2LeftBranchBracket'] = this.curX+5\n        item['y2LeftBranchBracket'] = this.curY+30\n        this.curX = this.curX + 15\n        if(item['selected']){\n          item['x1Selected'] = this.curX\n          item['ySelected'] = this.curY + 40\n        }\n        if(item['type'] == \"or\"){\n          item['branch'] = true\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          item['branch'] = true\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          item['branch'] = true\n          this.nodeCompute(item)\n        }\n        if(item['selected']){\n          item['x2Selected'] = this.curX - 15\n        }\n        item['x1RightBranchBracket'] = this.curX-5\n        item['y1RightBranchBracket'] = this.curY\n        item['x2RightBranchBracket'] = this.curX-5\n        item['y2RightBranchBracket'] = this.curY+30\n        this.curX = this.curX + 10\n        if('branchRepeat' in item){      \n          if(item['branchRepeat'][0] !=1 || item['branchRepeat'][1] !=1){\n            item['xBranchRepeat'] = this.curX\n            item['yBranchRepeat'] = this.curY\n            this.curX = this.curX + 20\n          }\n        }\n        if('branchUpper' in item && item['branchUpper']){\n          item['xBranchUpper'] = this.curX\n          item['yBranchUpper'] = this.curY\n          this.curX = this.curX + 15\n        }\n        this.curX = this.curX + 10\n\n        if(this.curX>maxX){\n          maxX = this.curX\n        }\n        beginY = beginY + 45\n      }\n      if(regBranch['selected']){\n        regBranch['x2Selected'] = maxX - 10\n      }\n      this.curX = maxX\n      this.curY = 80\n      regBranch.key = getComponentKey()\n    },\n    elementCompositionCompute(regElementComposition){\n      var tmpLength = regElementComposition['exist']['composition'].length + regElementComposition['all']['composition'].length\n      var beginX = this.curX\n      var beginY = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      var maxX = 0\n\n      regElementComposition['x1'] = beginX\n      regElementComposition['y1'] = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      regElementComposition['x2'] = beginX\n      regElementComposition['y2'] = this.curY+15+(tmpLength*30+(tmpLength-1)*15)/2\n      beginX = beginX + 15\n      \n      if(regElementComposition['exist']['composition'].length > 0){\n        for(var item of regElementComposition['exist']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xExist'] = this.curX\n          item['yExist'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      if(regElementComposition['all']['composition'].length > 0){\n        for(var item of regElementComposition['all']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xAll'] = this.curX\n          item['yAll'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      this.curX = maxX\n      this.curY = 80\n      regElementComposition.key = getComponentKey()\n    },\n    orCompute(regOr){\n      if('or' in regOr){\n        delete regOr['or']\n        delete regOr['xOr']\n        delete regOr['yOr']\n      }\n      regOr['x1LeftBracket'] = this.curX+7\n      regOr['y1LeftBracket'] = this.curY\n      regOr['x2LeftBracket'] = this.curX+7\n      regOr['y2LeftBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if(regOr['selected']){\n        regOr['x1Selected'] = this.curX\n        regOr['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i<regOr['composition'].length; i++){\n        regOr['composition'][i]['index'] = i\n        if(regOr['composition'][i]['type'] == \"or\"){\n          this.orCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"path\"){\n          regOr['composition'][i]['bracket'] = true\n          this.pathCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regOr['composition'][i])\n        }\n        if(i<regOr['composition'].length-1){\n          regOr['composition'][i]['or'] = true\n          regOr['composition'][i]['xOr'] = this.curX\n          regOr['composition'][i]['yOr'] = this.curY\n          this.curX = this.curX +  15\n        }\n      }\n      if(regOr['selected']){\n        regOr['x2Selected'] = this.curX - 15\n      }\n      regOr['x1RightBracket'] = this.curX-7\n      regOr['y1RightBracket'] = this.curY\n      regOr['x2RightBracket'] = this.curX-7\n      regOr['y2RightBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if('upper' in regOr && regOr['upper']){\n        regOr['xUpper'] = this.curX-10\n        regOr['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regOr){\n          if(regOr['repeat'][0] !=1 || regOr['repeat'][1] !=1){\n          regOr['xRepeat'] = this.curX-15\n          regOr['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regOr.key = getComponentKey()\n    },\n    pathCompute(regPath) {\n      if('or' in regPath){\n        delete regPath['or']\n        delete regPath['xOr']\n        delete regPath['yOr']\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1LeftBracket'] = this.curX+7\n          regPath['y1LeftBracket'] = this.curY\n          regPath['x2LeftBracket'] = this.curX+7\n          regPath['y2LeftBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if(regPath['selected']){\n        regPath['x1Selected'] = this.curX\n        regPath['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i < regPath['composition'].length; i++){\n        regPath['composition'][i]['index'] = i\n        if(regPath['composition'][i]['type'] == \"or\"){\n          this.orCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regPath['composition'][i])\n        }\n      }\n      if(regPath['selected']){\n        regPath['x2Selected'] = this.curX - 15\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1RightBracket'] = this.curX-7\n          regPath['y1RightBracket'] = this.curY\n          regPath['x2RightBracket'] = this.curX-7\n          regPath['y2RightBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if('upper' in regPath && regPath['upper']){\n        regPath['xUpper'] = this.curX-10\n        regPath['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regPath){\n        if(regPath['repeat'][0] != 1 || regPath['repeat'][1] != 1){\n          regPath['xRepeat'] = this.curX-15\n          regPath['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regPath.key = getComponentKey()\n    },\n    // nodesCompute(regNodes){\n    //   for(var Node of regNodes['nodes']){\n    //     this.nodeCompute(Node)\n    //   }\n    //   if(regNodes['repeat'][0]!=1 || regNodes['repeat'][1]!=1){\n    //     regNodes['x']=this.curX-35\n    //     regNodes['y']=this.curY-15\n    //     this.curX = this.curX + 10\n    //   }\n    // },\n    nodeCompute(regNode) {   \n      if('or' in regNode){\n        delete regNode['or']\n        delete regNode['xOr']\n        delete regNode['yOr']\n      }\n      if('notFlag' in regNode && regNode['notFlag']){\n        regNode['notX'] = this.curX\n        regNode['notY'] = this.curY\n        this.curX = this.curX + 10\n      }\n      regNode['x']=this.curX\n      regNode['y']=this.curY\n      if(regNode['selected']){\n        regNode['x1Selected'] = this.curX\n        regNode['x2Selected'] = this.curX + 30\n        regNode['ySelected'] = this.curY + 40\n      }\n      this.curX = this.curX + 45\n      if('upper' in regNode && regNode['upper']){\n        regNode['xUpper'] = this.curX-10\n        regNode['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regNode){\n        if(regNode['repeat'][0] !=1 || regNode['repeat'][1] !=1){\n          regNode['xRepeat'] = this.curX-10\n          regNode['yRepeat'] = this.curY\n          this.curX = this.curX + 20\n        }\n      }\n    },\n    computeTargetKey(d) {\n      return 'target' + d\n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE(this.regularExpression)\n      if('regexName' in this.regularExpression){\n        this.commitName = this.regularExpression['regexName']\n      }\n      if('regexDescription' in this.regularExpression){\n        this.commitDescription = this.regularExpression['regexDescription']\n      }\n      this.commitDialogVisible = true\n    },\n    updateRepeat(){\n      this.dialogVisible = false\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.selectedRepeatDom['branchRepeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['branchRepeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['branchRepeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['branchUpper'] = false\n      }\n      else{\n        this.selectedRepeatDom['repeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['repeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['repeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['upper'] = false\n      }\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    resetDom(){\n      if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        this.UPDATE_LAST_DOM(null)\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }\n      this.UPDATE_NODE_DEFINITION_STATE()\n      this.RESET_DOM_KEY_STATE()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    contentCompute(){\n      // this.commitDialogVisible = false\n      // this.regularExpression['regexName'] = this.commitName\n      // this.regularExpression['regexDescription'] = this.commitDescription\n      this.regexContent = ''\n      for(let item of this.regularExpression['target']['composition'][0]['composition']){\n        if(item['type'] == 'node'){\n          this.nodeContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'path'){\n          this.pathContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'or'){\n          this.orContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'branch'){\n          this.branchContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        let tmpLength = this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length \n            + this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length\n        let tmpIndex = 0\n        if(tmpLength>0){\n              this.regexContent = this.regexContent + ' || '\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition']){\n                this.regexContent = this.regexContent + '∃'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition']){\n                this.regexContent = this.regexContent + '∀'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n            } \n      }\n      this.regularExpression['regexContent'] = this.regexContent\n      console.log(\"regexContent\",this.regexContent)\n      // this.ADD_REGEX_LIST(this.regularExpression)\n    },\n    nodeContent(regexNode){\n      if('notFlag' in regexNode && regexNode['notFlag']){\n        this.regexContent = this.regexContent + '!'\n      }\n      this.regexContent = this.regexContent + 'N'\n      if(regexNode['repeat'][0] !=1 || regexNode['repeat'][1] != 1){\n        this.regexContent = this.regexContent + '('\n        this.regexContent = this.regexContent + regexNode['repeat'][0]\n        this.regexContent = this.regexContent + ','\n        this.regexContent = this.regexContent + regexNode['repeat'][1]\n        this.regexContent = this.regexContent + ')'\n      }\n    },\n    pathContent(regexPath){\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + '('\n      }\n      for(let i=0; i < regexPath['composition'].length; i++)\n      {\n        if(regexPath['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'path'){\n            this.pathContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'or'){\n            this.orContent(regexPath['composition'][i])\n        }\n        if(i<regexPath['composition'].length-1){\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + ')'\n      }\n      if('repeat' in regexPath){\n        if(regexPath['repeat'][0] != 1 || regexPath['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexPath['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexPath['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },  \n    orContent(regexOr){\n      this.regexContent = this.regexContent + '('\n      for(let i=0; i < regexOr['composition'].length; i++){\n        if(regexOr['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'path'){\n            this.pathContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'or'){\n            this.orContent(regexOr['composition'][i])\n        }\n        if(i<regexOr['composition'].length-1){\n          this.regexContent = this.regexContent + '|'\n        }\n      }\n      this.regexContent = this.regexContent + ')'\n      if('repeat' in regexOr){\n        if(regexOr['repeat'][0] != 1 || regexOr['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexOr['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexOr['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },\n    branchContent(regexBranch){\n      this.regexContent = this.regexContent + '['\n      for(let i=0; i < regexBranch['composition'].length; i++){\n        this.regexContent = this.regexContent + '<'\n        if(regexBranch['composition'][i]['type'] == \"or\"){\n          this.orContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"path\"){\n          this.pathContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"node\"){\n          this.nodeContent(regexBranch['composition'][i])\n        }\n        this.regexContent = this.regexContent + '>'\n        if('branchRepeat' in regexBranch['composition'][i]){      \n          if(regexBranch['composition'][i]['branchRepeat'][0] !=1 || regexBranch['composition'][i]['branchRepeat'][1] !=1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][1]\n          this.regexContent = this.regexContent + ')'\n          }\n        }\n        if(i<regexBranch['composition'].length-1){\n          this.regexContent = this.regexContent + ','\n        }\n      }\n      this.regexContent = this.regexContent + ']'\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {}\n          this.selectedDom['all'] = {}\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    }\n  \n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-canvas-div{\n  height: 100%;\n  width: 100%;\n  overflow-x: scroll;\n  overflow-y: scroll;\n  .re-canvas {\n    height: 100%;\n    width: 100%;\n  .re-cover{\n      height: 100%;\n      width: 100%;\n      opacity: 0;\n  }\n}\n}\n.commit-button{\n    border: 1px #ddd bold;\n    font-size: 16px;\n    text-align: center !important;\n    margin-top: 5px;\n    height: 28px !important;\n    line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    position: absolute;\n    bottom: 6% !important;\n    right: 2% !important;\n\n}\n.delete-button{\n    border: 1px #ddd bold;\n    font-size: 16px;\n    text-align: center !important;\n    margin-top: 5px;\n    height: 28px !important;\n    line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    position: absolute;\n    bottom: 6% !important;\n    right: 150px !important;\n\n}\n</style>\n<style scoped lang=\"less\">\n  .el-row {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n  .el-col {\n    border-radius: 4px;\n  }\n  .bg-purple-dark {\n    background: #99a9bf;\n  }\n  .bg-purple {\n    background: #d3dce6;\n  }\n  .bg-purple-light {\n    background: #e5e9f2;\n  }\n  .grid-content {\n    border-radius: 4px;\n    min-height: 36px;\n  }\n  .row-bg {\n    padding: 10px 0;\n    background-color: #f9fafc;\n  }\n  /deep/.el-input__inner {\n        line-height: 26px !important;\n        height: 26px !important;\n  }\n</style>\n"]}]}
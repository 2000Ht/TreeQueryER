{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/SunBurst.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/SunBurst.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nexport default {\n  name: 'SunBurst',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsonDataIn: Object,\n    jsonDataOut: Array,\n  },\n  watch: {\n      width: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataIn: function(){\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataOut: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n      brushed_data: null,\n    }\n  },\n  mounted() {\n    this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n  },\n  methods:{\n    draw_sunburst: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      d3.select('#sunburst').selectAll('*').remove();\n\n      let data = jsondata\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n          let padding_r = (min_width_height *(1+min_width_height/this.scale)) / this.scale;\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, trbl: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          let radius = Math.min(innerWidth, innerHeight)/2;\n          let fillOpacity = 0.9;\n\n          let root = d3.partition().size([2*Math.PI, radius]) (\n            d3.hierarchy(data)\n              .eachBefore(d=>{\n                d.data.data.depth = d.depth; \n                d.data.data.height = d.height;\n                d.data.data.degree = d.children ? d.children.length : 0\n              })\n              //.sum(d=>d.value)暂时按照是否有孩子加1的值当作value\n              .sum( d=> d.children ? 1 : 2 )\n          );\n          let RootDes = root.descendants()\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)\n          let linear = d3.scaleLinear().domain([0, root.height]).range([0, 1])\n          let color = d3.interpolate(DimGray, LightGray)\n\n          const arc = d3.arc()\n            .startAngle(d=>d.x0)\n            .endAngle(d=>d.x1)\n            .padAngle(d=>Math.min((d.x1 - d.x0)/2, 2 * padding_r / radius))\n            .padRadius(radius / 2)\n            .innerRadius(d=>d.y0)\n            .outerRadius(d=>d.y1 - padding_r);\n\n          const svg = d3.select(this.$el)\n            .select('#sunburst')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${width/2}, ${height/2})`);\n\n          g.append('style').text(`\n            .highlight-sub-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let cell = g\n            .selectAll('a')\n            .data(RootDes)\n            .join('a');\n\n          cell.append('path')\n            .attr('class', d=>d.data.name+\"sub\")\n            .attr('d', arc)\n            .attr('fill-opacity', fillOpacity)\n            .attr('fill',d=>color(linear(d.depth)));\n          \n          // brush\n          g.call(brush, cell);\n\n          //高亮jsonDataOut\n          processJsonDataOut = processJsonDataOut(this.jsonDataOut)\n          processJsonDataOut.forEach(ele=>{\n            d3.select(\".\" + ele + \"sub\").classed(\"highlight-sub-active\", true);\n          })\n          \n          processJsonDataOutToAttr = processJsonDataOutToAttr(this.jsonDataOut)\n          this.brushed_data = processJsonDataOutToAttr\n          bus.$emit('brushed_data', this.brushed_data)\n\n\n          function mouseovered(active){\n            return function(d, i){\n              d3.select(this).classed(\"highlight-sub-active\", active);\n              for(let j=0; j< Object.values(d.ancestors().map(d=>\".\"+d.data.name)).length; j++){\n                d3.select(Object.values(d.ancestors().map(d=>\".\"+d.data.name+\"sub\"))[j]).classed(\"highlight-sub-active\", active);\n              }\n            }\n          }\n          //jsonDataOut的数据格式为列表,每个元素是一个字典,每个字典代表一棵树或者一个节点\n          //统计所有节点的name并作处理,生成需要高亮的节点列表\n          function processJsonDataOut(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              tmpJsonDataOut.forEach(ele => {\n                let tmpele = JSON.parse(JSON.stringify(ele))\n                need_hightlight_node = need_hightlight_node.concat(d3.hierarchy(tmpele).descendants().map(d=>d.data.name))\n              })\n            }\n            return need_hightlight_node\n          }\n          //显示输出节点的属性\n          function processJsonDataOutToAttr(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              let need_hightlight_node_name = processJsonDataOut\n              console.log(need_hightlight_node_name)\n              console.log(root)\n              need_hightlight_node = RootDes.filter(d=>need_hightlight_node_name.includes(d.data.name)).map(d=>d.data)\n              console.log(need_hightlight_node)\n              return need_hightlight_node\n            }\n            return need_hightlight_node\n          }\n\n          function brush(cell) {\n            const brush = d3.brush()\n              .extent([[-width/2, -height/2], [width/2, height/2]])\n              .on(\"start\", brushstarted)\n              .on(\"brush\", brushed)\n              .on(\"end\", brushended);\n            cell.call(brush);\n            let brushCell;\n            let selected = []\n            // Clear the previously-active brush, if any.\n            function brushstarted() {\n              if (brushCell !== this) {\n                d3.select(brushCell).call(brush.move, null);\n                brushCell = this;\n              }\n            }\n            // Highlight the selected circles.\n            function brushed() {\n              if (d3.event.selection == null) return;\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n              }\n              this.brushed_data = null;\n              const [[x0, y0], [x1, y1]] = d3.event.selection;\n              selected = RootDes.filter(\n                d => x0 <= d.x0\n                  && x1 >= d.x1\n                  && y0 <= d.y0\n                  && y1 >= d.y1);\n\n              //变暗jsonDataOut\n              processJsonDataOut.forEach(ele=>{\n                d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", false);\n              })\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", true);\n              }\n            }\n            // If the brush is empty, select all circles.\n            function brushended() {\n              if (d3.event.selection != null){\n                this.brushed_data = selected.map(d=>d.data)\n                bus.$emit('brushed_data', this.brushed_data)\n                return;\n              }\n              else{\n                for(let item of selected) {\n                  d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n                }\n                this.brushed_data = null\n                bus.$emit('brushed_data', this.brushed_data)\n\n                //高亮jsonDataOut\n                processJsonDataOut.forEach(ele=>{\n                  d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", true);\n                })\n                this.brushed_data = processJsonDataOutToAttr\n                bus.$emit('brushed_data', this.brushed_data)\n\n                return;\n              }\n              \n            }\n          }\n\n      // });\n\n    }\n  }\n}\n",{"version":3,"sources":["SunBurst.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA","file":"SunBurst.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"sunburst\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nexport default {\n  name: 'SunBurst',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsonDataIn: Object,\n    jsonDataOut: Array,\n  },\n  watch: {\n      width: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataIn: function(){\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataOut: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n      brushed_data: null,\n    }\n  },\n  mounted() {\n    this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n  },\n  methods:{\n    draw_sunburst: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      d3.select('#sunburst').selectAll('*').remove();\n\n      let data = jsondata\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n          let padding_r = (min_width_height *(1+min_width_height/this.scale)) / this.scale;\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, trbl: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          let radius = Math.min(innerWidth, innerHeight)/2;\n          let fillOpacity = 0.9;\n\n          let root = d3.partition().size([2*Math.PI, radius]) (\n            d3.hierarchy(data)\n              .eachBefore(d=>{\n                d.data.data.depth = d.depth; \n                d.data.data.height = d.height;\n                d.data.data.degree = d.children ? d.children.length : 0\n              })\n              //.sum(d=>d.value)暂时按照是否有孩子加1的值当作value\n              .sum( d=> d.children ? 1 : 2 )\n          );\n          let RootDes = root.descendants()\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)\n          let linear = d3.scaleLinear().domain([0, root.height]).range([0, 1])\n          let color = d3.interpolate(DimGray, LightGray)\n\n          const arc = d3.arc()\n            .startAngle(d=>d.x0)\n            .endAngle(d=>d.x1)\n            .padAngle(d=>Math.min((d.x1 - d.x0)/2, 2 * padding_r / radius))\n            .padRadius(radius / 2)\n            .innerRadius(d=>d.y0)\n            .outerRadius(d=>d.y1 - padding_r);\n\n          const svg = d3.select(this.$el)\n            .select('#sunburst')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${width/2}, ${height/2})`);\n\n          g.append('style').text(`\n            .highlight-sub-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let cell = g\n            .selectAll('a')\n            .data(RootDes)\n            .join('a');\n\n          cell.append('path')\n            .attr('class', d=>d.data.name+\"sub\")\n            .attr('d', arc)\n            .attr('fill-opacity', fillOpacity)\n            .attr('fill',d=>color(linear(d.depth)));\n          \n          // brush\n          g.call(brush, cell);\n\n          //高亮jsonDataOut\n          processJsonDataOut = processJsonDataOut(this.jsonDataOut)\n          processJsonDataOut.forEach(ele=>{\n            d3.select(\".\" + ele + \"sub\").classed(\"highlight-sub-active\", true);\n          })\n          \n          processJsonDataOutToAttr = processJsonDataOutToAttr(this.jsonDataOut)\n          this.brushed_data = processJsonDataOutToAttr\n          bus.$emit('brushed_data', this.brushed_data)\n\n\n          function mouseovered(active){\n            return function(d, i){\n              d3.select(this).classed(\"highlight-sub-active\", active);\n              for(let j=0; j< Object.values(d.ancestors().map(d=>\".\"+d.data.name)).length; j++){\n                d3.select(Object.values(d.ancestors().map(d=>\".\"+d.data.name+\"sub\"))[j]).classed(\"highlight-sub-active\", active);\n              }\n            }\n          }\n          //jsonDataOut的数据格式为列表,每个元素是一个字典,每个字典代表一棵树或者一个节点\n          //统计所有节点的name并作处理,生成需要高亮的节点列表\n          function processJsonDataOut(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              tmpJsonDataOut.forEach(ele => {\n                let tmpele = JSON.parse(JSON.stringify(ele))\n                need_hightlight_node = need_hightlight_node.concat(d3.hierarchy(tmpele).descendants().map(d=>d.data.name))\n              })\n            }\n            return need_hightlight_node\n          }\n          //显示输出节点的属性\n          function processJsonDataOutToAttr(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              let need_hightlight_node_name = processJsonDataOut\n              console.log(need_hightlight_node_name)\n              console.log(root)\n              need_hightlight_node = RootDes.filter(d=>need_hightlight_node_name.includes(d.data.name)).map(d=>d.data)\n              console.log(need_hightlight_node)\n              return need_hightlight_node\n            }\n            return need_hightlight_node\n          }\n\n          function brush(cell) {\n            const brush = d3.brush()\n              .extent([[-width/2, -height/2], [width/2, height/2]])\n              .on(\"start\", brushstarted)\n              .on(\"brush\", brushed)\n              .on(\"end\", brushended);\n            cell.call(brush);\n            let brushCell;\n            let selected = []\n            // Clear the previously-active brush, if any.\n            function brushstarted() {\n              if (brushCell !== this) {\n                d3.select(brushCell).call(brush.move, null);\n                brushCell = this;\n              }\n            }\n            // Highlight the selected circles.\n            function brushed() {\n              if (d3.event.selection == null) return;\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n              }\n              this.brushed_data = null;\n              const [[x0, y0], [x1, y1]] = d3.event.selection;\n              selected = RootDes.filter(\n                d => x0 <= d.x0\n                  && x1 >= d.x1\n                  && y0 <= d.y0\n                  && y1 >= d.y1);\n\n              //变暗jsonDataOut\n              processJsonDataOut.forEach(ele=>{\n                d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", false);\n              })\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", true);\n              }\n            }\n            // If the brush is empty, select all circles.\n            function brushended() {\n              if (d3.event.selection != null){\n                this.brushed_data = selected.map(d=>d.data)\n                bus.$emit('brushed_data', this.brushed_data)\n                return;\n              }\n              else{\n                for(let item of selected) {\n                  d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n                }\n                this.brushed_data = null\n                bus.$emit('brushed_data', this.brushed_data)\n\n                //高亮jsonDataOut\n                processJsonDataOut.forEach(ele=>{\n                  d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", true);\n                })\n                this.brushed_data = processJsonDataOutToAttr\n                bus.$emit('brushed_data', this.brushed_data)\n\n                return;\n              }\n              \n            }\n          }\n\n      // });\n\n    }\n  }\n}\n</script>"]}]}
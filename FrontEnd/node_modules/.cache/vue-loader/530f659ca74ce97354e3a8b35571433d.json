{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REElementComposition.vue?vue&type=style&index=0&id=7e1bc68a&scoped=true&lang=less&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REElementComposition.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/css-loader/index.js","mtime":1660192274937},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660192275629},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/postcss-loader/src/index.js","mtime":1660192275315},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/less-loader/dist/cjs.js","mtime":1660192275256},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.re-elementComposition {\n  height: 100%;\n  width: 100%;\n  .bracket{\n        &.highlighted {\n        stroke: red;\n    }\n  }\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n            &.highlighted {\n        stroke: red;\n    }\n}\n",{"version":3,"sources":["REElementComposition.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"REElementComposition.vue","sourceRoot":"src/views/REView/REComponents","sourcesContent":["<template>\n    <g class=\"re-elementComposition\" >\n          <path v-if=\"elementCompositionCheck()\" :d=\"bracketCompute1\" @click=\"updateSelectedElementComposition()\"  :class=\"{'highlighted': getNodeHighlightState }\"/>\n          <path v-if=\"elementCompositionCheck()\" :d=\"bracketCompute2\" @click=\"updateSelectedElementComposition()\"  :class=\"{'highlighted': getNodeHighlightState }\"/>\n          <rect v-if=\"elementCompositionCheck()\" :transform=\"bracketRectTransform\" @click=\"updateSelectedElementComposition()\" class=\"rect-cover\" width=\"10\" :height=\"heightCompute\" opacity=\"0\"/>\n        <g v-for=\"(item1, index1) of elementCompositionExpression['exist']['composition']\" :key=\"computeExistKey(index1)\">\n            <text :transform=\"commonTransform1(item1['xExist'], item1['yExist'])\" @click=\"updateSelectedExist(item1)\" :style=\"selectedStyle(item1)\" style=\"alignment-baseline: hanging; font-size: 30px\">∃</text>\n            <RENode v-if=\"item1['type'] == 'node'\" :nodeExpression=\"item1\"></RENode>\n            <REPath v-if=\"item1['type'] == 'path'\" :pathExpression=\"item1\"></REPath>\n            <REOr v-if=\"item1['type'] == 'or'\" :orExpression=\"item1\"></REOr>\n        </g>\n        <g v-for=\"(item1, index1) of elementCompositionExpression['all']['composition']\" :key=\"computeAllKey(index1)\">\n            <text :transform=\"commonTransform2(item1['xAll'], item1['yAll'])\" @click=\"updateSelectedAll(item1)\" :style=\"selectedStyle(item1)\" style=\"alignment-baseline: hanging; font-size: 28px\">∀</text>\n            <RENode v-if=\"item1['type'] == 'node'\" :nodeExpression=\"item1\"></RENode>\n            <REPath v-if=\"item1['type'] == 'path'\" :pathExpression=\"item1\"></REPath>\n            <REOr v-if=\"item1['type'] == 'or'\" :orExpression=\"item1\"></REOr>\n        </g>\n    </g>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n\nexport default {\n  name: 'REElementComposition',\n  components: {\n    RENode,\n    REPath,\n    REOr\n  },\n  props: {\n    elementCompositionExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n\n    }\n  },\n  beforeMount(){\n  },\n  mounted() {\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey'\n    ]),\n    getNodeHighlightState () {\n        return this.elementCompositionExpression.key === this.selectedDomKey\n    },\n    elementCompositionTransform(){\n        return `translate(${this.elementCompositionExpression['x']}, ${this.elementCompositionExpression['y']})`\n    },\n    bracketCompute1(){\n        var x1 = this.elementCompositionExpression['x1']\n        var y1 = this.elementCompositionExpression['y1']\n        var x2 = this.elementCompositionExpression['x2']\n        var y2 = this.elementCompositionExpression['y2']\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t \" V \" + y2);\n    },\n    bracketCompute2(){\n        var x1 = this.elementCompositionExpression['x1'] + 8\n        var y1 = this.elementCompositionExpression['y1']\n        var x2 = this.elementCompositionExpression['x2']\n        var y2 = this.elementCompositionExpression['y2']\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t \" V \" + y2);\n    },\n    bracketRectTransform(){\n        var x1 = this.elementCompositionExpression['x1']\n        var y1 = this.elementCompositionExpression['y1']\n        var x2 = this.elementCompositionExpression['x2']\n        var y2 = this.elementCompositionExpression['y2']\n        \n        return `translate(${x1}, ${y1})`\n    },\n    heightCompute(){\n        var x1 = this.elementCompositionExpression['x1']\n        var y1 = this.elementCompositionExpression['y1']\n        var x2 = this.elementCompositionExpression['x2']\n        var y2 = this.elementCompositionExpression['y2']\n\n        return y2-y1\n    }\n\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n    ]),\n    computeExistKey(d){\n        return 'exist' + d\n    },\n    computeAllKey(d){\n        return 'all' + d\n    },\n    computeExistItemKey(d){\n        return 'existItem' + d\n    },\n    commonTransform1(x, y){\n        return `translate(${x}, ${y})`\n    },\n    commonTransform2(x, y){\n        console.log(\"x\", x, \"y\", y)\n        return `translate(${x-1}, ${y})`\n    },\n    leftBracketCompute(x1, y1, x2, y2)\n\t{\n            var qx = x1-(y2-y1)/3\n            var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    rightBracketCompute(x1, y1, x2, y2)\n\t{\n        var qx = x1+(y2-y1)/3\n        var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    updateSelectedElementComposition() {\n        this.UPDATE_SELECTED_DOM(this.elementCompositionExpression)\n    },\n    updateSelectedExist(d) {\n        this.UPDATE_NODE_DEFINITION_STATE()\n        this.UPDATE_SELECTED_DOM(d)\n    },\n    updateSelectedAll(d){\n      this.UPDATE_NODE_DEFINITION_STATE()\n      this.UPDATE_SELECTED_DOM(d)\n    },\n    selectedStyle(d){\n        if(d.key == this.selectedDomKey){\n            return ( \"fill: red !important; \" + \n                     \"stroke-width: 0px;\");\n        }\n    },\n    elementCompositionCheck(){\n      if(this.elementCompositionExpression['exist']['composition'].length + this.elementCompositionExpression['all']['composition'].length>0)\n        return true\n      return false\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-elementComposition {\n  height: 100%;\n  width: 100%;\n  .bracket{\n        &.highlighted {\n        stroke: red;\n    }\n  }\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n            &.highlighted {\n        stroke: red;\n    }\n}\n</style>\n"]}]}
{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue","mtime":1661085612637},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n      \n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n        this.recommend_list = sysDatasetObj.getRecommendData()\n\n        this.draw_node_link_tree_list()\n        \n      },\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'DATA_QUERY_INDEX'\n    ]),\n    draw_node_link_tree_list: function(){\n        let self = this\n        for(var i = 0; i < self.tmp_list.length; i++){\n\n            let width = document.getElementById(\"svg-\"+i).clientWidth\n            let height = document.getElementById(\"svg-\"+i).clientHeight\n            let data = self.recommend_list[i]['data']\n\n            let scale = 300\n\n            let isVertical = 1;\n            let min_width_height = Math.min(width, height);\n            let trbl = (min_width_height * 20) / scale;\n            let margin = { top: trbl, right: trbl, bottom: 20, left: trbl };\n            let innerWidth = width - 10;\n            let innerHeight = height - 25;\n\n            let r = (min_width_height * 3)/ scale;\n            let r_min = (min_width_height * 2.5)/ scale;\n            let r_max = (min_width_height * 3.5)/ scale;\n            // r = r_max\n            let strokeWidth = (min_width_height * r) / scale;\n            let strokeOpacity = (min_width_height ) / scale;\n\n            let degree_max = 0\n            let root = d3.tree().size([innerWidth, innerHeight]) (\n                d3.hierarchy(data)\n                    .eachBefore(d=>{\n                    // d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n                    // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n                    // d.data.data.height = d.height; //重新画图之后要重新计算高度\n                    // d.data.data.degree = d.children ? d.children.length : 0;\n                    // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n                })\n            );\n\n            let DimGray = d3.rgb(105,105,105)\n            // let LightGray = d3.rgb(211,211,211)\n            let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n            let color = d3.interpolate(DimGray, DimGray)\n\n            self.RootDes = root.descendants()\n            let RootDes = self.RootDes\n\n            const svg = d3.select(self.$el).select('#svg-'+i)\n\n           svg.selectAll('.tree-name').remove();\n\n            svg.append(\"text\")\n            .attr(\"class\", \"tree-name\")\n            .attr(\"y\", height-4)\n            .attr(\"x\", width/2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"10\")\n            .attr(\"fill\", \"#808080\")\n            .text(self.recommend_list[i]['data']['doi']);\n\n            svg.append(\"rect\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"transform\", \"translate(0,0)\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke-width\", \"1.5\")\n                .attr(\"stroke\", \"grey\")\n                .attr(\"stroke-dasharray\", \"4 2\")\n\n            svg.append(\"rect\")\n            .attr(\"class\", \"rect-none\")\n            .attr(\"width\", width-30)\n            .attr(\"height\", height-40)\n            .attr(\"transform\", \"translate(20,20)\")\n            .attr(\"opacity\", '0')\n            .attr(\"treeindex\", self.recommend_list[i]['index'])\n            .on(\"click\", function(){\n                 self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"treeindex\")))\n            })\n\n\n            let t = svg.transition()\n                .duration(750)\n\n            let g = svg.select('#g-level-1-'+i)\n                .attr('transform', `translate(${5}, ${5})`);\n\n            if(isVertical)\n            {\n                g.select('#g-level-1-path-'+i)\n                .attr('class', 'gLink')\n                .attr('stroke-opacity', 0.2)\n                .attr('stroke-width', strokeWidth)\n                .selectAll('path')\n                .data(root.links(), function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let source = d.source.data.data.nodeIndex\n                    // let target = d.target.data.data.nodeIndex\n                    // return \"node\"+source+\"node\"+target;\n                })\n                .join(\n                    enter => enter.append('path')\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                    exit => exit\n                    .remove()\n                );\n\n                // 保留\n                let node = g.select('#g-level-1-node-'+i)\n                .attr('class', 'brush')\n                .selectAll('a')\n                .data(RootDes, function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let node_id = d.data.data.nodeIndex\n                    // return node_id;\n                })\n                .join(\n                    enter => enter.append('a')\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                    exit => exit\n                    .remove()\n                )\n                d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n                node.append(\"circle\")\n                .attr('class', 'tree-node')\n                .attr('id', d=> 'node-id-' + d.nodeIndex)\n                //.attr(\"fill\", d => color(linear(d.height)) )\n                .attr(\"fill\", \"steelblue\")\n                .attr(\"r\", d=> d.degree > 0 ? d.degree * r_min > r_max ? r_max : d.degree * r_min : r_min)\n                .call(self.tooltip_ele(\"node_link_tree\"));\n\n            }\n\n        }\n    }\n\n  }\n\n}\n",{"version":3,"sources":["RecommendPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA","file":"RecommendPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"recommend-panel-view\">\n    <span class=\"recommend-title\">Recommendation</span>\n    <span class=\"num-text\">Num</span>\n    <div class=\"num-slider\">\n        <el-slider v-model=\"num\" :step=\"5\" :min=\"0\" :max=\"20\"  :marks=\"marks\" show-stops></el-slider>\n    </div>\n    <span class=\"similarity-text\">Similarity</span>\n    <el-switch class=\"similarity-switch\" v-model=\"similarity\" active-color=\"steelbule\" inactive-color=\"grey\"></el-switch>\n    <div class=\"tree-list\">\n        <div v-for=\"tree in tmp_list\" :key=\"tree\" class=\"tree-item\">\n            <svg v-bind:id=\"'svg-' + tree\" style=\"position: relative; width: 100%; height: 100%;\">\n                <g v-bind:id=\"'g-level-1-'+tree\">\n                    <g v-bind:id=\"'g-level-1-path-'+tree\"></g>\n                    <g v-bind:id=\"'g-level-1-node-'+tree\"></g>\n                </g>\n            </svg>\n            <!-- <div class=\"svg-text\">{{recommend_list[tree]['data']['doi']}}</div> -->\n        </div>\n    \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n      \n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n        this.recommend_list = sysDatasetObj.getRecommendData()\n\n        this.draw_node_link_tree_list()\n        \n      },\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'DATA_QUERY_INDEX'\n    ]),\n    draw_node_link_tree_list: function(){\n        let self = this\n        for(var i = 0; i < self.tmp_list.length; i++){\n\n            let width = document.getElementById(\"svg-\"+i).clientWidth\n            let height = document.getElementById(\"svg-\"+i).clientHeight\n            let data = self.recommend_list[i]['data']\n\n            let scale = 300\n\n            let isVertical = 1;\n            let min_width_height = Math.min(width, height);\n            let trbl = (min_width_height * 20) / scale;\n            let margin = { top: trbl, right: trbl, bottom: 20, left: trbl };\n            let innerWidth = width - 10;\n            let innerHeight = height - 25;\n\n            let r = (min_width_height * 3)/ scale;\n            let r_min = (min_width_height * 2.5)/ scale;\n            let r_max = (min_width_height * 3.5)/ scale;\n            // r = r_max\n            let strokeWidth = (min_width_height * r) / scale;\n            let strokeOpacity = (min_width_height ) / scale;\n\n            let degree_max = 0\n            let root = d3.tree().size([innerWidth, innerHeight]) (\n                d3.hierarchy(data)\n                    .eachBefore(d=>{\n                    // d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n                    // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n                    // d.data.data.height = d.height; //重新画图之后要重新计算高度\n                    // d.data.data.degree = d.children ? d.children.length : 0;\n                    // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n                })\n            );\n\n            let DimGray = d3.rgb(105,105,105)\n            // let LightGray = d3.rgb(211,211,211)\n            let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n            let color = d3.interpolate(DimGray, DimGray)\n\n            self.RootDes = root.descendants()\n            let RootDes = self.RootDes\n\n            const svg = d3.select(self.$el).select('#svg-'+i)\n\n           svg.selectAll('.tree-name').remove();\n\n            svg.append(\"text\")\n            .attr(\"class\", \"tree-name\")\n            .attr(\"y\", height-4)\n            .attr(\"x\", width/2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"10\")\n            .attr(\"fill\", \"#808080\")\n            .text(self.recommend_list[i]['data']['doi']);\n\n            svg.append(\"rect\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .attr(\"transform\", \"translate(0,0)\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke-width\", \"1.5\")\n                .attr(\"stroke\", \"grey\")\n                .attr(\"stroke-dasharray\", \"4 2\")\n\n            svg.append(\"rect\")\n            .attr(\"class\", \"rect-none\")\n            .attr(\"width\", width-30)\n            .attr(\"height\", height-40)\n            .attr(\"transform\", \"translate(20,20)\")\n            .attr(\"opacity\", '0')\n            .attr(\"treeindex\", self.recommend_list[i]['index'])\n            .on(\"click\", function(){\n                 self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"treeindex\")))\n            })\n\n\n            let t = svg.transition()\n                .duration(750)\n\n            let g = svg.select('#g-level-1-'+i)\n                .attr('transform', `translate(${5}, ${5})`);\n\n            if(isVertical)\n            {\n                g.select('#g-level-1-path-'+i)\n                .attr('class', 'gLink')\n                .attr('stroke-opacity', 0.2)\n                .attr('stroke-width', strokeWidth)\n                .selectAll('path')\n                .data(root.links(), function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let source = d.source.data.data.nodeIndex\n                    // let target = d.target.data.data.nodeIndex\n                    // return \"node\"+source+\"node\"+target;\n                })\n                .join(\n                    enter => enter.append('path')\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                    exit => exit\n                    .remove()\n                );\n\n                // 保留\n                let node = g.select('#g-level-1-node-'+i)\n                .attr('class', 'brush')\n                .selectAll('a')\n                .data(RootDes, function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let node_id = d.data.data.nodeIndex\n                    // return node_id;\n                })\n                .join(\n                    enter => enter.append('a')\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                    exit => exit\n                    .remove()\n                )\n                d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n                node.append(\"circle\")\n                .attr('class', 'tree-node')\n                .attr('id', d=> 'node-id-' + d.nodeIndex)\n                //.attr(\"fill\", d => color(linear(d.height)) )\n                .attr(\"fill\", \"steelblue\")\n                .attr(\"r\", d=> d.degree > 0 ? d.degree * r_min > r_max ? r_max : d.degree * r_min : r_min)\n                .call(self.tooltip_ele(\"node_link_tree\"));\n\n            }\n\n        }\n    }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .similarity-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 68%;\n    }\n    .similarity-switch{\n        position: absolute;\n        top: 30px;\n        left: 85%;\n    }\n    .tree-list {\n        position: absolute;\n        top: 16%;\n        bottom: 0%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 49% 49%;\n        padding: 10px;\n        grid-column-gap: 5px;\n        grid-row-gap: 5px;\n        .tree-item{\n            height: 125px;\n        }\n    }\n}\n\n</style>"]}]}
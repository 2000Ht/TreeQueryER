{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/TreeElements/Node.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/TreeElements/Node.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: 'Node',\n    emits:['collapseTree'],\n    props:{\n        node: {\n            type: Object\n        },\n        circleRadius: {\n            type: Number\n        },\n        circleCursor: {\n            type: String\n        },\n        textFill: {\n            type: Number\n        },\n        renderNodeLinkTree: {\n            type: Function\n        }\n    },\n\n    computed: {\n        rootTransform() {\n            return `translate(${this.node.x}, ${this.node.y})`\n            \n        },\n        nodeFill(){\n            if(\"highlight\" in this.node['data']){\n                if(this.node['data']['highlight']){\n                    return '#f00'\n                }\n            }\n            return this.node._children ? 'lightsteelblue' : '#fff'\n        },\n        textX(){\n            return this.node.children||this.node._children ? -13 : 13\n        },\n        textAnchor(){\n            return this.node.children||this.node._children ? 'end' : 'start'\n        },\n        returnNode(){\n            return this.node\n        }\n    },\n\n    watch: {\n        node: function() {\n\n        }\n    },\n    methods: {\n        // collapseTree: function() {\n        //     console.log('collapseTree')\n        //     this.$emit(\"updateTree\", this.Node);\n        // }\n    }\n\n}\n",{"version":3,"sources":["Node.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Node.vue","sourceRoot":"src/views/TreeElements","sourcesContent":["<template>\n<g class=\"node\" :transform=\"rootTransform\" @click=\"$emit('collapseTree', returnNode)\">\n    <circle class=\"node\" r=\"10\"  :style=\"'fill:' + nodeFill\" ></circle>\n    <text :x=\"textX\" :text-anchor=\"textAnchor\">{{node['data']['data']['name']}}</text>\n</g>\n</template>\n\n<script>\nexport default {\n    name: 'Node',\n    emits:['collapseTree'],\n    props:{\n        node: {\n            type: Object\n        },\n        circleRadius: {\n            type: Number\n        },\n        circleCursor: {\n            type: String\n        },\n        textFill: {\n            type: Number\n        },\n        renderNodeLinkTree: {\n            type: Function\n        }\n    },\n\n    computed: {\n        rootTransform() {\n            return `translate(${this.node.x}, ${this.node.y})`\n            \n        },\n        nodeFill(){\n            if(\"highlight\" in this.node['data']){\n                if(this.node['data']['highlight']){\n                    return '#f00'\n                }\n            }\n            return this.node._children ? 'lightsteelblue' : '#fff'\n        },\n        textX(){\n            return this.node.children||this.node._children ? -13 : 13\n        },\n        textAnchor(){\n            return this.node.children||this.node._children ? 'end' : 'start'\n        },\n        returnNode(){\n            return this.node\n        }\n    },\n\n    watch: {\n        node: function() {\n\n        }\n    },\n    methods: {\n        // collapseTree: function() {\n        //     console.log('collapseTree')\n        //     this.$emit(\"updateTree\", this.Node);\n        // }\n    }\n\n}\n</script>\n\n\n<style scoped>\n\n</style>\n"]}]}
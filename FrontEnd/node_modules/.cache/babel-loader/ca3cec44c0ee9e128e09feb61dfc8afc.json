{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REPath.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/REView/REComponents/REPath.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.repeat\";\nimport _defineProperty from \"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport RENode from '@/views/REView/REComponents/RENode.vue';\nimport REPath from '@/views/REView/REComponents/REPath.vue';\nexport default {\n  name: 'REPath',\n  components: {\n    RENode: RENode,\n    REPath: REPath\n  },\n  beforeCreate: function beforeCreate() {\n    this.$options.components.REOr = require(\"@/views/REView/REComponents/REOr.vue\").default;\n  },\n  props: {\n    pathExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      retObject: {}\n    };\n  },\n  mounted: function mounted() {//console.log('this.pathExpression', this.pathExpression)\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'selectedDomKey']), {\n    getPathHighlightState: function getPathHighlightState() {\n      return this.pathExpression.key === this.selectedDomKey;\n    },\n    leftBracketTransform: function leftBracketTransform() {\n      return \"translate(\".concat(this.pathExpression['xLeftBracket'], \", \").concat(this.pathExpression['yLeftBracket'], \")\");\n    },\n    rightBracketTransform: function rightBracketTransform() {\n      return \"translate(\".concat(this.pathExpression['xRightBracket'], \", \").concat(this.pathExpression['yRightBracket'], \")\");\n    },\n    repeatTransform: function repeatTransform() {\n      return \"translate(\".concat(this.pathExpression['xRepeat'], \", \").concat(this.pathExpression['yRepeat'], \")\");\n    },\n    branchRepeatTransform: function branchRepeatTransform() {\n      return \"translate(\".concat(this.pathExpression['xBranchRepeat'], \", \").concat(this.pathExpression['yBranchRepeat'], \")\");\n    },\n    branchUpperTransform: function branchUpperTransform() {\n      return \"translate(\".concat(this.pathExpression['xBranchUpper'], \", \").concat(this.pathExpression['yBranchUpper'], \")\");\n    },\n    leftBracketBranchCompute: function leftBracketBranchCompute() {\n      var x1 = this.pathExpression['x1LeftBranchBracket'];\n      var y1 = this.pathExpression['y1LeftBranchBracket'] + 6;\n      var x2 = this.pathExpression['x2LeftBranchBracket'];\n      var y2 = this.pathExpression['y2LeftBranchBracket'] - 6;\n      var midx = x1 - (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" L \" + midx + \" \" + midy + \" L \" + x2 + \" \" + y2;\n    },\n    leftBracketBranchRectTransform: function leftBracketBranchRectTransform() {\n      var x1 = this.pathExpression['x1LeftBranchBracket'];\n      var y1 = this.pathExpression['y1LeftBranchBracket'] + 6;\n      var x2 = this.pathExpression['x2LeftBranchBracket'];\n      var y2 = this.pathExpression['y2LeftBranchBracket'] - 6;\n      var midx = x1 - (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"translate(\".concat(midx, \", \").concat(y1, \")\");\n    },\n    rightBracketBranchCompute: function rightBracketBranchCompute() {\n      var x1 = this.pathExpression['x1RightBranchBracket'];\n      var y1 = this.pathExpression['y1RightBranchBracket'] + 6;\n      var x2 = this.pathExpression['x2RightBranchBracket'];\n      var y2 = this.pathExpression['y2RightBranchBracket'] - 6;\n      var midx = x1 + (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" L \" + midx + \" \" + midy + \" L \" + x2 + \" \" + y2;\n    },\n    rightBracketBranchRectTransform: function rightBracketBranchRectTransform() {\n      var x1 = this.pathExpression['x1RightBranchBracket'];\n      var y1 = this.pathExpression['y1RightBranchBracket'] + 6;\n      var x2 = this.pathExpression['x2RightBranchBracket'];\n      var y2 = this.pathExpression['y2RightBranchBracket'] - 6;\n      var midx = x1 + (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"translate(\".concat(x1, \", \").concat(y1, \")\");\n    },\n    leftBracketCompute: function leftBracketCompute() {\n      var x1 = this.pathExpression['x1LeftBracket'];\n      var y1 = this.pathExpression['y1LeftBracket'];\n      var x2 = this.pathExpression['x2LeftBracket'];\n      var y2 = this.pathExpression['y2LeftBracket'];\n      var qx = x1 - (y2 - y1) / 3;\n      var qy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n    },\n    leftBracketRectTransform: function leftBracketRectTransform() {\n      var x1 = this.pathExpression['x1LeftBracket'];\n      var y1 = this.pathExpression['y1LeftBracket'];\n      var x2 = this.pathExpression['x2LeftBracket'];\n      var y2 = this.pathExpression['y2LeftBracket'];\n      var qx = x1 - (y2 - y1) / 3 + 5;\n      var qy = (y2 + y1) / 2;\n      return \"translate(\".concat(qx, \", \").concat(this.pathExpression['y1LeftBracket'], \")\");\n    },\n    rightBracketCompute: function rightBracketCompute() {\n      var x1 = this.pathExpression['x1RightBracket'];\n      var y1 = this.pathExpression['y1RightBracket'];\n      var x2 = this.pathExpression['x2RightBracket'];\n      var y2 = this.pathExpression['y2RightBracket'];\n      var qx = x1 + (y2 - y1) / 3;\n      var qy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n    },\n    rightBracketRectTransform: function rightBracketRectTransform() {\n      var x1 = this.pathExpression['x1RightBracket'];\n      var y1 = this.pathExpression['y1RightBracket'];\n      var x2 = this.pathExpression['x2RightBracket'];\n      var y2 = this.pathExpression['y2RightBracket'];\n      var qx = x1 - 5;\n      var qy = (y2 + y1) / 2;\n      return \"translate(\".concat(qx, \", \").concat(this.pathExpression['y1RightBracket'], \")\");\n    },\n    orCompute: function orCompute() {\n      var x1 = this.pathExpression['xOr'];\n      var y1 = this.pathExpression['yOr'];\n      return \"M \" + x1 + \" \" + y1 + \" v \" + 30;\n    },\n    upperTransform: function upperTransform() {\n      return \"translate(\".concat(this.pathExpression['xUpper'], \", \").concat(this.pathExpression['yUpper'], \")\");\n    },\n    selectedCompute: function selectedCompute() {\n      var x1 = this.pathExpression['x1Selected'];\n      var x2 = this.pathExpression['x2Selected'];\n      var y1 = this.pathExpression['ySelected'];\n      return \"M \" + x1 + \" \" + y1 + \"H \" + x2;\n    }\n  }),\n  methods: _objectSpread({}, mapMutations(['UPDATE_REPEAT_DOM', 'UPDATE_SELECTED_DOM', 'UPDATE_REPEAT_DOM', 'UPDATE_SELECTED_PART']), {\n    computeItemKey: function computeItemKey(d) {\n      return 'item' + d;\n    },\n    checkBranchRepeat: function checkBranchRepeat() {\n      if ('branchRepeat' in this.pathExpression) if (this.pathExpression['branchRepeat'][0] != 1 || this.pathExpression['branchRepeat'][1] != 1) return true;\n      return false;\n    },\n    checkRepeat: function checkRepeat() {\n      if ('repeat' in this.pathExpression) if (this.pathExpression['repeat'][0] != 1 || this.pathExpression['repeat'][1] != 1) return true;\n      return false;\n    },\n    updateRepeat: function updateRepeat() {\n      this.UPDATE_REPEAT_DOM(this.pathExpression);\n    },\n    updateSelectedPath: function updateSelectedPath() {\n      this.UPDATE_SELECTED_DOM(this.pathExpression);\n      console.log;\n    },\n    pathStyle: function pathStyle() {\n      if (this.pathExpression.key == this.selectedDomKey) {\n        return \"stroke: red !important\";\n      }\n    },\n    upperStyle: function upperStyle() {\n      if (this.pathExpression.key == this.selectedDomKey) {\n        return \"stroke: red !important\";\n      }\n    },\n    updateSelectedPart: function updateSelectedPart() {\n      if ('selected' in this.pathExpression) {\n        this.pathExpression['selected'] = !this.pathExpression['selected'];\n      } else {\n        this.pathExpression['selected'] = true;\n      }\n\n      this.UPDATE_SELECTED_PART();\n    }\n  })\n};",{"version":3,"sources":["REPath.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <g class=\"re-path\">\n    <g v-for=\"(item, index1) in pathExpression['composition']\" :key=\"computeItemKey(index1)\">\n        <RENode v-if=\"item['type'] == 'node'\" :nodeExpression=\"item\" :key=\"item.key\" ></RENode>\n        <REPath v-if=\"item['type'] == 'path'\" :pathExpression=\"item\" :key=\"item.key\"></REPath>\n        <REOr v-if=\"item['type'] == 'or'\" :orExpression=\"item\" :key=\"item.key\"></REOr>\n    </g>\n    <path v-if=\"pathExpression['or']\" :d=\"orCompute\" />\n    <g v-if=\"pathExpression['branch']\">\n        <path :d=\"leftBracketBranchCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketBranchRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"20\" height=\"25\" opacity=\"0\"/>\n        <path :d=\"rightBracketBranchCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"rightBracketBranchRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"20\" height=\"25\" opacity=\"0\"/>\n        <text v-if=\"checkBranchRepeat()\" :transform=\"branchRepeatTransform\" style=\"alignment-baseline: hanging;\">{{pathExpression['branchRepeat'][0]}}..{{pathExpression['branchRepeat'][1]}}</text>\n        <rect class=\"repeat-rect\" v-if=\"checkBranchRepeat()\" width=\"15\" height=\"10\" :transform=\"branchRepeatTransform\" @click=\"updateRepeat()\"></rect>\n        <rect class=\"upper-rect\" v-if=\"pathExpression['branchUpper']\" width=\"10\" height=\"10\" :transform=\"branchUpperTransform\"  @click=\"updateRepeat()\"/>\n    </g>\n    <g v-if=\"pathExpression['bracket']\">\n        <path :d=\"leftBracketCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"15\" height=\"45\" opacity=\"0\"/>\n        <path :d=\"rightBracketCompute\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" :style=\"pathStyle()\"/>\n        <rect :transform=\"leftBracketRectTransform\" @click=\"updateSelectedPath()\"  @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"15\" height=\"45\" opacity=\"0\"/>\n    </g>\n    <text v-if=\"checkRepeat()\" \n            :transform=\"repeatTransform\" \n            style=\"alignment-baseline: hanging;\"\n        >\n            {{pathExpression['repeat'][0]}}..{{pathExpression['repeat'][1]}}\n    </text>\n    <rect class=\"upper-rect\" v-if=\"pathExpression['upper']\" width=\"10\" height=\"10\" :transform=\"upperTransform\" :style=\"upperStyle()\" @click=\"updateRepeat()\"/>\n    <rect class=\"repeat-rect\" v-if=\"checkRepeat()\" width=\"15\" height=\"10\" :transform=\"repeatTransform\" @click=\"updateRepeat()\"></rect>\n    <path v-if=\"pathExpression['selected']\" :d=\"selectedCompute\" />\n  </g>\n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n\nexport default {\n  name: 'REPath',\n  components: {\n    RENode,\n    REPath,\n  },\n  beforeCreate() {\n    this.$options.components.REOr = require(\"@/views/REView/REComponents/REOr.vue\").default;\n  },\n  props: {\n    pathExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        retObject: {}\n    }\n  },\n  mounted() {\n    //console.log('this.pathExpression', this.pathExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDomKey'\n    ]),\n    getPathHighlightState () {\n        return this.pathExpression.key === this.selectedDomKey\n    },\n    leftBracketTransform(){\n        return `translate(${this.pathExpression['xLeftBracket']}, ${this.pathExpression['yLeftBracket']})`\n    },\n    rightBracketTransform(){\n        return `translate(${this.pathExpression['xRightBracket']}, ${this.pathExpression['yRightBracket']})`\n    },\n    repeatTransform(){\n        return `translate(${this.pathExpression['xRepeat']}, ${this.pathExpression['yRepeat']})`\n    },\n    branchRepeatTransform(){\n        return `translate(${this.pathExpression['xBranchRepeat']}, ${this.pathExpression['yBranchRepeat']})`\n    },\n    branchUpperTransform(){\n        return `translate(${this.pathExpression['xBranchUpper']}, ${this.pathExpression['yBranchUpper']})`\n    },\n    leftBracketBranchCompute()\n\t{\n        var x1 = this.pathExpression['x1LeftBranchBracket']\n        var y1 = this.pathExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.pathExpression['x2LeftBranchBracket']\n        var y2 = this.pathExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    leftBracketBranchRectTransform()\n\t  {\n        var x1 = this.pathExpression['x1LeftBranchBracket']\n        var y1 = this.pathExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.pathExpression['x2LeftBranchBracket']\n        var y2 = this.pathExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn `translate(${midx}, ${y1})`\n    },\n    rightBracketBranchCompute()\n\t{\n        var x1 = this.pathExpression['x1RightBranchBracket']\n        var y1 = this.pathExpression['y1RightBranchBracket'] + 6\n        var x2 = this.pathExpression['x2RightBranchBracket']\n        var y2 = this.pathExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    rightBracketBranchRectTransform()\n\t{\n        var x1 = this.pathExpression['x1RightBranchBracket']\n        var y1 = this.pathExpression['y1RightBranchBracket'] + 6\n        var x2 = this.pathExpression['x2RightBranchBracket']\n        var y2 = this.pathExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn `translate(${x1}, ${y1})`\n    },\n    leftBracketCompute()\n\t{\n            var x1 = this.pathExpression['x1LeftBracket']\n            var y1 = this.pathExpression['y1LeftBracket']\n            var x2 = this.pathExpression['x2LeftBracket']\n            var y2 = this.pathExpression['y2LeftBracket']\n\n            var qx = x1-(y2-y1)/3\n            var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    leftBracketRectTransform(){\n      var x1 = this.pathExpression['x1LeftBracket']\n      var y1 = this.pathExpression['y1LeftBracket']\n      var x2 = this.pathExpression['x2LeftBracket']\n      var y2 = this.pathExpression['y2LeftBracket']\n\n      var qx = x1-(y2-y1)/3 + 5\n      var qy = (y2+y1)/2\n      return `translate(${qx}, ${this.pathExpression['y1LeftBracket']})`\n    },\n    rightBracketCompute()\n\t{\n        var x1 = this.pathExpression['x1RightBracket']\n        var y1 = this.pathExpression['y1RightBracket']\n        var x2 = this.pathExpression['x2RightBracket']\n        var y2 = this.pathExpression['y2RightBracket']\n\n        var qx = x1+(y2-y1)/3\n        var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    rightBracketRectTransform(){\n        var x1 = this.pathExpression['x1RightBracket']\n        var y1 = this.pathExpression['y1RightBracket']\n        var x2 = this.pathExpression['x2RightBracket']\n        var y2 = this.pathExpression['y2RightBracket']\n\n        var qx = x1 - 5\n        var qy = (y2+y1)/2\n        return `translate(${qx}, ${this.pathExpression['y1RightBracket']})`\n    },\n    orCompute(){\n        var x1 = this.pathExpression['xOr']\n        var y1 = this.pathExpression['yOr']\n\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" v \" + 30);\n    },\n    upperTransform(){\n        return `translate(${this.pathExpression['xUpper']}, ${this.pathExpression['yUpper']})`\n    },\n    selectedCompute(){\n        var x1 = this.pathExpression['x1Selected']\n        var x2 = this.pathExpression['x2Selected']\n        var y1 = this.pathExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART'\n    ]),\n    computeItemKey(d){\n        return 'item'+d\n    },\n    checkBranchRepeat(){\n        if('branchRepeat' in this.pathExpression)\n            if(this.pathExpression['branchRepeat'][0]!=1 || this.pathExpression['branchRepeat'][1]!=1)\n                return true\n        return false\n    },\n    checkRepeat(){\n        if('repeat' in this.pathExpression)\n            if(this.pathExpression['repeat'][0]!=1 || this.pathExpression['repeat'][1]!=1)\n                return true\n        return false\n    },\n    updateRepeat() {\n        this.UPDATE_REPEAT_DOM(this.pathExpression)\n    },\n    updateSelectedPath(){\n      this.UPDATE_SELECTED_DOM(this.pathExpression)\n      console.log\n    },\n    pathStyle(){\n        if(this.pathExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    upperStyle(){\n        if(this.pathExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    updateSelectedPart(){\n        if('selected' in this.pathExpression){\n            this.pathExpression['selected'] = !this.pathExpression['selected']\n        }\n        else{\n            this.pathExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-path {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n"],"sourceRoot":"src/views/REView/REComponents"}]}
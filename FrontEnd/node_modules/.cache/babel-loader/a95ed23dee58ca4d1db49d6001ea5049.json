{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REListNode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REListNode.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.repeat\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport { getComponentKey } from '@/utils/componentkey.js';\nexport default {\n  name: 'REListNode',\n  components: {},\n  props: {\n    nodeExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      rectKey: 0\n    };\n  },\n  mounted: function mounted() {},\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    nodeDefinitionState: function nodeDefinitionState() {\n      this.rectKey = (this.rectKey + 1) % 2;\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'selectedDom', 'selectedDomKey', 'nodeDefinitionState']), {\n    getNodeHighlightState: function getNodeHighlightState() {\n      return this.nodeExpression.key === this.selectedDomKey;\n    },\n    getNodeDefineState: function getNodeDefineState() {\n      if ('definition' in this.nodeExpression) {\n        if (this.nodeExpression['definition']) return true;\n      }\n    },\n    nodeTransform: function nodeTransform() {\n      return \"translate(\".concat(this.nodeExpression['x'], \", \").concat(this.nodeExpression['y'], \")\");\n    },\n    labelTransform: function labelTransform() {\n      var tmpX = this.nodeExpression['x'] + 6.5;\n      var tmpY = this.nodeExpression['y'] + 4;\n      return \"translate(\".concat(tmpX, \", \").concat(tmpY, \")\");\n    },\n    repeatTransform: function repeatTransform() {\n      return \"translate(\".concat(this.nodeExpression['xRepeat'], \", \").concat(this.nodeExpression['yRepeat'], \")\");\n    },\n    branchRepeatTransform: function branchRepeatTransform() {\n      return \"translate(\".concat(this.nodeExpression['xBranchRepeat'], \", \").concat(this.nodeExpression['yBranchRepeat'], \")\");\n    },\n    upperTransform: function upperTransform() {\n      return \"translate(\".concat(this.nodeExpression['xUpper'], \", \").concat(this.nodeExpression['yUpper'], \")\");\n    },\n    orCompute: function orCompute() {\n      var x1 = this.nodeExpression['xOr'];\n      var y1 = this.nodeExpression['yOr'];\n      return \"M \" + x1 + \" \" + y1 + \" v \" + 30;\n    },\n    notCompute: function notCompute() {\n      var x1 = this.nodeExpression['notX'];\n      var y1 = this.nodeExpression['notY'];\n      return \"M \" + x1 + \" \" + y1 + \"v \" + 22;\n    },\n    selectedCompute: function selectedCompute() {\n      var x1 = this.nodeExpression['x1Selected'];\n      var x2 = this.nodeExpression['x2Selected'];\n      var y1 = this.nodeExpression['ySelected'];\n      return \"M \" + x1 + \" \" + y1 + \"H \" + x2;\n    },\n    leftBracketBranchCompute: function leftBracketBranchCompute() {\n      var x1 = this.nodeExpression['x1LeftBranchBracket'];\n      var y1 = this.nodeExpression['y1LeftBranchBracket'] + 6;\n      var x2 = this.nodeExpression['x2LeftBranchBracket'];\n      var y2 = this.nodeExpression['y2LeftBranchBracket'] - 6;\n      var midx = x1 - (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" L \" + midx + \" \" + midy + \" L \" + x2 + \" \" + y2;\n    },\n    rightBracketBranchCompute: function rightBracketBranchCompute() {\n      var x1 = this.nodeExpression['x1RightBranchBracket'];\n      var y1 = this.nodeExpression['y1RightBranchBracket'] + 6;\n      var x2 = this.nodeExpression['x2RightBranchBracket'];\n      var y2 = this.nodeExpression['y2RightBranchBracket'] - 6;\n      var midx = x1 + (y2 - y1) / 2;\n      var midy = (y2 + y1) / 2;\n      return \"M \" + x1 + \" \" + y1 + \" L \" + midx + \" \" + midy + \" L \" + x2 + \" \" + y2;\n    },\n    textX: function textX() {\n      return this.nodeExpression['x'] + 15;\n    },\n    textY: function textY() {\n      return this.nodeExpression['y'] + 17;\n    }\n  }),\n  methods: _objectSpread({}, mapMutations(['UPDATE_SELECTED_DOM', 'UPDATE_NODE_DEFINITION_STATE', 'UPDATE_REPEAT_DOM', 'UPDATE_SELECTED_PART', 'UPDATE_RETREE_DATA_STATE', 'RESET_DOM_KEY_STATE', 'UPDATE_SELECTED_LIST_DOM', 'UPDATE_NODE_DEFINITION_STATE2']), {\n    checkRepeat: function checkRepeat() {\n      if ('repeat' in this.nodeExpression) if (this.nodeExpression['repeat'][0] != 1 || this.nodeExpression['repeat'][1] != 1) {\n        return true;\n      }\n      return false;\n    },\n    checkBranchRepeat: function checkBranchRepeat() {\n      if ('branchRepeat' in this.nodeExpression) if (this.nodeExpression['branchRepeat'][0] != 1 || this.nodeExpression['branchRepeat'][1] != 1) return true;\n      return false;\n    },\n    checkLabel: function checkLabel() {\n      if ('nodeName' in this.nodeExpression) {\n        return true;\n      }\n\n      return false;\n    },\n    updateNode: function updateNode() {\n      if (this.selectedDom) {\n        if (this.selectedDom['type'] == 'node') {\n          this.selectedDom['definition'] = true;\n          this.selectedDom['nodeName'] = this.nodeExpression['nodeName'];\n          this.selectedDom['nodeColor'] = this.nodeExpression['nodeColor'];\n          this.selectedDom['data'] = JSON.parse(JSON.stringify(this.nodeExpression['data']));\n          this.selectedDom['key'] = getComponentKey();\n          this.UPDATE_RETREE_DATA_STATE();\n          this.RESET_DOM_KEY_STATE(); // this.UPDATE_NODE_DEFINITION_STATE()\n          // this.UPDATE_SELECTED_DOM(this.nodeExpression)\n        }\n      } else {\n        this.UPDATE_SELECTED_LIST_DOM(this.nodeExpression);\n        this.UPDATE_NODE_DEFINITION_STATE2();\n      }\n    },\n    updateSelectedPart: function updateSelectedPart() {\n      if ('selected' in this.nodeExpression) {\n        this.nodeExpression['selected'] = !this.nodeExpression['selected'];\n      } else {\n        this.nodeExpression['selected'] = true;\n      }\n\n      this.UPDATE_SELECTED_PART();\n    },\n    updateRepeat: function updateRepeat() {\n      this.UPDATE_REPEAT_DOM(this.nodeExpression);\n    },\n    nodeStyle: function nodeStyle() {\n      if ('nodeColor' in this.nodeExpression) {\n        return \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n      }\n\n      if (this.nodeExpression.key === this.selectedDomKey) {\n        return \"stroke: red !important\";\n      }\n\n      return \"stroke: #c4bbbb; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n    },\n    upperStyle: function upperStyle() {\n      if (this.nodeExpression.key == this.selectedDomKey) {\n        return \"stroke: red !important\";\n      }\n    },\n    notStyle: function notStyle() {\n      if (this.nodeExpression.key == this.selectedDomKey) {\n        return \"stroke: red !important; \" + \"fill: red\";\n      }\n    },\n    nameStyle: function nameStyle() {\n      if (!this.nodeExpression['nodeColor'] || this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\") {\n        return \"font-weight:bold; fill: black !important;\";\n      } else return \"font-weight:bold; fill: white !important;\";\n    }\n  })\n};",{"version":3,"sources":["REListNode.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n    <div class=\"re-node\">\n        <svg>\n            <rect class=\"node-rect\" :class=\"{'highlighted': getNodeHighlightState, 'defined': getNodeDefineState}\" \n                :style=\"nodeStyle()\"\n                width=\"45\" height=\"45\" \n                :key = \"rectKey\"\n                @click=\"updateNode\"/>\n            <text\n                :v-if=\"checkLabel()\"\n                class=\"node-name\"\n                :style=\"nameStyle()\"\n                text-anchor= \"middle\"\n                alignment-baseline= \"middle\"\n                :dx=\"22.5\"\n                :dy=\"22.5\"\n                @click=\"updateNode\">\n                {{nodeExpression['nodeName']}}\n            </text>\n        </svg>\n\n\n\n    </div>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import { getComponentKey } from '@/utils/componentkey.js'\n\nexport default {\n  name: 'REListNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0\n    }\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        this.rectKey = (this.rectKey + 1) % 2\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${this.nodeExpression['x']}, ${this.nodeExpression['y']})`\n    },\n    labelTransform(){\n        let tmpX = this.nodeExpression['x'] + 6.5\n        let tmpY = this.nodeExpression['y'] + 4\n        return `translate(${tmpX}, ${tmpY})`\n    },\n    repeatTransform(){\n        return `translate(${this.nodeExpression['xRepeat']}, ${this.nodeExpression['yRepeat']})`\n    },\n    branchRepeatTransform(){\n        return `translate(${this.nodeExpression['xBranchRepeat']}, ${this.nodeExpression['yBranchRepeat']})`\n    },\n    upperTransform(){\n        return `translate(${this.nodeExpression['xUpper']}, ${this.nodeExpression['yUpper']})`\n    },\n    orCompute(){\n        var x1 = this.nodeExpression['xOr']\n        var y1 = this.nodeExpression['yOr']\n\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" v \" + 30);\n    },\n    notCompute(){\n        var x1 = this.nodeExpression['notX']\n        var y1 = this.nodeExpression['notY']\n        \n        return ( \"M \" + x1 + \" \" + y1 +\n                 \"v \" + 22);\n    },\n    selectedCompute(){\n        var x1 = this.nodeExpression['x1Selected']\n        var x2 = this.nodeExpression['x2Selected']\n        var y1 = this.nodeExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n    leftBracketBranchCompute()\n\t{\n\n        var x1 = this.nodeExpression['x1LeftBranchBracket']\n        var y1 = this.nodeExpression['y1LeftBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2LeftBranchBracket']\n        var y2 = this.nodeExpression['y2LeftBranchBracket'] - 6\n\n        var midx = x1-(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    rightBracketBranchCompute()\n\t{\n        var x1 = this.nodeExpression['x1RightBranchBracket']\n        var y1 = this.nodeExpression['y1RightBranchBracket'] + 6\n        var x2 = this.nodeExpression['x2RightBranchBracket']\n        var y2 = this.nodeExpression['y2RightBranchBracket'] - 6\n\n        var midx = x1+(y2-y1)/2\n        var midy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + midx + \" \" + midy + \n                \" L \" + x2+ \" \" + y2  );\n    },\n    textX(){\n        return this.nodeExpression['x'] + 15\n    },\n    textY(){\n        return this.nodeExpression['y'] + 17\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_RETREE_DATA_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_SELECTED_LIST_DOM',\n      'UPDATE_NODE_DEFINITION_STATE2'\n    ]),\n    checkRepeat() {\n        if('repeat' in this.nodeExpression)\n            if(this.nodeExpression['repeat'][0]!=1 || this.nodeExpression['repeat'][1]!=1){\n                        return true\n            }\n        return false\n    },\n    checkBranchRepeat() {\n        if('branchRepeat' in this.nodeExpression)\n            if(this.nodeExpression['branchRepeat'][0]!=1 || this.nodeExpression['branchRepeat'][1]!=1)\n                return true\n        return false\n    },\n    checkLabel(){\n        if('nodeName' in this.nodeExpression){\n            return true\n        }\n        return false\n    },\n    updateNode() {\n\n        if(this.selectedDom){\n            if(this.selectedDom['type'] == 'node'){\n                this.selectedDom['definition'] = true\n                this.selectedDom['nodeName'] = this.nodeExpression['nodeName']\n                this.selectedDom['nodeColor'] = this.nodeExpression['nodeColor']\n                this.selectedDom['data'] = JSON.parse(JSON.stringify(this.nodeExpression['data']))\n                this.selectedDom['key'] = getComponentKey()\n                \n                this.UPDATE_RETREE_DATA_STATE()   \n                this.RESET_DOM_KEY_STATE()  \n                // this.UPDATE_NODE_DEFINITION_STATE()\n                // this.UPDATE_SELECTED_DOM(this.nodeExpression)\n            }\n        }\n        else{\n            this.UPDATE_SELECTED_LIST_DOM(this.nodeExpression)\n            this.UPDATE_NODE_DEFINITION_STATE2()\n        }\n\n        \n    },\n    updateSelectedPart(){\n        if('selected' in this.nodeExpression){\n            this.nodeExpression['selected'] = !this.nodeExpression['selected']\n        }\n        else{\n            this.nodeExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    updateRepeat() {\n        this.UPDATE_REPEAT_DOM(this.nodeExpression)\n    },\n    nodeStyle(){\n        if('nodeColor' in this.nodeExpression){\n            return (\n                \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n                \"stroke-dasharray: 0 0; \" + \n                \"stroke-width: 1;\"\n            )\n\n        }\n        if(this.nodeExpression.key === this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n        return (\n            \"stroke: #c4bbbb; \" + \n            \"stroke-width: 2; \" + \n            \"stroke-dasharray: 4 2;\" + \n            \"fill: white; \"\n        )\n\n    },\n    upperStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important\"  );\n        }\n    },\n    notStyle(){\n        if(this.nodeExpression.key == this.selectedDomKey){\n            return ( \"stroke: red !important; \" +\n                     \"fill: red\" \n                    );\n        }\n    },\n    nameStyle(){\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"font-weight:bold; fill: black !important;\"\n        }\n        else return \"font-weight:bold; fill: white !important;\"\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-node {\n  height: 100%;\n  width: 100%;\n    .node-name { \n        fill: white; \n        font-size: 18px;\n    }\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n\n    // &.defined{\n    //     stroke: #000000;\n    //     stroke-width: 3;\n    //     stroke-dasharray: 0 0;\n    //     fill: white;\n    // }\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n\n"],"sourceRoot":"src/views/REView/REComponents"}]}
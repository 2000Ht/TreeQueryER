{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/RECanvas.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/RECanvas.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.repeat\";\n\nvar _name$components$prop;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport RENode from '@/views/REView/REComponents/RENode.vue';\nimport REPath from '@/views/REView/REComponents/REPath.vue';\nimport REWholeTree from '@/views/REView/REComponents/REWholeTree.vue';\nimport REOr from '@/views/REView/REComponents/REOr.vue';\nimport { getComponentKey } from '@/utils/componentkey.js';\nimport { simpleStringify } from '@/utils/stringify.js';\nexport default (_name$components$prop = {\n  name: 'RECanvas',\n  components: {\n    RENode: RENode,\n    REPath: REPath,\n    REWholeTree: REWholeTree,\n    REOr: REOr\n  },\n  props: {\n    regularExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      curX: 40,\n      curY: 80,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      sympolList: [{\n        type: null,\n        x: 0,\n        y: 0,\n        height: 0,\n        width: 0\n      }],\n      dialogVisible: false,\n      repeatMin: '',\n      repeatMax: '',\n      updateKey: 0,\n      commitDialogVisible: false,\n      commitName: '',\n      commitDescription: '',\n      commitContent: '',\n      regexContent: ''\n    };\n  },\n  beforeMount: function beforeMount() {\n    this.positionCompute();\n    this.contentCompute();\n  },\n  mounted: function mounted() {\n    this.positionCompute();\n    this.contentCompute();\n    this.initCanvasParas();\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    reTreeDataState: function reTreeDataState() {\n      this.positionCompute();\n      this.contentCompute();\n    },\n    curRegexIndex: function curRegexIndex() {\n      this.positionCompute();\n      this.contentCompute();\n    },\n    selectedRepeatDomState: function selectedRepeatDomState() {\n      if ('branchRepeat' in this.selectedRepeatDom) {\n        this.repeatMin = this.selectedRepeatDom['branchRepeat'][0] + '';\n        this.repeatMax = this.selectedRepeatDom['branchRepeat'][1] + '';\n      } else {\n        this.repeatMin = this.selectedRepeatDom['repeat'][0] + '';\n        this.repeatMax = this.selectedRepeatDom['repeat'][1] + '';\n      }\n\n      this.dialogVisible = true;\n    },\n    selectedPartState: function selectedPartState() {\n      this.positionCompute();\n      this.contentCompute();\n    }\n  }\n}, _defineProperty(_name$components$prop, \"beforeMount\", function beforeMount() {}), _defineProperty(_name$components$prop, \"computed\", _objectSpread({}, mapState(['displayMode', 'reTreeDataState', 'selectedRepeatDom', 'selectedRepeatDomState', 'lastDom', 'curRegex', 'regexCommitState', 'selectedDom', 'selectedPartState', 'curRegexIndex']))), _defineProperty(_name$components$prop, \"methods\", _objectSpread({}, mapMutations(['UPDATE_REGEX_COMMIT_STATE', 'RESET_DOM_KEY_STATE', 'UPDATE_LAST_DOM', 'ADD_REGEX_LIST', 'UPDATE_NODE_DEFINITION_STATE']), {\n  initCanvasParas: function initCanvasParas() {\n    this.canvasWidth = this.$refs.canvas.clientWidth;\n    this.canvasHeight = this.$refs.canvas.clientHeight;\n  },\n  positionCompute: function positionCompute() {\n    if (this.regularExpression['target']['composition'][0]['type'] == 'path') {\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0]);\n    } else if (this.regularExpression['target']['composition'][0]['type'] == 'wholeTree') {\n      if ('elementComposition' in this.regularExpression['target']['composition'][0]) {\n        if (this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length + this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length > 0) this.UPDATE_LAST_DOM(null);else {\n          this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0]);\n        }\n      } else {\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0]);\n      }\n    }\n\n    this.curX = 40;\n    this.curY = 80;\n\n    for (var i = 0; i < this.regularExpression['target']['composition'].length; i++) {\n      if (this.regularExpression['target']['composition'][i]['type'] == \"node\") {\n        this.nodeCompute(this.regularExpression['target']['composition'][i]);\n        this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target'];\n        this.regularExpression['target']['composition'][i]['index'] = i;\n        this.regularExpression['target']['composition'][i]['key'] = getComponentKey();\n      } else if (this.regularExpression['target']['composition'][i]['type'] == \"path\") {\n        this.pathCompute(this.regularExpression['target']['composition'][i]);\n        this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target'];\n        this.regularExpression['target']['composition'][i]['index'] = i;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.regularExpression['target']['composition'][i]['composition'][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var tmpNode = _step.value;\n            tmpNode['parent'] = this.regularExpression['target']['composition'][i];\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else if (this.regularExpression['target']['composition'][i]['type'] == \"or\") {\n        this.orCompute(this.regularExpression['target']['composition'][i]);\n        this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target'];\n        this.regularExpression['target']['composition'][i]['index'] = i;\n      } else if (this.regularExpression['target']['composition'][i]['type'] == \"wholeTree\") {\n        this.wholeTreeCompute(this.regularExpression['target']['composition'][i]);\n        this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target'];\n        this.regularExpression['target']['composition'][i]['index'] = i;\n      }\n    }\n\n    console.log('this.regularExpression11', JSON.parse(simpleStringify(this.regularExpression))); // console.log('force update')\n    // console.log('regularExpression', this.regularExpression)\n\n    this.$forceUpdate();\n  },\n  wholeTreeCompute: function wholeTreeCompute(regWholeTree) {\n    for (var i = 0; i < regWholeTree['composition'].length; i++) {\n      regWholeTree['composition'][i]['index'] = i;\n\n      if (regWholeTree['composition'][i]['type'] == \"or\") {\n        this.orCompute(regWholeTree['composition'][i]);\n      } else if (regWholeTree['composition'][i]['type'] == \"path\") {\n        this.pathCompute(regWholeTree['composition'][i]);\n      } else if (regWholeTree['composition'][i]['type'] == \"node\") {\n        this.nodeCompute(regWholeTree['composition'][i]);\n      } else if (regWholeTree['composition'][i]['type'] == \"branch\") {\n        this.branchCompute(regWholeTree['composition'][i]);\n      }\n    }\n\n    if ('elementComposition' in regWholeTree) {\n      this.elementCompositionCompute(regWholeTree['elementComposition']);\n    }\n  },\n  branchCompute: function branchCompute(regBranch) {\n    var beginX = this.curX;\n    var beginY = this.curY + 15 - (regBranch['composition'].length * 30 + (regBranch['composition'].length - 1) * 15) / 2;\n    var maxX = 0;\n    regBranch['x1Bracket'] = beginX + 10;\n    regBranch['y1Bracket'] = this.curY + 15 - (regBranch['composition'].length * 30 + (regBranch['composition'].length - 1) * 15) / 2;\n    regBranch['x2Bracket'] = beginX + 10;\n    regBranch['y2Bracket'] = this.curY + 15 + (regBranch['composition'].length * 30 + (regBranch['composition'].length - 1) * 15) / 2;\n    beginX = beginX + 20;\n\n    if (regBranch['selected']) {\n      regBranch['x1Selected'] = this.curX;\n      regBranch['ySelected'] = this.curY + 40;\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = regBranch['composition'][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var item = _step2.value;\n        this.curX = beginX;\n        this.curY = beginY;\n        item['x1LeftBranchBracket'] = this.curX + 5;\n        item['y1LeftBranchBracket'] = this.curY;\n        item['x2LeftBranchBracket'] = this.curX + 5;\n        item['y2LeftBranchBracket'] = this.curY + 30;\n        this.curX = this.curX + 15;\n\n        if (item['selected']) {\n          item['x1Selected'] = this.curX;\n          item['ySelected'] = this.curY + 40;\n        }\n\n        if (item['type'] == \"or\") {\n          item['branch'] = true;\n          this.orCompute(item);\n        } else if (item['type'] == \"path\") {\n          item['branch'] = true;\n          this.pathCompute(item);\n        } else if (item['type'] == \"node\") {\n          item['branch'] = true;\n          this.nodeCompute(item);\n        }\n\n        if (item['selected']) {\n          item['x2Selected'] = this.curX - 15;\n        }\n\n        item['x1RightBranchBracket'] = this.curX - 5;\n        item['y1RightBranchBracket'] = this.curY;\n        item['x2RightBranchBracket'] = this.curX - 5;\n        item['y2RightBranchBracket'] = this.curY + 30;\n        this.curX = this.curX + 10;\n\n        if ('branchRepeat' in item) {\n          if (item['branchRepeat'][0] != 1 || item['branchRepeat'][1] != 1) {\n            item['xBranchRepeat'] = this.curX;\n            item['yBranchRepeat'] = this.curY;\n            this.curX = this.curX + 20;\n          }\n        }\n\n        if ('branchUpper' in item && item['branchUpper']) {\n          item['xBranchUpper'] = this.curX;\n          item['yBranchUpper'] = this.curY;\n          this.curX = this.curX + 15;\n        }\n\n        this.curX = this.curX + 10;\n\n        if (this.curX > maxX) {\n          maxX = this.curX;\n        }\n\n        beginY = beginY + 45;\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    if (regBranch['selected']) {\n      regBranch['x2Selected'] = maxX - 10;\n    }\n\n    this.curX = maxX;\n    this.curY = 80;\n    regBranch.key = getComponentKey();\n  },\n  elementCompositionCompute: function elementCompositionCompute(regElementComposition) {\n    var tmpLength = regElementComposition['exist']['composition'].length + regElementComposition['all']['composition'].length;\n    var beginX = this.curX;\n    var beginY = this.curY + 15 - (tmpLength * 30 + (tmpLength - 1) * 15) / 2;\n    var maxX = 0;\n    regElementComposition['x1'] = beginX;\n    regElementComposition['y1'] = this.curY + 15 - (tmpLength * 30 + (tmpLength - 1) * 15) / 2;\n    regElementComposition['x2'] = beginX;\n    regElementComposition['y2'] = this.curY + 15 + (tmpLength * 30 + (tmpLength - 1) * 15) / 2;\n    beginX = beginX + 15;\n\n    if (regElementComposition['exist']['composition'].length > 0) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = regElementComposition['exist']['composition'][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          this.curX = beginX;\n          this.curY = beginY;\n          item['xExist'] = this.curX;\n          item['yExist'] = this.curY;\n          this.curX = this.curX + 20;\n\n          if (item['type'] == \"or\") {\n            this.orCompute(item);\n          } else if (item['type'] == \"path\") {\n            this.pathCompute(item);\n          } else if (item['type'] == \"node\") {\n            this.nodeCompute(item);\n          }\n\n          if (this.curX > maxX) {\n            maxX = this.curX;\n          }\n\n          beginY = beginY + 45;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n\n    if (regElementComposition['all']['composition'].length > 0) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = regElementComposition['all']['composition'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var item = _step4.value;\n          this.curX = beginX;\n          this.curY = beginY;\n          item['xAll'] = this.curX;\n          item['yAll'] = this.curY;\n          this.curX = this.curX + 20;\n\n          if (item['type'] == \"or\") {\n            this.orCompute(item);\n          } else if (item['type'] == \"path\") {\n            this.pathCompute(item);\n          } else if (item['type'] == \"node\") {\n            this.nodeCompute(item);\n          }\n\n          if (this.curX > maxX) {\n            maxX = this.curX;\n          }\n\n          beginY = beginY + 45;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n\n    this.curX = maxX;\n    this.curY = 80;\n    regElementComposition.key = getComponentKey();\n  },\n  orCompute: function orCompute(regOr) {\n    if ('or' in regOr) {\n      delete regOr['or'];\n      delete regOr['xOr'];\n      delete regOr['yOr'];\n    }\n\n    regOr['x1LeftBracket'] = this.curX + 7;\n    regOr['y1LeftBracket'] = this.curY;\n    regOr['x2LeftBracket'] = this.curX + 7;\n    regOr['y2LeftBracket'] = this.curY + 30;\n    this.curX = this.curX + 15;\n\n    if (regOr['selected']) {\n      regOr['x1Selected'] = this.curX;\n      regOr['ySelected'] = this.curY + 40;\n    }\n\n    for (var i = 0; i < regOr['composition'].length; i++) {\n      regOr['composition'][i]['index'] = i;\n\n      if (regOr['composition'][i]['type'] == \"or\") {\n        this.orCompute(regOr['composition'][i]);\n      } else if (regOr['composition'][i]['type'] == \"path\") {\n        regOr['composition'][i]['bracket'] = true;\n        this.pathCompute(regOr['composition'][i]);\n      } else if (regOr['composition'][i]['type'] == \"node\") {\n        this.nodeCompute(regOr['composition'][i]);\n      }\n\n      if (i < regOr['composition'].length - 1) {\n        regOr['composition'][i]['or'] = true;\n        regOr['composition'][i]['xOr'] = this.curX;\n        regOr['composition'][i]['yOr'] = this.curY;\n        this.curX = this.curX + 15;\n      }\n    }\n\n    if (regOr['selected']) {\n      regOr['x2Selected'] = this.curX - 15;\n    }\n\n    regOr['x1RightBracket'] = this.curX - 7;\n    regOr['y1RightBracket'] = this.curY;\n    regOr['x2RightBracket'] = this.curX - 7;\n    regOr['y2RightBracket'] = this.curY + 30;\n    this.curX = this.curX + 15;\n\n    if ('upper' in regOr && regOr['upper']) {\n      regOr['xUpper'] = this.curX - 10;\n      regOr['yUpper'] = this.curY;\n      this.curX = this.curX + 15;\n    }\n\n    if ('repeat' in regOr) {\n      if (regOr['repeat'][0] != 1 || regOr['repeat'][1] != 1) {\n        regOr['xRepeat'] = this.curX - 15;\n        regOr['yRepeat'] = this.curY;\n        this.curX = this.curX + 15;\n      }\n    }\n\n    regOr.key = getComponentKey();\n  },\n  pathCompute: function pathCompute(regPath) {\n    if ('or' in regPath) {\n      delete regPath['or'];\n      delete regPath['xOr'];\n      delete regPath['yOr'];\n    }\n\n    if ('bracket' in regPath && regPath['bracket']) {\n      regPath['x1LeftBracket'] = this.curX + 7;\n      regPath['y1LeftBracket'] = this.curY;\n      regPath['x2LeftBracket'] = this.curX + 7;\n      regPath['y2LeftBracket'] = this.curY + 30;\n      this.curX = this.curX + 15;\n    }\n\n    if (regPath['selected']) {\n      regPath['x1Selected'] = this.curX;\n      regPath['ySelected'] = this.curY + 40;\n    }\n\n    for (var i = 0; i < regPath['composition'].length; i++) {\n      regPath['composition'][i]['index'] = i;\n\n      if (regPath['composition'][i]['type'] == \"or\") {\n        this.orCompute(regPath['composition'][i]);\n      } else if (regPath['composition'][i]['type'] == \"path\") {\n        this.pathCompute(regPath['composition'][i]);\n      } else if (regPath['composition'][i]['type'] == \"node\") {\n        this.nodeCompute(regPath['composition'][i]);\n      }\n    }\n\n    if (regPath['selected']) {\n      regPath['x2Selected'] = this.curX - 15;\n    }\n\n    if ('bracket' in regPath && regPath['bracket']) {\n      regPath['x1RightBracket'] = this.curX - 7;\n      regPath['y1RightBracket'] = this.curY;\n      regPath['x2RightBracket'] = this.curX - 7;\n      regPath['y2RightBracket'] = this.curY + 30;\n      this.curX = this.curX + 15;\n    }\n\n    if ('upper' in regPath && regPath['upper']) {\n      regPath['xUpper'] = this.curX - 10;\n      regPath['yUpper'] = this.curY;\n      this.curX = this.curX + 15;\n    }\n\n    if ('repeat' in regPath) {\n      if (regPath['repeat'][0] != 1 || regPath['repeat'][1] != 1) {\n        regPath['xRepeat'] = this.curX - 15;\n        regPath['yRepeat'] = this.curY;\n        this.curX = this.curX + 15;\n      }\n    }\n\n    regPath.key = getComponentKey();\n  },\n  // nodesCompute(regNodes){\n  //   for(var Node of regNodes['nodes']){\n  //     this.nodeCompute(Node)\n  //   }\n  //   if(regNodes['repeat'][0]!=1 || regNodes['repeat'][1]!=1){\n  //     regNodes['x']=this.curX-35\n  //     regNodes['y']=this.curY-15\n  //     this.curX = this.curX + 10\n  //   }\n  // },\n  nodeCompute: function nodeCompute(regNode) {\n    if ('or' in regNode) {\n      delete regNode['or'];\n      delete regNode['xOr'];\n      delete regNode['yOr'];\n    }\n\n    if ('notFlag' in regNode && regNode['notFlag']) {\n      regNode['notX'] = this.curX;\n      regNode['notY'] = this.curY;\n      this.curX = this.curX + 10;\n    }\n\n    regNode['x'] = this.curX;\n    regNode['y'] = this.curY;\n\n    if (regNode['selected']) {\n      regNode['x1Selected'] = this.curX;\n      regNode['x2Selected'] = this.curX + 30;\n      regNode['ySelected'] = this.curY + 40;\n    }\n\n    this.curX = this.curX + 45;\n\n    if ('upper' in regNode && regNode['upper']) {\n      regNode['xUpper'] = this.curX - 10;\n      regNode['yUpper'] = this.curY;\n      this.curX = this.curX + 15;\n    }\n\n    if ('repeat' in regNode) {\n      if (regNode['repeat'][0] != 1 || regNode['repeat'][1] != 1) {\n        regNode['xRepeat'] = this.curX - 10;\n        regNode['yRepeat'] = this.curY;\n        this.curX = this.curX + 20;\n      }\n    }\n  },\n  computeTargetKey: function computeTargetKey(d) {\n    return 'target' + d;\n  },\n  commitRegex: function commitRegex() {\n    this.UPDATE_REGEX_COMMIT_STATE(this.regularExpression);\n\n    if ('regexName' in this.regularExpression) {\n      this.commitName = this.regularExpression['regexName'];\n    }\n\n    if ('regexDescription' in this.regularExpression) {\n      this.commitDescription = this.regularExpression['regexDescription'];\n    }\n\n    this.commitDialogVisible = true;\n  },\n  updateRepeat: function updateRepeat() {\n    this.dialogVisible = false;\n\n    if ('branchRepeat' in this.selectedRepeatDom) {\n      this.selectedRepeatDom['branchRepeat'][0] = parseInt(this.repeatMin);\n\n      if (this.repeatMax == '*') {\n        this.selectedRepeatDom['branchRepeat'][1] = '*';\n      } else {\n        this.selectedRepeatDom['branchRepeat'][1] = parseInt(this.repeatMax);\n      }\n\n      this.selectedRepeatDom['branchUpper'] = false;\n    } else {\n      this.selectedRepeatDom['repeat'][0] = parseInt(this.repeatMin);\n\n      if (this.repeatMax == '*') {\n        this.selectedRepeatDom['repeat'][1] = '*';\n      } else {\n        this.selectedRepeatDom['repeat'][1] = parseInt(this.repeatMax);\n      }\n\n      this.selectedRepeatDom['upper'] = false;\n    }\n\n    this.positionCompute();\n    this.contentCompute();\n    this.updateKey = (this.updateKey + 1) % 2;\n  },\n  resetDom: function resetDom() {\n    if (this.regularExpression['target']['composition'][0]['type'] == 'path') {\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0]);\n    } else if (this.regularExpression['target']['composition'][0]['type'] == 'wholeTree') {\n      if ('elementComposition' in this.regularExpression['target']['composition'][0]) {\n        this.UPDATE_LAST_DOM(null);\n      } else {\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0]);\n      }\n    }\n\n    this.UPDATE_NODE_DEFINITION_STATE();\n    this.RESET_DOM_KEY_STATE();\n    this.updateKey = (this.updateKey + 1) % 2;\n  },\n  contentCompute: function contentCompute() {\n    // this.commitDialogVisible = false\n    // this.regularExpression['regexName'] = this.commitName\n    // this.regularExpression['regexDescription'] = this.commitDescription\n    this.regexContent = '';\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = this.regularExpression['target']['composition'][0]['composition'][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var _item2 = _step5.value;\n\n        if (_item2['type'] == 'node') {\n          this.nodeContent(_item2); //this.regexContent = this.regexContent + ' '\n        } else if (_item2['type'] == 'path') {\n          this.pathContent(_item2); //this.regexContent = this.regexContent + ' '\n        } else if (_item2['type'] == 'or') {\n          this.orContent(_item2); //this.regexContent = this.regexContent + ' '\n        } else if (_item2['type'] == 'branch') {\n          this.branchContent(_item2); //this.regexContent = this.regexContent + ' '\n        }\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n\n    if ('elementComposition' in this.regularExpression['target']['composition'][0]) {\n      var tmpLength = this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length + this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length;\n      var tmpIndex = 0;\n\n      if (tmpLength > 0) {\n        this.regexContent = this.regexContent + ' || ';\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var item = _step6.value;\n            this.regexContent = this.regexContent + '∃';\n            this.pathContent(item);\n\n            if (tmpIndex < tmpLength - 1) {\n              this.regexContent = this.regexContent + ',';\n              tmpIndex = tmpIndex + 1;\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var _item = _step7.value;\n            this.regexContent = this.regexContent + '∀';\n            this.pathContent(_item);\n\n            if (tmpIndex < tmpLength - 1) {\n              this.regexContent = this.regexContent + ',';\n              tmpIndex = tmpIndex + 1;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      }\n    }\n\n    this.regularExpression['regexContent'] = this.regexContent;\n    console.log(\"regexContent\", this.regexContent); // this.ADD_REGEX_LIST(this.regularExpression)\n  },\n  nodeContent: function nodeContent(regexNode) {\n    if ('notFlag' in regexNode && regexNode['notFlag']) {\n      this.regexContent = this.regexContent + '!';\n    }\n\n    this.regexContent = this.regexContent + 'N';\n\n    if (regexNode['repeat'][0] != 1 || regexNode['repeat'][1] != 1) {\n      this.regexContent = this.regexContent + '(';\n      this.regexContent = this.regexContent + regexNode['repeat'][0];\n      this.regexContent = this.regexContent + ',';\n      this.regexContent = this.regexContent + regexNode['repeat'][1];\n      this.regexContent = this.regexContent + ')';\n    }\n  },\n  pathContent: function pathContent(regexPath) {\n    if ('bracket' in regexPath && regexPath['bracket']) {\n      this.regexContent = this.regexContent + '(';\n    }\n\n    for (var i = 0; i < regexPath['composition'].length; i++) {\n      if (regexPath['composition'][i]['type'] == 'node') {\n        this.nodeContent(regexPath['composition'][i]);\n      } else if (regexPath['composition'][i]['type'] == 'path') {\n        this.pathContent(regexPath['composition'][i]);\n      } else if (regexPath['composition'][i]['type'] == 'or') {\n        this.orContent(regexPath['composition'][i]);\n      }\n\n      if (i < regexPath['composition'].length - 1) {//this.regexContent = this.regexContent + ' '\n      }\n    }\n\n    if ('bracket' in regexPath && regexPath['bracket']) {\n      this.regexContent = this.regexContent + ')';\n    }\n\n    if ('repeat' in regexPath) {\n      if (regexPath['repeat'][0] != 1 || regexPath['repeat'][1] != 1) {\n        this.regexContent = this.regexContent + '(';\n        this.regexContent = this.regexContent + regexPath['repeat'][0];\n        this.regexContent = this.regexContent + ',';\n        this.regexContent = this.regexContent + regexPath['repeat'][1];\n        this.regexContent = this.regexContent + ')';\n      }\n    }\n  },\n  orContent: function orContent(regexOr) {\n    this.regexContent = this.regexContent + '(';\n\n    for (var i = 0; i < regexOr['composition'].length; i++) {\n      if (regexOr['composition'][i]['type'] == 'node') {\n        this.nodeContent(regexOr['composition'][i]);\n      } else if (regexOr['composition'][i]['type'] == 'path') {\n        this.pathContent(regexOr['composition'][i]);\n      } else if (regexOr['composition'][i]['type'] == 'or') {\n        this.orContent(regexOr['composition'][i]);\n      }\n\n      if (i < regexOr['composition'].length - 1) {\n        this.regexContent = this.regexContent + '|';\n      }\n    }\n\n    this.regexContent = this.regexContent + ')';\n\n    if ('repeat' in regexOr) {\n      if (regexOr['repeat'][0] != 1 || regexOr['repeat'][1] != 1) {\n        this.regexContent = this.regexContent + '(';\n        this.regexContent = this.regexContent + regexOr['repeat'][0];\n        this.regexContent = this.regexContent + ',';\n        this.regexContent = this.regexContent + regexOr['repeat'][1];\n        this.regexContent = this.regexContent + ')';\n      }\n    }\n  },\n  branchContent: function branchContent(regexBranch) {\n    this.regexContent = this.regexContent + '[';\n\n    for (var i = 0; i < regexBranch['composition'].length; i++) {\n      this.regexContent = this.regexContent + '<';\n\n      if (regexBranch['composition'][i]['type'] == \"or\") {\n        this.orContent(regexBranch['composition'][i]);\n      } else if (regexBranch['composition'][i]['type'] == \"path\") {\n        this.pathContent(regexBranch['composition'][i]);\n      } else if (regexBranch['composition'][i]['type'] == \"node\") {\n        this.nodeContent(regexBranch['composition'][i]);\n      }\n\n      this.regexContent = this.regexContent + '>';\n\n      if ('branchRepeat' in regexBranch['composition'][i]) {\n        if (regexBranch['composition'][i]['branchRepeat'][0] != 1 || regexBranch['composition'][i]['branchRepeat'][1] != 1) {\n          this.regexContent = this.regexContent + '(';\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][0];\n          this.regexContent = this.regexContent + ',';\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][1];\n          this.regexContent = this.regexContent + ')';\n        }\n      }\n\n      if (i < regexBranch['composition'].length - 1) {\n        this.regexContent = this.regexContent + ',';\n      }\n    }\n\n    this.regexContent = this.regexContent + ']';\n  },\n  deleteRegex: function deleteRegex() {\n    if (this.selectedDom['type'] == 'elementComposition') {\n      this.selectedDom['exist'] = {};\n      this.selectedDom['all'] = {};\n    } else {\n      this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1);\n    }\n\n    this.RESET_DOM_KEY_STATE();\n    this.positionCompute();\n    this.contentCompute();\n    this.updateKey = (this.updateKey + 1) % 2;\n  }\n})), _name$components$prop);",{"version":3,"sources":["RECanvas.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"re-canvas-div\">\n  <svg class=\"re-canvas\" ref=\"canvas\" :key=\"updateKey\">\n    <rect class=\"re-cover\" @click=\"resetDom\"></rect>\n    <g v-for=\"(item, index) in regularExpression['target']['composition']\" :key=\"computeTargetKey(index)\">\n      <g v-if=\"item['type']=='node'\">\n        <RENode :nodeExpression=\"item\" :key=\"item.key\"></RENode>\n      </g>\n      <g v-if=\"item['type']=='or'\">\n        <REOr :orExpression=\"item\" :key=\"item.key\"></REOr>\n      </g>\n      <g v-if=\"item['type']=='path'\">\n        <REPath :pathExpression=\"item\" :key=\"item.key\"></REPath>\n      </g>\n      <g v-if=\"item['type']=='wholeTree'\">\n        <REWholeTree :wholeTreeExpression=\"item\" :key=\"item.key\"></REWholeTree>\n      </g>\n    </g>\n  </svg>\n  \n  <el-dialog\n    title=\"Commit\"\n    :visible.sync=\"commitDialogVisible\"\n    width=\"20%\"\n   >\n    <el-row>\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: center\">name:</el-col>\n      <el-col :span=\"8\"><el-input v-model=\"commitName\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <el-row >\n      <el-col :span=\"8\" style=\"font-size: 20px\">description:</el-col>\n      <el-col :span=\"8\"><el-input v-model=\"commitDescription\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <span slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"commitDialogVisible = false\">取 消</el-button>\n      <el-button type=\"primary\" @click=\"updateRegexList()\">确 定</el-button>\n    </span>\n  </el-dialog>\n\n  <el-dialog\n    title=\"Repeat\"\n    :visible.sync=\"dialogVisible\"\n    width=\"20%\"\n   >\n    <el-row>\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: right; line-height: 20px; margin-top: 2px\">start:</el-col>\n      <el-col :span=\"10\" :offset=\"1\"><el-input v-model=\"repeatMin\" placeholder=\"\"></el-input></el-col>\n    </el-row>\n    <el-row >\n      <el-col :span=\"8\" style=\"font-size: 20px; text-align: right;line-height: 20px; margin-top: 2px\">end:</el-col>\n      <el-col :span=\"10\" :offset=\"1\"><el-input v-model=\"repeatMax\" placeholder=\"\" ></el-input></el-col>\n    </el-row>\n    <span slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"dialogVisible=false\" style=\"padding:5px 5px 5px 5px\">cancel</el-button>\n      <el-button @click=\"updateRepeat()\" style=\"padding:5px 5px 5px 5px\">submit</el-button>\n    </span>\n  </el-dialog>\n\n</div>\n  \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REWholeTree from '@/views/REView/REComponents/REWholeTree.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n    import { getComponentKey } from '@/utils/componentkey.js'\n    import { simpleStringify } from '@/utils/stringify.js'\n\nexport default {\n  name: 'RECanvas',\n  components: {\n    RENode,\n    REPath,\n    REWholeTree,\n    REOr\n  },\n  props: {\n    regularExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n      curX: 40,\n      curY: 80,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      sympolList: [\n        {\n          type: null,\n          x: 0,\n          y:0,\n          height: 0,\n          width: 0\n        }\n      ],\n      dialogVisible: false,\n      repeatMin:'',\n      repeatMax:'',\n      updateKey: 0,\n      commitDialogVisible: false,\n      commitName:'',\n      commitDescription:'',\n      commitContent:'',\n      regexContent: '',\n    }\n  },\n  beforeMount() {\n    this.positionCompute()\n    this.contentCompute()\n  },\n  mounted() {\n    this.positionCompute()\n    this.contentCompute()\n    this.initCanvasParas()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      reTreeDataState: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      curRegexIndex: function() {\n        this.positionCompute()\n        this.contentCompute()\n      },\n      selectedRepeatDomState: function(){\n\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.repeatMin = this.selectedRepeatDom['branchRepeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['branchRepeat'][1] + ''\n      }\n      else{\n        this.repeatMin = this.selectedRepeatDom['repeat'][0] + ''\n        this.repeatMax = this.selectedRepeatDom['repeat'][1] + ''\n      }\n      this.dialogVisible = true\n\n      },\n      selectedPartState: function(){\n        this.positionCompute()\n        this.contentCompute()\n      }\n  },\n  beforeMount(){\n    \n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'reTreeDataState',\n      'selectedRepeatDom',\n      'selectedRepeatDomState',\n      'lastDom',\n      'curRegex',\n      'regexCommitState',\n      'selectedDom',\n      'selectedPartState',\n      'curRegexIndex'\n    ]),\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_REGEX_COMMIT_STATE',\n      'RESET_DOM_KEY_STATE',\n      'UPDATE_LAST_DOM',\n      'ADD_REGEX_LIST',\n      'UPDATE_NODE_DEFINITION_STATE'\n    ]),\n    initCanvasParas(){\n      this.canvasWidth = this.$refs.canvas.clientWidth\n      this.canvasHeight = this.$refs.canvas.clientHeight\n    },\n    positionCompute(){ \n          if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        if((this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length)+ \n          (this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length)>0)\n            this.UPDATE_LAST_DOM(null)\n        else{\n          this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n        }\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }    \n      this.curX = 40\n      this.curY = 80\n      for(var i=0; i<this.regularExpression['target']['composition'].length; i++){\n        if(this.regularExpression['target']['composition'][i]['type']==\"node\"){\n          this.nodeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          this.regularExpression['target']['composition'][i]['key'] = getComponentKey()\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"path\"){\n          this.pathCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n          for(let tmpNode of this.regularExpression['target']['composition'][i]['composition']){\n            tmpNode['parent'] = this.regularExpression['target']['composition'][i]\n          }\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"or\"){\n          this.orCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n        else if(this.regularExpression['target']['composition'][i]['type']==\"wholeTree\"){\n          this.wholeTreeCompute(this.regularExpression['target']['composition'][i])\n          this.regularExpression['target']['composition'][i]['parent'] = this.regularExpression['target']\n          this.regularExpression['target']['composition'][i]['index'] = i\n        }\n      }\n      console.log('this.regularExpression11', JSON.parse(simpleStringify(this.regularExpression)))\n      // console.log('force update')\n      // console.log('regularExpression', this.regularExpression)\n      this.$forceUpdate()\n    },\n    wholeTreeCompute(regWholeTree){\n      for(var i=0; i<regWholeTree['composition'].length; i++){\n        regWholeTree['composition'][i]['index'] = i\n        if(regWholeTree['composition'][i]['type'] == \"or\"){\n          this.orCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regWholeTree['composition'][i])\n        }\n        else if(regWholeTree['composition'][i]['type'] == \"branch\"){\n          this.branchCompute(regWholeTree['composition'][i])\n        }\n      }\n      if('elementComposition' in regWholeTree){\n        this.elementCompositionCompute(regWholeTree['elementComposition'])\n      }\n    },\n    branchCompute(regBranch){\n      var beginX = this.curX\n      var beginY = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      var maxX = 0\n\n      regBranch['x1Bracket'] = beginX+10\n      regBranch['y1Bracket'] = this.curY+15-(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      regBranch['x2Bracket'] = beginX+10\n      regBranch['y2Bracket'] = this.curY+15+(regBranch['composition'].length*30+(regBranch['composition'].length-1)*15)/2\n      beginX = beginX + 20\n\n      if(regBranch['selected']){\n          regBranch['x1Selected'] = this.curX\n          regBranch['ySelected'] = this.curY + 40\n      }\n\n      for(var item of regBranch['composition']){\n        this.curX = beginX\n        this.curY = beginY\n        item['x1LeftBranchBracket'] = this.curX+5\n        item['y1LeftBranchBracket'] = this.curY\n        item['x2LeftBranchBracket'] = this.curX+5\n        item['y2LeftBranchBracket'] = this.curY+30\n        this.curX = this.curX + 15\n        if(item['selected']){\n          item['x1Selected'] = this.curX\n          item['ySelected'] = this.curY + 40\n        }\n        if(item['type'] == \"or\"){\n          item['branch'] = true\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          item['branch'] = true\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          item['branch'] = true\n          this.nodeCompute(item)\n        }\n        if(item['selected']){\n          item['x2Selected'] = this.curX - 15\n        }\n        item['x1RightBranchBracket'] = this.curX-5\n        item['y1RightBranchBracket'] = this.curY\n        item['x2RightBranchBracket'] = this.curX-5\n        item['y2RightBranchBracket'] = this.curY+30\n        this.curX = this.curX + 10\n        if('branchRepeat' in item){      \n          if(item['branchRepeat'][0] !=1 || item['branchRepeat'][1] !=1){\n            item['xBranchRepeat'] = this.curX\n            item['yBranchRepeat'] = this.curY\n            this.curX = this.curX + 20\n          }\n        }\n        if('branchUpper' in item && item['branchUpper']){\n          item['xBranchUpper'] = this.curX\n          item['yBranchUpper'] = this.curY\n          this.curX = this.curX + 15\n        }\n        this.curX = this.curX + 10\n\n        if(this.curX>maxX){\n          maxX = this.curX\n        }\n        beginY = beginY + 45\n      }\n      if(regBranch['selected']){\n        regBranch['x2Selected'] = maxX - 10\n      }\n      this.curX = maxX\n      this.curY = 80\n      regBranch.key = getComponentKey()\n    },\n    elementCompositionCompute(regElementComposition){\n      var tmpLength = regElementComposition['exist']['composition'].length + regElementComposition['all']['composition'].length\n      var beginX = this.curX\n      var beginY = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      var maxX = 0\n\n      regElementComposition['x1'] = beginX\n      regElementComposition['y1'] = this.curY+15-(tmpLength*30+(tmpLength-1)*15)/2\n      regElementComposition['x2'] = beginX\n      regElementComposition['y2'] = this.curY+15+(tmpLength*30+(tmpLength-1)*15)/2\n      beginX = beginX + 15\n      \n      if(regElementComposition['exist']['composition'].length > 0){\n        for(var item of regElementComposition['exist']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xExist'] = this.curX\n          item['yExist'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      if(regElementComposition['all']['composition'].length > 0){\n        for(var item of regElementComposition['all']['composition']){\n          this.curX = beginX\n          this.curY = beginY\n          item['xAll'] = this.curX\n          item['yAll'] = this.curY\n          this.curX = this.curX + 20\n          \n\n        if(item['type'] == \"or\"){\n          this.orCompute(item)\n        }\n        else if(item['type'] == \"path\"){\n          this.pathCompute(item)\n        }\n        else if(item['type'] == \"node\"){\n          this.nodeCompute(item)\n        }\n        if(this.curX>maxX){\n            maxX = this.curX\n          }          \n          beginY = beginY + 45\n        }\n      }\n      this.curX = maxX\n      this.curY = 80\n      regElementComposition.key = getComponentKey()\n    },\n    orCompute(regOr){\n      if('or' in regOr){\n        delete regOr['or']\n        delete regOr['xOr']\n        delete regOr['yOr']\n      }\n      regOr['x1LeftBracket'] = this.curX+7\n      regOr['y1LeftBracket'] = this.curY\n      regOr['x2LeftBracket'] = this.curX+7\n      regOr['y2LeftBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if(regOr['selected']){\n        regOr['x1Selected'] = this.curX\n        regOr['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i<regOr['composition'].length; i++){\n        regOr['composition'][i]['index'] = i\n        if(regOr['composition'][i]['type'] == \"or\"){\n          this.orCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"path\"){\n          regOr['composition'][i]['bracket'] = true\n          this.pathCompute(regOr['composition'][i])\n        }\n        else if(regOr['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regOr['composition'][i])\n        }\n        if(i<regOr['composition'].length-1){\n          regOr['composition'][i]['or'] = true\n          regOr['composition'][i]['xOr'] = this.curX\n          regOr['composition'][i]['yOr'] = this.curY\n          this.curX = this.curX +  15\n        }\n      }\n      if(regOr['selected']){\n        regOr['x2Selected'] = this.curX - 15\n      }\n      regOr['x1RightBracket'] = this.curX-7\n      regOr['y1RightBracket'] = this.curY\n      regOr['x2RightBracket'] = this.curX-7\n      regOr['y2RightBracket'] = this.curY+30\n      this.curX = this.curX+15\n      if('upper' in regOr && regOr['upper']){\n        regOr['xUpper'] = this.curX-10\n        regOr['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regOr){\n          if(regOr['repeat'][0] !=1 || regOr['repeat'][1] !=1){\n          regOr['xRepeat'] = this.curX-15\n          regOr['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regOr.key = getComponentKey()\n    },\n    pathCompute(regPath) {\n      if('or' in regPath){\n        delete regPath['or']\n        delete regPath['xOr']\n        delete regPath['yOr']\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1LeftBracket'] = this.curX+7\n          regPath['y1LeftBracket'] = this.curY\n          regPath['x2LeftBracket'] = this.curX+7\n          regPath['y2LeftBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if(regPath['selected']){\n        regPath['x1Selected'] = this.curX\n        regPath['ySelected'] = this.curY + 40\n      }\n      for(var i=0; i < regPath['composition'].length; i++){\n        regPath['composition'][i]['index'] = i\n        if(regPath['composition'][i]['type'] == \"or\"){\n          this.orCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"path\"){\n          this.pathCompute(regPath['composition'][i])\n        }\n        else if(regPath['composition'][i]['type'] == \"node\"){\n          this.nodeCompute(regPath['composition'][i])\n        }\n      }\n      if(regPath['selected']){\n        regPath['x2Selected'] = this.curX - 15\n      }\n      if('bracket' in regPath && regPath['bracket']){\n          regPath['x1RightBracket'] = this.curX-7\n          regPath['y1RightBracket'] = this.curY\n          regPath['x2RightBracket'] = this.curX-7\n          regPath['y2RightBracket'] = this.curY+30\n          this.curX = this.curX+15\n      }\n      if('upper' in regPath && regPath['upper']){\n        regPath['xUpper'] = this.curX-10\n        regPath['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regPath){\n        if(regPath['repeat'][0] != 1 || regPath['repeat'][1] != 1){\n          regPath['xRepeat'] = this.curX-15\n          regPath['yRepeat'] = this.curY\n          this.curX = this.curX + 15\n        }\n      }\n      regPath.key = getComponentKey()\n    },\n    // nodesCompute(regNodes){\n    //   for(var Node of regNodes['nodes']){\n    //     this.nodeCompute(Node)\n    //   }\n    //   if(regNodes['repeat'][0]!=1 || regNodes['repeat'][1]!=1){\n    //     regNodes['x']=this.curX-35\n    //     regNodes['y']=this.curY-15\n    //     this.curX = this.curX + 10\n    //   }\n    // },\n    nodeCompute(regNode) {   \n      if('or' in regNode){\n        delete regNode['or']\n        delete regNode['xOr']\n        delete regNode['yOr']\n      }\n      if('notFlag' in regNode && regNode['notFlag']){\n        regNode['notX'] = this.curX\n        regNode['notY'] = this.curY\n        this.curX = this.curX + 10\n      }\n      regNode['x']=this.curX\n      regNode['y']=this.curY\n      if(regNode['selected']){\n        regNode['x1Selected'] = this.curX\n        regNode['x2Selected'] = this.curX + 30\n        regNode['ySelected'] = this.curY + 40\n      }\n      this.curX = this.curX + 45\n      if('upper' in regNode && regNode['upper']){\n        regNode['xUpper'] = this.curX-10\n        regNode['yUpper'] = this.curY\n        this.curX = this.curX + 15\n      }\n      if('repeat' in regNode){\n        if(regNode['repeat'][0] !=1 || regNode['repeat'][1] !=1){\n          regNode['xRepeat'] = this.curX-10\n          regNode['yRepeat'] = this.curY\n          this.curX = this.curX + 20\n        }\n      }\n    },\n    computeTargetKey(d) {\n      return 'target' + d\n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE(this.regularExpression)\n      if('regexName' in this.regularExpression){\n        this.commitName = this.regularExpression['regexName']\n      }\n      if('regexDescription' in this.regularExpression){\n        this.commitDescription = this.regularExpression['regexDescription']\n      }\n      this.commitDialogVisible = true\n    },\n    updateRepeat(){\n      this.dialogVisible = false\n      if('branchRepeat' in this.selectedRepeatDom){\n        this.selectedRepeatDom['branchRepeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['branchRepeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['branchRepeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['branchUpper'] = false\n      }\n      else{\n        this.selectedRepeatDom['repeat'][0] = parseInt(this.repeatMin)\n        if(this.repeatMax == '*'){\n          this.selectedRepeatDom['repeat'][1] = '*'\n        }\n        else{\n          this.selectedRepeatDom['repeat'][1] = parseInt(this.repeatMax) \n        }\n        this.selectedRepeatDom['upper'] = false\n      }\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    resetDom(){\n      if(this.regularExpression['target']['composition'][0]['type'] == 'path'){\n      this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n    }\n    else if(this.regularExpression['target']['composition'][0]['type'] == 'wholeTree'){\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        this.UPDATE_LAST_DOM(null)\n      }\n      else{\n        this.UPDATE_LAST_DOM(this.regularExpression['target']['composition'][0])\n      }\n    }\n      this.UPDATE_NODE_DEFINITION_STATE()\n      this.RESET_DOM_KEY_STATE()\n      this.updateKey = (this.updateKey+1)%2\n    },\n    contentCompute(){\n      // this.commitDialogVisible = false\n      // this.regularExpression['regexName'] = this.commitName\n      // this.regularExpression['regexDescription'] = this.commitDescription\n      this.regexContent = ''\n      for(let item of this.regularExpression['target']['composition'][0]['composition']){\n        if(item['type'] == 'node'){\n          this.nodeContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'path'){\n          this.pathContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'or'){\n          this.orContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n        else if(item['type'] == 'branch'){\n          this.branchContent(item)\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('elementComposition' in this.regularExpression['target']['composition'][0]){\n        let tmpLength = this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition'].length \n            + this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition'].length\n        let tmpIndex = 0\n        if(tmpLength>0){\n              this.regexContent = this.regexContent + ' || '\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['exist']['composition']){\n                this.regexContent = this.regexContent + '∃'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n              for(let item of this.regularExpression['target']['composition'][0]['elementComposition']['all']['composition']){\n                this.regexContent = this.regexContent + '∀'\n                this.pathContent(item)\n                if(tmpIndex < tmpLength-1){\n                  this.regexContent = this.regexContent + ','\n                  tmpIndex = tmpIndex + 1\n                }\n              }\n            } \n      }\n      this.regularExpression['regexContent'] = this.regexContent\n      console.log(\"regexContent\",this.regexContent)\n      // this.ADD_REGEX_LIST(this.regularExpression)\n    },\n    nodeContent(regexNode){\n      if('notFlag' in regexNode && regexNode['notFlag']){\n        this.regexContent = this.regexContent + '!'\n      }\n      this.regexContent = this.regexContent + 'N'\n      if(regexNode['repeat'][0] !=1 || regexNode['repeat'][1] != 1){\n        this.regexContent = this.regexContent + '('\n        this.regexContent = this.regexContent + regexNode['repeat'][0]\n        this.regexContent = this.regexContent + ','\n        this.regexContent = this.regexContent + regexNode['repeat'][1]\n        this.regexContent = this.regexContent + ')'\n      }\n    },\n    pathContent(regexPath){\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + '('\n      }\n      for(let i=0; i < regexPath['composition'].length; i++)\n      {\n        if(regexPath['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'path'){\n            this.pathContent(regexPath['composition'][i])\n        }\n        else if(regexPath['composition'][i]['type'] == 'or'){\n            this.orContent(regexPath['composition'][i])\n        }\n        if(i<regexPath['composition'].length-1){\n          //this.regexContent = this.regexContent + ' '\n        }\n      }\n      if('bracket' in regexPath && regexPath['bracket']){\n        this.regexContent = this.regexContent + ')'\n      }\n      if('repeat' in regexPath){\n        if(regexPath['repeat'][0] != 1 || regexPath['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexPath['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexPath['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },  \n    orContent(regexOr){\n      this.regexContent = this.regexContent + '('\n      for(let i=0; i < regexOr['composition'].length; i++){\n        if(regexOr['composition'][i]['type'] == 'node'){\n            this.nodeContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'path'){\n            this.pathContent(regexOr['composition'][i])\n        }\n        else if(regexOr['composition'][i]['type'] == 'or'){\n            this.orContent(regexOr['composition'][i])\n        }\n        if(i<regexOr['composition'].length-1){\n          this.regexContent = this.regexContent + '|'\n        }\n      }\n      this.regexContent = this.regexContent + ')'\n      if('repeat' in regexOr){\n        if(regexOr['repeat'][0] != 1 || regexOr['repeat'][1] != 1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexOr['repeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexOr['repeat'][1]\n          this.regexContent = this.regexContent + ')'\n        }\n      }\n    },\n    branchContent(regexBranch){\n      this.regexContent = this.regexContent + '['\n      for(let i=0; i < regexBranch['composition'].length; i++){\n        this.regexContent = this.regexContent + '<'\n        if(regexBranch['composition'][i]['type'] == \"or\"){\n          this.orContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"path\"){\n          this.pathContent(regexBranch['composition'][i])\n        }\n        else if(regexBranch['composition'][i]['type'] == \"node\"){\n          this.nodeContent(regexBranch['composition'][i])\n        }\n        this.regexContent = this.regexContent + '>'\n        if('branchRepeat' in regexBranch['composition'][i]){      \n          if(regexBranch['composition'][i]['branchRepeat'][0] !=1 || regexBranch['composition'][i]['branchRepeat'][1] !=1){\n          this.regexContent = this.regexContent + '('\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][0]\n          this.regexContent = this.regexContent + ','\n          this.regexContent = this.regexContent + regexBranch['composition'][i]['branchRepeat'][1]\n          this.regexContent = this.regexContent + ')'\n          }\n        }\n        if(i<regexBranch['composition'].length-1){\n          this.regexContent = this.regexContent + ','\n        }\n      }\n      this.regexContent = this.regexContent + ']'\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {}\n          this.selectedDom['all'] = {}\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.positionCompute()\n      this.contentCompute()\n      this.updateKey = (this.updateKey+1)%2\n    }\n  \n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-canvas-div{\n  height: 100%;\n  width: 100%;\n  overflow-x: scroll;\n  overflow-y: scroll;\n  .re-canvas {\n    height: 100%;\n    width: 100%;\n  .re-cover{\n      height: 100%;\n      width: 100%;\n      opacity: 0;\n  }\n}\n}\n.commit-button{\n    border: 1px #ddd bold;\n    font-size: 16px;\n    text-align: center !important;\n    margin-top: 5px;\n    height: 28px !important;\n    line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    position: absolute;\n    bottom: 6% !important;\n    right: 2% !important;\n\n}\n.delete-button{\n    border: 1px #ddd bold;\n    font-size: 16px;\n    text-align: center !important;\n    margin-top: 5px;\n    height: 28px !important;\n    line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    position: absolute;\n    bottom: 6% !important;\n    right: 150px !important;\n\n}\n</style>\n<style scoped lang=\"less\">\n  .el-row {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n  .el-col {\n    border-radius: 4px;\n  }\n  .bg-purple-dark {\n    background: #99a9bf;\n  }\n  .bg-purple {\n    background: #d3dce6;\n  }\n  .bg-purple-light {\n    background: #e5e9f2;\n  }\n  .grid-content {\n    border-radius: 4px;\n    min-height: 36px;\n  }\n  .row-bg {\n    padding: 10px 0;\n    background-color: #f9fafc;\n  }\n  /deep/.el-input__inner {\n        line-height: 26px !important;\n        height: 26px !important;\n  }\n</style>\n"],"sourceRoot":"src/views/REView"}]}
{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponent.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.repeat\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport { getComponentKey } from '@/utils/componentkey.js';\nimport REComponentTitle from '@/views/REView/REComponentTitle.vue';\nexport default {\n  name: 'REComponent',\n  components: {\n    REComponentTitle: REComponentTitle\n  },\n  props: {},\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {},\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'selectedDom', 'lastDom', 'curRegexIndex'])),\n  methods: _objectSpread({}, mapMutations(['UPDATE_RETREE_DATA_STATE', 'UPDATE_SELECTED_DOM', 'RESET_DOM_KEY_STATE', 'UPDATE_REVIEW_DATA', 'UPDATE_REGEX_COMMIT_STATE', 'UPDATE_REGEX_CONTENT']), {\n    concatClick: function concatClick(d) {\n      if (this.selectedDom) {\n        if (this.selectedDom['parent']['type'] == 'path') {\n          var tmpIndex = this.selectedDom['index'];\n          var tmpNode = this.newNode();\n          tmpNode['parent'] = this.selectedDom['parent'];\n          this.selectedDom['parent']['composition'].splice(tmpIndex + 1, 0, tmpNode);\n        } else if (this.selectedDom['parent']['type'] == 'wholeTree') {\n          var tmpIndex = this.selectedDom['index'];\n          var tmpNode = this.newNode();\n          tmpNode['parent'] = this.selectedDom['parent'];\n          this.selectedDom['parent']['composition'].splice(tmpIndex + 1, 0, tmpNode);\n        } else if (this.selectedDom['parent']['type'] == 'or') {\n          var tmpIndex = this.selectedDom['index'];\n          var tmpPath = this.newPath();\n          this.selectedDom['parent']['composition'].splice(tmpIndex, 1, tmpPath);\n          tmpPath['composition'].splice(0, 0, this.selectedDom);\n          tmpPath['parent'] = this.selectedDom['parent'];\n          this.selectedDom['parent'] = tmpPath;\n        }\n      } else {\n        if (this.lastDom) {\n          var tmpNode = this.newNode();\n          tmpNode['parent'] = this.lastDom;\n          this.lastDom['composition'].push(tmpNode);\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    upperClick: function upperClick() {\n      if (this.selectedDom) {\n        if ('branchUpper' in this.selectedDom) {\n          if (this.selectedDom['branchRepeat'][1] == 1 && this.selectedDom['branchRepeat'][0] == 1) {\n            this.selectedDom['branchUpper'] = true;\n          }\n        } else if (this.selectedDom['repeat'][1] == 1 && this.selectedDom['repeat'][0] == 1) this.selectedDom['upper'] = true;\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    orClick: function orClick() {\n      if (this.selectedDom) {\n        if (this.selectedDom['parent']['type'] == 'path' || this.selectedDom['parent']['type'] == 'wholeTree') {\n          var tmpOr = this.newOr();\n          tmpOr['parent'] = this.selectedDom['parent'];\n          var tmpIndex = this.selectedDom['index'];\n          this.selectedDom['parent']['composition'].splice(tmpIndex, 1, tmpOr);\n          this.selectedDom['parent'] = tmpOr;\n          var tmpNode = this.newNode();\n          tmpNode['parent'] = tmpOr;\n          tmpOr['composition'].push(this.selectedDom);\n          tmpOr['composition'].push(tmpNode);\n        } else if (this.selectedDom['parent']['type'] == 'or') {\n          var tmpIndex = this.selectedDom['index'];\n          var tmpNode = this.newNode();\n          tmpNode['parent'] = this.selectedDom['parent'];\n          this.selectedDom['parent']['composition'].splice(tmpIndex + 1, 0, tmpNode);\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    notClick: function notClick() {\n      if (this.selectedDom) {\n        if (this.selectedDom['type'] == 'node') {\n          this.selectedDom['notFlag'] = true;\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    branchClick: function branchClick() {\n      if (this.selectedDom) {\n        if (this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target') {\n          if (this.selectedDom['type'] == 'node') {\n            var tmpIndex = this.selectedDom['index'];\n            var tmpBranch = this.newBranch();\n            tmpBranch['parent'] = this.selectedDom['parent'];\n            this.selectedDom['parent']['type'] = 'wholeTree';\n            this.selectedDom['parent']['composition'].splice(tmpIndex, 1, tmpBranch);\n          }\n        }\n\n        if (this.selectedDom['parent']['type'] == 'wholeTree') {\n          if (this.selectedDom['type'] == 'node') {\n            var tmpIndex = this.selectedDom['index'];\n            var tmpBranch = this.newBranch();\n            tmpBranch['parent'] = this.selectedDom['parent'];\n            this.selectedDom['parent']['composition'].splice(tmpIndex, 1, tmpBranch);\n          } else if (this.selectedDom['type'] == 'branch') {\n            var tmpPath = this.newPath();\n            tmpPath['branchUpper'] = true;\n            tmpPath['branchRepeat'] = [1, 1];\n            tmpPath['parent'] = this.selectedDom;\n            this.selectedDom['composition'].push(tmpPath);\n          }\n        }\n      } else {\n        if (this.lastDom) {\n          if (this.lastDom['type'] == 'path') {\n            this.lastDom['type'] = 'wholeTree';\n            var tmpBranch = this.newBranch();\n            tmpBranch['parent'] = this.lastDom;\n            this.lastDom['composition'].push(tmpBranch);\n          } else if (this.lastDom['type'] == 'wholeTree') {\n            var tmpBranch = this.newBranch();\n            tmpBranch['parent'] = this.lastDom;\n            this.lastDom['composition'].push(tmpBranch);\n          }\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    existClick: function existClick() {\n      if (this.selectedDom) {\n        if (this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target') {\n          var tmpWholeTree = this.selectedDom['parent'];\n          tmpWholeTree['type'] = 'wholeTree';\n          tmpWholeTree['elementComposition'] = {};\n          tmpWholeTree['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['upper'] = true;\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']; //tmpPath['repeat'] = [1, '*']\n\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath);\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree;\n          tmpWholeTree['composition'].splice(this.selectedDom['index'], 1);\n        } else if (this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree') {\n          var tmpWholeTree = this.selectedDom['parent'];\n          tmpWholeTree['elementComposition'] = {};\n          tmpWholeTree['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['upper'] = true;\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']; //tmpPath['repeat'] = [1, '*']\n\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath);\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree;\n          tmpWholeTree['composition'].splice(this.selectedDom['index'], 1);\n        } else if (this.selectedDom['type'] == 'elementComposition') {\n          var tmpPath = this.newPath();\n          tmpPath['upper'] = true;\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = this.selectedDom['exist'];\n          this.selectedDom['exist']['composition'].push(tmpPath);\n        }\n      } else if (this.lastDom) {\n        if (this.lastDom['type'] == 'path') {\n          this.lastDom['type'] = 'wholeTree';\n          this.lastDom['elementComposition'] = {};\n          this.lastDom['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['upper'] = true;\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = this.lastDom['elementComposition']['exist']; //tmpPath['repeat'] = [1, '*']\n\n          this.lastDom['elementComposition']['exist']['composition'].push(tmpPath);\n          this.lastDom['elementComposition']['parent'] = this.lastDom;\n        } else if (this.lastDom['type'] == 'wholeTree') {\n          if (!('elementComposition' in this.lastDom)) {\n            this.lastDom['elementComposition'] = {};\n            this.lastDom['elementComposition'] = this.newElementComposition();\n            var tmpPath = this.newPath();\n            tmpPath['upper'] = true;\n            tmpPath['bracket'] = true;\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']; //tmpPath['repeat'] = [1, '*']\n\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath);\n            this.lastDom['elementComposition']['parent'] = this.lastDom;\n          } else if (this.lastDom['elementComposition']['exist']['composition'].length + this.lastDom['elementComposition']['all']['composition'].length == 0) {\n            this.lastDom['elementComposition'] = {};\n            this.lastDom['elementComposition'] = this.newElementComposition();\n            var tmpPath = this.newPath();\n            tmpPath['upper'] = true;\n            tmpPath['bracket'] = true;\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']; //tmpPath['repeat'] = [1, '*']\n\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath);\n            this.lastDom['elementComposition']['parent'] = this.lastDom;\n          }\n\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex);\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    allClick: function allClick() {\n      if (this.selectedDom) {\n        if (this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target') {\n          var tmpWholeTree = this.selectedDom['parent'];\n          tmpWholeTree['type'] = 'wholeTree';\n          tmpWholeTree['elementComposition'] = {};\n          tmpWholeTree['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']; //tmpPath['repeat'] = [1, '*']\n\n          tmpWholeTree['elementComposition']['all']['composition'].push(tmpPath);\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree;\n          tmpWholeTree['composition'].splice(this.selectedDom['index'], 1);\n        } else if (this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree') {\n          var tmpWholeTree = this.selectedDom['parent'];\n          tmpWholeTree['elementComposition'] = {};\n          tmpWholeTree['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']; //tmpPath['repeat'] = [1, '*']\n\n          tmpWholeTree['elementComposition']['exallist']['composition'].push(tmpPath);\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree;\n          tmpWholeTree['composition'].splice(this.selectedDom['index'], 1);\n        } else if (this.selectedDom['type'] == 'elementComposition') {\n          var tmpPath = this.newPath();\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = this.selectedDom['all'];\n          this.selectedDom['all']['composition'].push(tmpPath);\n        }\n      } else if (this.lastDom) {\n        if (this.lastDom['type'] == 'path') {\n          this.lastDom['type'] = 'wholeTree';\n          this.lastDom['elementComposition'] = {};\n          this.lastDom['elementComposition'] = this.newElementComposition();\n          var tmpPath = this.newPath();\n          tmpPath['bracket'] = true;\n          tmpPath['parent'] = this.lastDom['elementComposition']['all']; //tmpPath['repeat'] = [1, '*']\n\n          this.lastDom['elementComposition']['all']['composition'].push(tmpPath);\n          this.lastDom['elementComposition']['parent'] = this.lastDom;\n        } else if (this.lastDom['type'] == 'wholeTree') {\n          if (!('elementComposition' in this.lastDom)) {\n            this.lastDom['elementComposition'] = {};\n            this.lastDom['elementComposition'] = this.newElementComposition();\n            var tmpPath = this.newPath();\n            tmpPath['bracket'] = true;\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']; //tmpPath['repeat'] = [1, '*']\n\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath);\n            this.lastDom['elementComposition']['parent'] = this.lastDom;\n          } else if (this.lastDom['elementComposition']['exist']['composition'].length + this.lastDom['elementComposition']['all']['composition'].length == 0) {\n            this.lastDom['elementComposition'] = {};\n            this.lastDom['elementComposition'] = this.newElementComposition();\n            var tmpPath = this.newPath();\n            tmpPath['bracket'] = true;\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']; //tmpPath['repeat'] = [1, '*']\n\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath);\n            this.lastDom['elementComposition']['parent'] = this.lastDom;\n          }\n\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex);\n        }\n      }\n\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    },\n    anyClick: function anyClick() {\n      if (this.selectedDom['type'] == 'node') {\n        this.selectedDom['definition'] = true;\n        this.selectedDom['nodeName'] = 'Any';\n        this.selectedDom['nodeLabel'] = '.';\n        this.selectedDom['nodeColor'] = '#22CCCC';\n        this.UPDATE_RETREE_DATA_STATE();\n        this.RESET_DOM_KEY_STATE();\n      }\n    },\n    rootClick: function rootClick() {\n      if (this.selectedDom['type'] == 'node') {\n        this.selectedDom['definition'] = true;\n        this.selectedDom['nodeName'] = 'Root';\n        this.selectedDom['nodeLabel'] = '^';\n        this.selectedDom['nodeColor'] = '#CC2222';\n        var tmpDict = {};\n        tmpDict['op'] = '=';\n        tmpDict['value'] = '0';\n        this.selectedDom['data']['height'] = tmpDict;\n        this.UPDATE_RETREE_DATA_STATE();\n        this.RESET_DOM_KEY_STATE();\n      }\n    },\n    leafClick: function leafClick() {\n      if (this.selectedDom['type'] == 'node') {\n        this.selectedDom['definition'] = true;\n        this.selectedDom['nodeName'] = 'Leaf';\n        this.selectedDom['nodeLabel'] = '$';\n        this.selectedDom['nodeColor'] = '#30CC22';\n        var tmpDict = {};\n        tmpDict['op'] = '=';\n        tmpDict['value'] = '0';\n        this.selectedDom['data']['degree'] = tmpDict;\n        this.UPDATE_RETREE_DATA_STATE();\n        this.RESET_DOM_KEY_STATE();\n      }\n    },\n    newNode: function newNode() {\n      var retNode = {};\n      retNode['type'] = 'node';\n      retNode['repeat'] = [1, 1];\n      retNode['data'] = {};\n      retNode['key'] = getComponentKey();\n      return retNode;\n    },\n    newPath: function newPath() {\n      var retPath = {};\n      retPath['type'] = 'path';\n      retPath['repeat'] = [1, 1];\n      retPath['composition'] = [];\n      var tmpNode = this.newNode();\n      tmpNode['parent'] = retPath;\n      retPath['composition'].push(tmpNode);\n      retPath['key'] = getComponentKey();\n      return retPath;\n    },\n    newOr: function newOr() {\n      var retOr = {};\n      retOr['type'] = 'or';\n      retOr['repeat'] = [1, 1];\n      retOr['composition'] = [];\n      retOr['key'] = getComponentKey();\n      return retOr;\n    },\n    newBranch: function newBranch() {\n      var retBranch = {};\n      retBranch['type'] = 'branch';\n      retBranch['composition'] = [];\n      retBranch['key'] = getComponentKey();\n      retBranch['repeat'] = [1, 1];\n      var tmpPath = this.newPath();\n      tmpPath['branchRepeat'] = [1, 1];\n      tmpPath['branchUpper'] = true;\n      tmpPath['parent'] = retBranch;\n      retBranch['composition'].push(tmpPath);\n      return retBranch;\n    },\n    newWholeTree: function newWholeTree() {\n      var retWholeTree = {};\n      retWholeTree['type'] = 'wholeTree';\n      retWholeTree['key'] = getComponentKey();\n      retWholeTree['root'] = {};\n      retWholeTree['root']['parent'] = retWholeTree;\n      retWholeTree['branch'] = this.newBranch();\n      retWholeTree['branch']['parent'] = retWholeTree;\n      return retWholeTree;\n    },\n    newElementComposition: function newElementComposition() {\n      var retElementComposition = {};\n      retElementComposition['type'] = 'elementComposition';\n      retElementComposition['exist'] = {};\n      retElementComposition['exist']['type'] = 'exist';\n      retElementComposition['exist']['composition'] = [];\n      retElementComposition['all'] = {};\n      retElementComposition['all']['type'] = 'all';\n      retElementComposition['all']['composition'] = [];\n      retElementComposition['key'] = getComponentKey();\n      return retElementComposition;\n    },\n    deleteRegex: function deleteRegex() {\n      if (this.selectedDom['type'] == 'elementComposition') {\n        this.selectedDom['exist'] = {\n          \"type\": \"exist\",\n          \"composition\": []\n        };\n        this.selectedDom['all'] = {\n          \"type\": \"all\",\n          \"composition\": []\n        };\n      } else {\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1);\n      }\n\n      this.RESET_DOM_KEY_STATE();\n      this.UPDATE_RETREE_DATA_STATE();\n    },\n    commitRegex: function commitRegex() {\n      this.UPDATE_REGEX_COMMIT_STATE();\n      this.UPDATE_REGEX_CONTENT();\n    },\n    resetRegex: function resetRegex() {\n      sysDatasetObj.resetRegex(this.curRegexIndex);\n      var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex);\n      this.UPDATE_REVIEW_DATA();\n      this.UPDATE_RETREE_DATA_STATE();\n      this.RESET_DOM_KEY_STATE();\n    }\n  })\n};",{"version":3,"sources":["REComponent.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n <div class=\"re-component-view\">\n   <div class=\"re-Icon\">\n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"notClick\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"existClick\"><img src=\"../../assets/JPG/ExistIcon.jpg\"></button>\n        </div>\n        \n        <div class=\"btnIcon\">\n          <button id=\"close-image\" @click=\"allClick\"><img src=\"../../assets/JPG/AllIcon.jpg\"></button>\n        </div>\n    </div>\n    <div class=\"commit-delete-btn\">\n      <svg t=\"1646724215920\" v-on:click=\"deleteRegex\" class=\"delete-button operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3975\" width=\"25\" height=\"25\"><path d=\"M874.666667 241.066667h-202.666667V170.666667c0-40.533333-34.133333-74.666667-74.666667-74.666667h-170.666666c-40.533333 0-74.666667 34.133333-74.666667 74.666667v70.4H149.333333c-17.066667 0-32 14.933333-32 32s14.933333 32 32 32h53.333334V853.333333c0 40.533333 34.133333 74.666667 74.666666 74.666667h469.333334c40.533333 0 74.666667-34.133333 74.666666-74.666667V305.066667H874.666667c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32zM416 170.666667c0-6.4 4.266667-10.666667 10.666667-10.666667h170.666666c6.4 0 10.666667 4.266667 10.666667 10.666667v70.4h-192V170.666667z m341.333333 682.666666c0 6.4-4.266667 10.666667-10.666666 10.666667H277.333333c-6.4 0-10.666667-4.266667-10.666666-10.666667V309.333333h490.666666V853.333333z\" p-id=\"3976\"></path><path d=\"M426.666667 736c17.066667 0 32-14.933333 32-32V490.666667c0-17.066667-14.933333-32-32-32s-32 14.933333-32 32v213.333333c0 17.066667 14.933333 32 32 32zM597.333333 736c17.066667 0 32-14.933333 32-32V490.666667c0-17.066667-14.933333-32-32-32s-32 14.933333-32 32v213.333333c0 17.066667 14.933333 32 32 32z\" p-id=\"3977\"></path></svg>\n      <!-- <el-button class=\"delete-button\" v-on:click=\"deleteRegex\">\n          delete\n      </el-button> -->\n<svg t=\"1646724379273\" v-on:click=\"resetRegex\" class=\"reset-button operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4124\" width=\"25\" height=\"25\"><path d=\"M934.4 206.933333c-17.066667-4.266667-34.133333 6.4-38.4 23.466667l-23.466667 87.466667C797.866667 183.466667 654.933333 96 497.066667 96 264.533333 96 74.666667 281.6 74.666667 512s189.866667 416 422.4 416c179.2 0 339.2-110.933333 398.933333-275.2 6.4-17.066667-2.133333-34.133333-19.2-40.533333-17.066667-6.4-34.133333 2.133333-40.533333 19.2-51.2 138.666667-187.733333 232.533333-339.2 232.533333C298.666667 864 138.666667 706.133333 138.666667 512S300.8 160 497.066667 160c145.066667 0 277.333333 87.466667 330.666666 217.6l-128-36.266667c-17.066667-4.266667-34.133333 6.4-38.4 23.466667-4.266667 17.066667 6.4 34.133333 23.466667 38.4l185.6 49.066667c2.133333 0 6.4 2.133333 8.533333 2.133333 6.4 0 10.666667-2.133333 17.066667-4.266667 6.4-4.266667 12.8-10.666667 14.933333-19.2l49.066667-185.6c0-17.066667-8.533333-34.133333-25.6-38.4z\" p-id=\"4125\"></path></svg>\n      <!-- <el-button class=\"resset-button\" v-on:click=\"resetRegex\">\n          reset\n      </el-button> -->\n\n<!-- <svg t=\"1646723415525\" class=\"commit-icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3134\" width=\"25\" height=\"25\"><path d=\"M874.666667 501.333333c-17.066667 0-32 14.933333-32 32v298.666667c0 6.4-4.266667 10.666667-10.666667 10.666667H192c-6.4 0-10.666667-4.266667-10.666667-10.666667V192c0-6.4 4.266667-10.666667 10.666667-10.666667h469.333333c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32H192C151.466667 117.333333 117.333333 151.466667 117.333333 192v640c0 40.533333 34.133333 74.666667 74.666667 74.666667h640c40.533333 0 74.666667-34.133333 74.666667-74.666667V533.333333c0-17.066667-14.933333-32-32-32z\" p-id=\"3135\"></path><path d=\"M940.8 168.533333c-12.8-12.8-32-12.8-44.8 0l-390.4 384-106.666667-106.666666c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l130.133334 128c6.4 6.4 14.933333 8.533333 23.466666 8.533333s17.066667-2.133333 23.466667-8.533333l411.733333-405.333334c8.533333-10.666667 10.666667-32-2.133333-44.8z\" p-id=\"3136\"></path></svg> -->\n      <svg t=\"1646723957691\" v-on:click=\"commitRegex\" class=\"commit-icon operation\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"3830\" width=\"25\" height=\"25\"><path d=\"M512 74.666667C270.933333 74.666667 74.666667 270.933333 74.666667 512S270.933333 949.333333 512 949.333333 949.333333 753.066667 949.333333 512 753.066667 74.666667 512 74.666667z m0 810.666666c-204.8 0-373.333333-168.533333-373.333333-373.333333S307.2 138.666667 512 138.666667 885.333333 307.2 885.333333 512 716.8 885.333333 512 885.333333z\" p-id=\"3831\"></path><path d=\"M701.866667 381.866667L448 637.866667 322.133333 512c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l149.333334 149.333333c6.4 6.4 14.933333 8.533333 23.466666 8.533334s17.066667-2.133333 23.466667-8.533334l277.333333-277.333333c12.8-12.8 12.8-32 0-44.8-14.933333-12.8-36.266667-12.8-49.066666-2.133333z\" p-id=\"3832\"></path></svg>\n    </div>\n\n                <!-- <div class=\"anyIcon\">\n          <button id=\"close-image\" @click=\"anyClick\"><img src=\"../../assets/JPG/AnyIcon.jpg\"></button>\n        </div>\n                <div class=\"rootIcon\">\n          <button id=\"close-image\" @click=\"rootClick\"><img src=\"../../assets/JPG/RootIcon.jpg\"></button>\n        </div>\n                <div class=\"leafIcon\">\n          <button id=\"close-image\" @click=\"leafClick\"><img src=\"../../assets/JPG/LeafIcon.jpg\"></button>\n        </div> -->\n    <!-- <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"concatIcon\">\n          <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"upperIcon\">\n          <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"orIcon\">\n          <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"notIcon\">\n          <button id=\"close-image\" @click=\"notClick\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"branchIcon\">\n          <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n    \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"elementCompositionIcon\">\n          <button id=\"close-image\" @click=\"existClick\"><img src=\"../../assets/JPG/ExistIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"elementCompositionIcon\">\n          <button id=\"close-image\" @click=\"allClick\"><img src=\"../../assets/JPG/ElementCompositionIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"conditionIcon\">\n          <button id=\"close-image\"><img src=\"../../assets/JPG/ConditionIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row> -->\n  \n    <!-- <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"anyIcon\">\n          <button id=\"close-image\" @click=\"anyClick\"><img src=\"../../assets/JPG/AnyIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n  \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"rootIcon\">\n          <button id=\"close-image\" @click=\"rootClick\"><img src=\"../../assets/JPG/RootIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row>\n  \n    <el-row>\n      <el-col :span=\"24\">    \n        <div class=\"leafIcon\">\n          <button id=\"close-image\" @click=\"leafClick\"><img src=\"../../assets/JPG/LeafIcon.jpg\"></button>\n        </div>\n      </el-col>\n    </el-row> --> \n\n    <!-- <div class=\"concatIcon\">\n    <button id=\"close-image\" @click=\"concatClick\"><img src=\"../../assets/JPG/ConcatIcon.jpg\"></button>\n    </div>\n    <div class=\"upperIcon\">\n    <button id=\"close-image\" @click=\"upperClick\"><img src=\"../../assets/JPG/UpperIcon.jpg\"></button>\n    </div>\n    <div class=\"orIcon\">\n    <button id=\"close-image\" @click=\"orClick\"><img src=\"../../assets/JPG/OrIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"notIcon\">\n    <button id=\"close-image\"><img src=\"../../assets/JPG/NotIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"branchIcon\">\n    <button id=\"close-image\" @click=\"branchClick\"><img src=\"../../assets/JPG/BranchIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"elementCompositionIcon\">\n     <button id=\"close-image\" @click=\"elementCompositionClick\"><img src=\"../../assets/JPG/ElementCompositionIcon.jpg\"></button>\n    </div>\n    \n    <div class=\"conditionIcon\">\n    <button id=\"close-image\"><img src=\"../../assets/JPG/ConditionIcon.jpg\"></button>\n    </div> -->\n\n</div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport { getComponentKey } from '@/utils/componentkey.js'\nimport REComponentTitle from '@/views/REView/REComponentTitle.vue'\n\n\nexport default {\n  name: 'REComponent',\n  components: {\n    REComponentTitle\n  },\n  props: {\n  },\n  data() {\n    return {\n    }\n  },\n  mounted() {\n   \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'lastDom',\n      'curRegexIndex'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n        'UPDATE_RETREE_DATA_STATE',\n        'UPDATE_SELECTED_DOM',\n        'RESET_DOM_KEY_STATE',\n        'UPDATE_REVIEW_DATA',\n        'UPDATE_REGEX_COMMIT_STATE',\n        'UPDATE_REGEX_CONTENT'\n    ]),\n    concatClick(d){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpNode = this.newNode()\n            tmpNode['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpPath = this.newPath()\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpPath)\n          tmpPath['composition'].splice(0, 0, this.selectedDom)\n          tmpPath['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent'] = tmpPath\n        }\n      }\n      else{\n        if(this.lastDom){\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.lastDom\n          this.lastDom['composition'].push(tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    upperClick(){\n      if(this.selectedDom){\n        if('branchUpper' in this.selectedDom){\n          if(this.selectedDom['branchRepeat'][1] == 1 && this.selectedDom['branchRepeat'][0] == 1) {\n            this.selectedDom['branchUpper'] = true\n          }\n        }\n        else if(this.selectedDom['repeat'][1] == 1 && this.selectedDom['repeat'][0] == 1)\n          this.selectedDom['upper'] = true\n      }\n      this.UPDATE_RETREE_DATA_STATE()\n      this.RESET_DOM_KEY_STATE()\n    },\n    orClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' || this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpOr = this.newOr()\n          tmpOr['parent'] = this.selectedDom['parent']\n          var tmpIndex = this.selectedDom['index']\n          this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpOr)\n          this.selectedDom['parent'] = tmpOr\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = tmpOr\n          tmpOr['composition'].push(this.selectedDom)\n          tmpOr['composition'].push(tmpNode)\n        } \n        else if(this.selectedDom['parent']['type'] == 'or'){\n          var tmpIndex = this.selectedDom['index']\n          var tmpNode = this.newNode()\n          tmpNode['parent'] = this.selectedDom['parent']\n          this.selectedDom['parent']['composition'].splice(tmpIndex+1,0,tmpNode)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    notClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node'){\n          this.selectedDom['notFlag'] = true\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()   \n      this.RESET_DOM_KEY_STATE()   \n    },\n    branchClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['type'] = 'wholeTree'\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n        }\n        if(this.selectedDom['parent']['type'] == 'wholeTree'){\n          if(this.selectedDom['type'] == 'node'){\n            var tmpIndex = this.selectedDom['index']\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.selectedDom['parent']\n            this.selectedDom['parent']['composition'].splice(tmpIndex,1,tmpBranch)\n          }\n          else if(this.selectedDom['type'] == 'branch'){\n            var tmpPath = this.newPath()\n            tmpPath['branchUpper'] = true\n            tmpPath['branchRepeat'] = [1,1]\n            tmpPath['parent'] = this.selectedDom\n            this.selectedDom['composition'].push(tmpPath)\n          }\n        }\n      }\n      else{\n        if(this.lastDom){\n          if(this.lastDom['type'] == 'path'){\n            this.lastDom['type'] = 'wholeTree'\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n          else if(this.lastDom['type'] == 'wholeTree'){\n            var tmpBranch = this.newBranch()\n            tmpBranch['parent'] = this.lastDom\n            this.lastDom['composition'].push(tmpBranch)\n          }\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE() \n      this.RESET_DOM_KEY_STATE()     \n    },\n    existClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          \n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['exist']\n          this.selectedDom['exist']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['upper'] = true\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n            this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['upper'] = true\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['exist']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['exist']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom         \n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()    \n    },\n    allClick(){\n      if(this.selectedDom){\n        if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'path' && this.selectedDom['parent']['parent']['type'] == 'target'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['type'] = 'wholeTree'\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['all']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'node' && this.selectedDom['parent']['type'] == 'wholeTree'){\n          var tmpWholeTree = this.selectedDom['parent']\n          tmpWholeTree['elementComposition'] = {}\n          tmpWholeTree['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = tmpWholeTree['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          tmpWholeTree['elementComposition']['exallist']['composition'].push(tmpPath)\n          tmpWholeTree['elementComposition']['parent'] = tmpWholeTree\n          tmpWholeTree['composition'].splice(this.selectedDom['index'],1)\n        }\n        else if(this.selectedDom['type'] == 'elementComposition'){\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.selectedDom['all']\n          this.selectedDom['all']['composition'].push(tmpPath)\n        }\n      }\n      else if(this.lastDom){\n        if(this.lastDom['type'] == 'path'){\n          this.lastDom['type'] = 'wholeTree'\n          this.lastDom['elementComposition'] = {}\n          this.lastDom['elementComposition'] = this.newElementComposition()\n          var tmpPath = this.newPath()\n          tmpPath['bracket'] = true\n          tmpPath['parent'] = this.lastDom['elementComposition']['all']\n          //tmpPath['repeat'] = [1, '*']\n          this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n          this.lastDom['elementComposition']['parent'] = this.lastDom\n        }\n        else if(this.lastDom['type'] == 'wholeTree'){\n          if(!('elementComposition' in this.lastDom)){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          else if(this.lastDom['elementComposition']['exist']['composition'].length+\n                  this.lastDom['elementComposition']['all']['composition'].length == 0){\n            this.lastDom['elementComposition'] = {}\n            this.lastDom['elementComposition'] = this.newElementComposition()\n            var tmpPath = this.newPath()\n            tmpPath['bracket'] = true\n            tmpPath['parent'] = this.lastDom['elementComposition']['all']\n            //tmpPath['repeat'] = [1, '*']\n            this.lastDom['elementComposition']['all']['composition'].push(tmpPath)\n            this.lastDom['elementComposition']['parent'] = this.lastDom\n          }\n          var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n        }\n      }\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()   \n    },\n    anyClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Any'\n        this.selectedDom['nodeLabel'] = '.'\n        this.selectedDom['nodeColor'] = '#22CCCC'\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    rootClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Root'\n        this.selectedDom['nodeLabel'] = '^'\n        this.selectedDom['nodeColor'] = '#CC2222'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['height'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    leafClick(){\n      if(this.selectedDom['type'] == 'node'){\n        this.selectedDom['definition'] = true\n        this.selectedDom['nodeName'] = 'Leaf'\n        this.selectedDom['nodeLabel'] = '$'\n        this.selectedDom['nodeColor'] = '#30CC22'\n        let tmpDict = {}\n        tmpDict['op'] = '='\n        tmpDict['value'] = '0'\n        this.selectedDom['data']['degree'] = tmpDict\n        this.UPDATE_RETREE_DATA_STATE()  \n        this.RESET_DOM_KEY_STATE()\n      }\n    },\n    newNode(){\n      var retNode = {}\n      retNode['type'] = 'node'\n      retNode['repeat'] = [1,1]\n      retNode['data'] = {}\n      retNode['key'] = getComponentKey()\n      return retNode\n    },\n    newPath(){\n      var retPath = {}\n      retPath['type'] = 'path'\n      retPath['repeat'] = [1,1]\n      retPath['composition'] = []\n      var tmpNode  = this.newNode()\n      tmpNode['parent'] = retPath\n      retPath['composition'].push(tmpNode)\n      retPath['key'] = getComponentKey()\n      return retPath \n    },\n    newOr(){\n      var retOr = {}\n      retOr['type'] = 'or'\n      retOr['repeat'] = [1, 1]\n      retOr['composition'] = []\n      retOr['key'] = getComponentKey()\n      return retOr\n    },\n    newBranch(){\n      var retBranch = {}\n      retBranch['type'] = 'branch'\n      retBranch['composition'] = []\n      retBranch['key'] = getComponentKey()\n      retBranch['repeat'] = [1,1]\n      var tmpPath = this.newPath()\n      tmpPath['branchRepeat'] = [1, 1]\n      tmpPath['branchUpper'] = true\n      tmpPath['parent'] = retBranch\n      retBranch['composition'].push(tmpPath)\n      return retBranch\n    },\n    newWholeTree(){\n      var retWholeTree = {}\n      retWholeTree['type'] = 'wholeTree'\n      retWholeTree['key'] = getComponentKey()\n      retWholeTree['root'] = {}\n      retWholeTree['root']['parent'] = retWholeTree\n      retWholeTree['branch'] = this.newBranch()\n      retWholeTree['branch']['parent'] = retWholeTree\n      return retWholeTree\n\n    },\n    newElementComposition(){\n      var retElementComposition = {}\n      retElementComposition['type'] = 'elementComposition'\n      retElementComposition['exist'] = {}\n      retElementComposition['exist']['type'] = 'exist'\n      retElementComposition['exist']['composition'] = [] \n      retElementComposition['all'] = {}\n      retElementComposition['all']['type'] = 'all'\n      retElementComposition['all']['composition'] = []\n      retElementComposition['key'] = getComponentKey()\n      return retElementComposition\n    },\n    deleteRegex(){\n      if(this.selectedDom['type'] == 'elementComposition'){\n          this.selectedDom['exist'] = {\n            \"type\": \"exist\",\n            \"composition\": [],\n          }\n          this.selectedDom['all'] = {\n            \"type\": \"all\",\n            \"composition\": [],\n          }\n      }\n      else{\n        this.selectedDom['parent']['composition'].splice(this.selectedDom['index'], 1)\n      }\n      this.RESET_DOM_KEY_STATE()\n      this.UPDATE_RETREE_DATA_STATE()  \n    },\n    commitRegex(){\n      this.UPDATE_REGEX_COMMIT_STATE()\n      this.UPDATE_REGEX_CONTENT()\n    },\n    resetRegex(){\n      sysDatasetObj.resetRegex(this.curRegexIndex)\n      var tmpRegex = sysDatasetObj.returnRegex(this.curRegexIndex)\n      this.UPDATE_REVIEW_DATA()\n      this.UPDATE_RETREE_DATA_STATE()  \n      this.RESET_DOM_KEY_STATE()\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-component-view {\n  position: absolute;\n  top: 0%;\n  left:0%;\n  height: 100%;\n  width: 100%;\n  .re-Icon{\n    position: absolute;\n    top: 0%;\n    left:0%;\n    height: 100%;\n    width: 80%;\n    display: flex;\n    justify-content: center;\n    border-right: 1px #ddd solid;\n    .btnIcon{\n      margin-top: 8px;\n      margin-left: 10px;\n      margin-right: 10px;\n    }\n    button {\n      display: inline-block;\n      height: 24px;\n      padding: 0;\n      margin: 0;\n      vertical-align: top;\n      width: 44px;\n    }\n\n    #close-image img {\n      display: block;\n      height: 20px;  \n      width: 40px;\n    }\n  }\n  .commit-delete-btn{\n    position: absolute;\n    top: 0%;\n    left: 80%;\n    right: 0%;\n    display: flex;\n    justify-content: center;\n    .operation {\n      cursor: pointer;\n      &:hover{\n        fill: steelblue;\n      }\n    }\n    .commit-icon{\n    border: 1px #ddd bold;\n    font-size: 14px;\n    text-align: center !important;\n    margin-top: 8px;\n    margin-left: 16px;\n    //height: 20px !important;\n    //line-height: 0px !important;\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    //padding: 12px 6px !important;\n    }\n    .delete-button{\n        border: 1px #ddd bold;\n        font-size: 14px;\n        text-align: center !important;\n        margin-top: 8px;\n        margin-left: 16px;\n        //height: 20px !important;\n        //line-height: 0px !important;\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        //padding: 12px 6px !important;\n\n    }\n    .reset-button{\n        border: 1px #ddd bold;\n        font-size: 14px;\n        text-align: center !important;\n        margin-top: 8px;\n        margin-left: 16px;\n        //height: 20px !important;\n        //line-height: 0px !important;\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        //padding: 12px 12px !important;\n    }\n  }\n\n\n}\n\n</style>\n<style scoped lang=\"less\">\n.el-row {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n}\n.el-col {\n    border-radius: 4px;\n}\n\n</style>\n"],"sourceRoot":"src/views/REView"}]}
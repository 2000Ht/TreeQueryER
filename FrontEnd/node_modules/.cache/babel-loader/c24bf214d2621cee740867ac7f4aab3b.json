{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/AttributeEle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/AttributeEle.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _slicedToArray from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.object.values\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport bus from \"../brushed\";\nimport busInvert from \"../brushedInvert\";\nexport default {\n  name: 'AttributeEle',\n  components: {},\n  props: {\n    vis_attr: String,\n    dataBackGround: Object,\n    dataHighLight: Array\n  },\n  data: function data() {\n    return {\n      brushed_data: null,\n      //从层次结构可视化获得的刷选数据\n      init_brushed_data: null,\n      //最初的层次结构可视化数据\n      init_x_scale: null,\n      //最初的层次结构数据x轴比例尺\n      init_y_scale: null,\n      //最初的层次结构数据y轴比例尺\n      watch_jsonDataIn: 0,\n      attr_ele_brushed_data: null,\n      //在属性柱状图上刷选的数据\n      data_backGround: null\n    };\n  },\n  beforeMount: function beforeMount() {},\n  mounted: function mounted() {\n    this.draw_attribute();\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    brushed_data: function brushed_data() {\n      this.draw_attribute();\n    },\n    treeViewState: function treeViewState() {\n      this.watch_jsonDataIn = 1;\n      this.data_background = this.dataBackGround['data'];\n      this.draw_attribute();\n    },\n    // dataBackGround: function(){\n    //   this.watch_jsonDataIn = 1;\n    //   this.data_background = this.dataBackGround['data']\n    //   this.draw_attribute();\n    //   console.log('dataBackGround:',this.dataBackGround)\n    // },\n    dataHighLight: function dataHighLight() {\n      var _this = this;\n\n      if (this.dataHighLight == null || typeof this.dataHighLight == 'undefined' || !(this.dataHighLight instanceof Array)) return;else {\n        this.dataHighLight.forEach(function (ele) {\n          //ele 是treeIn数组 或者 treeOut数组\n          if (ele['type'] == 'treeOut' && ele['data'][0]) {\n            // console.log('dataHighLight----treeOut',ele)\n            var eiChildrenIndexList = [];\n            ele['data'].forEach(function (ei) {\n              eiChildrenIndexList = eiChildrenIndexList.concat(d3.hierarchy(ei).descendants().map(function (d) {\n                return d.data.data.nodeIndex;\n              }));\n            });\n            eiChildrenIndexList = Array.from(new Set(eiChildrenIndexList));\n            var sendHighLight = d3.hierarchy(_this.data_background).descendants().filter(function (d) {\n              return eiChildrenIndexList.includes(d.data.data.nodeIndex);\n            }).map(function (d) {\n              return d.data;\n            }); // console.log(sendHighLight)\n\n            _this.brushed_data = sendHighLight;\n\n            _this.draw_attribute();\n          }\n\n          if (!ele['data'][0]) {\n            //页面上的Out是\"请选择\" 或者为null\n            console.log(\"treeOut['data'][0]:\", ele['data'][0]);\n          }\n        });\n      }\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'treeViewState'])),\n  created: function created() {\n    var _this2 = this;\n\n    bus.$on('brushed_data', function (data) {\n      _this2.brushed_data = data;\n    });\n  },\n  methods: {\n    draw_attribute: function draw_attribute() {\n      //绘制刷选或者选择的数据；同时当前没有更新底层数据\n      if (this.brushed_data != null && this.brushed_data.length > 0 && !this.watch_jsonDataIn) {\n        var brushed_data = Object.values(this.brushed_data);\n        var vis_show = {};\n        var data_keys = Object.keys(brushed_data[0].data);\n        data_keys.forEach(function (ele) {\n          vis_show[ele] = [];\n          brushed_data.forEach(function (ei) {\n            if (ei.data[ele] == null) {\n              vis_show[ele].push(0);\n            } else {\n              vis_show[ele].push(ei.data[ele]);\n            }\n          });\n        });\n        this.drawChart(vis_show[this.vis_attr], this.vis_attr, 0, '#ff6347');\n      } else {\n        //绘制每次初始化的数据 以及 brush的数据为空时也需要重新绘图\n        if (this.dataBackGround['data']) {\n          this.watch_jsonDataIn = 0;\n          var data = this.dataBackGround['data'];\n          var d = d3.hierarchy(data).eachBefore(function (d) {\n            d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n\n            d.data.data.height = d.height; //重新画图之后要重新计算高度\n\n            d.data.data.degree = d.children ? d.children.length : 0; //重新画图之后要重新计算节点出度\n          });\n          var desc = d.descendants();\n\n          var _data_keys = Object.keys(d.data.data);\n\n          var _vis_show = {};\n\n          _data_keys.forEach(function (ele) {\n            _vis_show[ele] = desc.map(function (d) {\n              if (d.data.data[ele] == null) {\n                return 0;\n              } else if (d.data.data[ele] instanceof Array) {\n                return d.data.data[ele].length;\n              } else {\n                return d.data.data[ele];\n              }\n            });\n          }); // console.log(vis_show)\n\n\n          this.drawChart(_vis_show[this.vis_attr], this.vis_attr, 1, '#ff6347');\n        }\n      }\n    },\n    drawChart: function drawChart(items, xlabel, isinit, colorup) {\n      var _this3 = this;\n\n      var colorbackground = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'gray';\n      // let self = this\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 50,\n        left: 20\n      };\n      var width = d3.select('#svg-chart' + this.vis_attr).node().getBoundingClientRect().width;\n      var height = d3.select('#svg-chart' + this.vis_attr).node().getBoundingClientRect().height; //初始化绘图\n\n      if (isinit) {\n        var brush = function brush(cell) {\n          var brush = d3.brushX().extent([[margin.left + mv_left, margin.top], [width - margin.right - margin.left + mv_left, height - margin.bottom]]).on(\"start\", brushstarted).on(\"brush\", brushed).on(\"end\", brushended);\n          cell.call(brush);\n          var brushCell;\n          var selected = [];\n\n          function brushstarted() {\n            if (brushCell !== this) {\n              d3.select(brushCell).call(brush.move, null);\n              brushCell = this;\n            }\n\n            svg_.select(\"#svg-chart-g1\" + vis_attr).classed(\"hide\", true);\n            svg_.select(\"#svg-chart-text1\" + vis_attr).classed(\"hide\", true); // console.log(\"brush开始\") //按下操作\n          }\n\n          function brushed() {\n            // console.log(\"d3.event.selection\", d3.event.selection) //按下下拉才执行此函数\n            svg_.select(\"#svg-chart-g1\" + vis_attr).classed(\"hide\", true);\n            svg_.select(\"#svg-chart-text1\" + vis_attr).classed(\"hide\", true);\n\n            var _d3$event$selection = _slicedToArray(d3.event.selection, 2),\n                x0 = _d3$event$selection[0],\n                x1 = _d3$event$selection[1];\n\n            selected = [];\n            data.forEach(function (ele) {\n              if (x0 <= x(ele.name) + mv_left && x1 >= x(ele.name) + mv_left + x.bandwidth()) {\n                d3.select(\"#initg\" + vis_attr + ele.index).classed(\"highlight-bar-initg-active\", true);\n                selected.push(ele);\n              } else {\n                d3.select(\"#initg\" + vis_attr + ele.index).classed(\"highlight-bar-initg-active\", false);\n              }\n            }); //brush的时候传数据\n\n            busInvert.$emit('attr_ele_brushed_data', selected);\n          }\n\n          function brushended() {\n            if (d3.event.selection != null) {\n              //brushend的时候传数据\n              // busInvert.$emit('attr_ele_brushed_data', selected)\n              return;\n            } else {\n              svg_.select(\"#svg-chart-g1\" + vis_attr).classed(\"hide\", false);\n              svg_.select(\"#svg-chart-text1\" + vis_attr).classed(\"hide\", false);\n              svg_.selectAll('.histogram-bar').classed('highlight-bar-initg-active', false); //当d3.event.selection == null 时，将之前的刷选清除掉\n\n              selected.forEach(function (ele) {\n                d3.select(\"#initg\" + vis_attr + ele.index).classed(\"highlight-bar-initg-active\", false);\n              });\n              busInvert.$emit('attr_ele_brushed_data', []); // console.log(\"brush结束\")\n\n              return;\n            }\n          }\n        };\n\n        var color = colorbackground; //\"gray\"\n\n        var data1 = {};\n        items.forEach(function (ele) {\n          if (data1[ele]) {\n            data1[ele]++;\n          } else {\n            data1[ele] = 1;\n          }\n        });\n        var attr_show_skew = 0; //x轴类型 数字0 字符串1 时间\n\n        if (xlabel == 'created_at' || xlabel == 'time' || xlabel == 'edu' || xlabel == 'followers_count_str' || xlabel == 'geo' || xlabel == 'location' || xlabel == 'region' || xlabel == 'source' || xlabel == 'type') {\n          attr_show_skew = 1;\n        }\n\n        console.log('attr_show_skew: ', attr_show_skew);\n        var data = [];\n\n        for (var key in data1) {\n          var tmp = {};\n          tmp['name'] = key;\n          tmp['count'] = data1[key];\n          data.push(tmp);\n        }\n\n        this.init_brushed_data = JSON.parse(JSON.stringify(data)); //深拷贝 //保存初始化数据\n\n        var y = d3.scaleLinear().domain([0, d3.max(this.init_brushed_data, function (d) {\n          return d.count;\n        })]).nice().range([height - margin.bottom, margin.top]).interpolate(d3.interpolateRound);\n        var x = d3.scaleBand().domain(this.init_brushed_data.map(function (d) {\n          return d.name;\n        }).sort(function (a, b) {\n          return parseInt(a) - parseInt(b);\n        })).range([margin.left, width - margin.right - margin.left]).padding(0.1).round(true);\n        this.init_x_scale = x;\n        this.init_y_scale = y;\n        var svg_ = d3.select(\"#svg-chart\" + this.vis_attr);\n        var t = svg_.transition().duration(750); // const brush = d3.brushX()\n        //   .extent([[margin.left, margin.top],[width-margin.right-margin.left, height-margin.bottom]])\n        //   .on(\"start\", brushstart)\n        //   .on(\"brush\", brushing)\n        //   .on(\"end\", brushend)\n\n        var mv_left = 10;\n        var vis_attr = this.vis_attr;\n        var index = 0;\n        svg_.select(\"#svg-chart-g\" + this.vis_attr).attr(\"transform\", \"translate(\".concat(mv_left, \",0)\")).selectAll(\".histogram-bar\").data(data).join(function (enter) {\n          return enter.append(\"rect\").attr('id', function (d) {\n            d.index = index++;\n            d.type = vis_attr;\n            return \"initg\" + vis_attr + d.index;\n          }) //在初始svg-chart-g上的高亮\n          .attr('class', \"histogram-bar\").attr(\"x\", function (d) {\n            return x(d.name);\n          }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n            return y(d.count);\n          }).attr(\"height\", function (d) {\n            return y(0) - y(d.count);\n          }).attr(\"fill\", color);\n        }, function (update) {\n          return update.call(function (update) {\n            return update.transition(t).attr('id', function (d) {\n              d.index = index++;\n              d.type = vis_attr;\n              return \"initg\" + vis_attr + d.index;\n            }) //在初始svg-chart-g上的高亮\n            .attr(\"x\", function (d) {\n              return x(d.name);\n            }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n              return y(d.count);\n            }).attr(\"height\", function (d) {\n              return y(0) - y(d.count);\n            });\n          }).attr(\"fill\", color);\n        }, function (exit) {\n          return exit.remove();\n        });\n        svg_.select(\"#brush-g\" + this.vis_attr).selectAll('*').remove(); // svg_.select(\"#brush-g1\"+ this.vis_attr).selectAll('*').remove();\n\n        var brushG = svg_.select('#brush-g' + this.vis_attr).attr(\"transform\", \"translate(\".concat(mv_left, \",0)\")); // .call(brush)\n        // .call(brush.move, x.range())\n\n        svg_.select(\"#svg-chart-text\" + this.vis_attr).selectAll(\"text\").data(data).join(function (enter) {\n          return enter.append(\"text\").attr(\"x\", function (d) {\n            return x(d.name);\n          }).attr(\"y\", function (d) {\n            return y(d.count);\n          }).attr(\"fill\", \"black\").attr(\"text-anchor\", \"middle\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 6).attr('transform', \"translate(\".concat((x.bandwidth() + 20) / 2, \",-3)\")).attr(\"dy\", '0.35em').text(function (d) {\n            return d.count;\n          });\n        }, function (update) {\n          return update.call(function (update) {\n            return update.transition(t).attr(\"x\", function (d) {\n              return x(d.name);\n            }).attr(\"y\", function (d) {\n              return y(d.count);\n            }).attr(\"fill\", \"black\").attr(\"text-anchor\", \"middle\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 6).attr('transform', \"translate(\".concat((x.bandwidth() + 20) / 2, \",-3)\")).attr(\"dy\", '0.35em').text(function (d) {\n              return d.count;\n            });\n          });\n        }, function (exit) {\n          return exit.remove();\n        });\n        svg_.select(\"#svg-chart-g1\" + this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-text1\" + this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-xaxis\" + this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-yaxis\" + this.vis_attr).selectAll('*').remove();\n        var fontsize = 6; //label是否需要倾斜\n\n        if (attr_show_skew) {\n          svg_.select(\"#svg-chart-xaxis\" + this.vis_attr).attr(\"transform\", \"translate(10,\".concat(height - margin.bottom, \")\")).call(d3.axisBottom(x)).selectAll('text').attr(\"font-size\", fontsize).attr(\"text-anchor\", \"start\").attr('transform', 'rotate(30)');\n        } else {\n          svg_.select(\"#svg-chart-xaxis\" + this.vis_attr).attr(\"transform\", \"translate(10,\".concat(height - margin.bottom, \")\")).call(d3.axisBottom(x)).selectAll('text').attr(\"font-size\", fontsize).attr(\"text-anchor\", \"start\");\n        }\n\n        svg_.select(\"#svg-chart-xaxis\" + this.vis_attr).attr(\"transform\", \"translate(10,\".concat(height - margin.bottom, \")\")) // .call(d3.axisBottom(x))\n        // .call(g => g.select(\".domain\"))\n        .call(function (g) {\n          return g.append(\"text\").attr(\"x\", width - margin.left - margin.right).attr(\"y\", 15).attr(\"fill\", 'currentColor').attr(\"text-anchor\", \"middle\").attr(\"font-size\", fontsize).text(xlabel);\n        }).node();\n        svg_.select(\"#svg-chart-yaxis\" + this.vis_attr).attr(\"transform\", \"translate(\".concat(margin.left + 10, \",0)\")).call(d3.axisLeft(y)).selectAll('text').attr(\"font-size\", fontsize).attr(\"text-anchor\", \"end\");\n        svg_.select(\"#svg-chart-yaxis\" + this.vis_attr).attr(\"transform\", \"translate(\".concat(margin.left + 10, \",0)\")) // .call(d3.axisLeft(y))\n        // .call(g => g.select(\".domain\"))\n        .call(function (g) {\n          return g.select(\".tick:last-of-type text\").clone().attr(\"x\", -25).attr(\"y\", -10).attr(\"text-anchor\", \"start\").attr(\"transform\", \"rotate(0)\").attr(\"font-size\", fontsize).text(\"Count/N\");\n        }).node();\n        svg_.call(brush, brushG);\n      } else {\n        var key;\n\n        (function () {\n          var color = colorup; //d3.rgb(255, 99, 71) //d3.rgb(28, 194, 83); //\"steelblue\"\n\n          var data1 = {}; // 统计items各个类别的个数, 构成一个字典 data1 = {\"类别1\":个数2, \"类别2\":个数2}\n\n          items.forEach(function (ele) {\n            if (data1[ele]) {\n              data1[ele]++;\n            } else {\n              data1[ele] = 1;\n            }\n          }); //data是一个列表，里面包含的是字典 data = [{\"name\":\"类别1\", \"count\": 个数1}, {\"name\":\"类别2\", \"count\": 个数2}]\n          // let data = this.init_brushed_data //浅拷贝\n\n          var data = JSON.parse(JSON.stringify(_this3.init_brushed_data)); //深拷贝\n\n          data.forEach(function (ele) {\n            ele['count'] = 0;\n          });\n\n          for (key in data1) {\n            data.forEach(function (ele) {\n              if (ele['name'] == key) {\n                ele['count'] = data1[key];\n              }\n            });\n          }\n\n          var y = d3.scaleLinear().domain([0, d3.max(_this3.init_brushed_data, function (d) {\n            return d.count;\n          })]).nice().range([height - margin.bottom, margin.top]).interpolate(d3.interpolateRound);\n          var x = d3.scaleBand().domain(_this3.init_brushed_data.map(function (d) {\n            return d.name;\n          }).sort(function (a, b) {\n            return parseInt(a) - parseInt(b);\n          })).range([margin.left, width - margin.right - margin.left]).padding(0.1).round(true);\n          var svg_ = d3.select(\"#svg-chart\" + _this3.vis_attr);\n          var t = svg_.transition().duration(750);\n          var mv_left = 10;\n          var vis_attr = _this3.vis_attr;\n          var index = 0;\n          svg_.select(\"#svg-chart-g1\" + _this3.vis_attr).attr('class', 'barchart-g1').attr(\"transform\", \"translate(\".concat(mv_left, \",0)\")).selectAll(\".histogram-bar\").data(data).join(function (enter) {\n            return enter.append(\"rect\").attr('id', function (d) {\n              d.index = index++;\n              d.type = vis_attr;\n              return \"g1\" + vis_attr + d.index;\n            }).attr('class', 'histogram-bar').attr(\"x\", function (d) {\n              return x(d.name);\n            }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n              return y(d.count);\n            }).attr(\"height\", function (d) {\n              return y(0) - y(d.count);\n            }).attr(\"fill\", color);\n          }, function (update) {\n            return update.call(function (update) {\n              return update.transition(t).attr('id', function (d) {\n                d.index = index++;\n                d.type = vis_attr;\n                return \"g1\" + vis_attr + d.index;\n              }).attr(\"x\", function (d) {\n                return x(d.name);\n              }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n                return y(d.count);\n              }).attr(\"height\", function (d) {\n                return y(0) - y(d.count);\n              });\n            }).attr(\"fill\", color);\n          }, function (exit) {\n            return exit.remove();\n          });\n          svg_.select(\"#svg-chart-text1\" + _this3.vis_attr).attr('class', 'text-g1').selectAll(\"text\").data(data).join(function (enter) {\n            return enter.append(\"text\").attr(\"x\", function (d) {\n              return x(d.name);\n            }).attr(\"y\", function (d) {\n              return y(d.count);\n            }).attr(\"fill\", \"white\").attr(\"text-anchor\", \"middle\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 5).attr('transform', \"translate(\".concat((x.bandwidth() + 20) / 2, \",-3)\")).attr(\"dy\", '0.70em').text(function (d) {\n              return d.count ? d.count : null;\n            });\n          }, //个数为0 不显示\n          function (update) {\n            return update.call(function (update) {\n              return update.transition(t).attr(\"x\", function (d) {\n                return x(d.name);\n              }).attr(\"y\", function (d) {\n                return y(d.count);\n              }).attr(\"fill\", \"white\").attr(\"text-anchor\", \"middle\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 5).attr('transform', \"translate(\".concat((x.bandwidth() + 20) / 2, \",-3)\")).attr(\"dy\", '0.70em').text(function (d) {\n                return d.count ? d.count : null;\n              });\n            });\n          }, function (exit) {\n            return exit.remove();\n          });\n        })();\n      }\n    }\n  }\n};",{"version":3,"sources":["AttributeEle.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n  <svg :id=\"'svg-chart' + vis_attr\">\n    <g :id=\"'svg-chart-g' + vis_attr\"></g>\n    <g :id=\"'svg-chart-g1' + vis_attr\"></g>\n    <g :id=\"'brush-g' + vis_attr\"></g>  <!--初始层上的brush-->\n    <!-- <g :id=\"'brush-g1' + vis_attr\"></g> -->\n    <g :id=\"'svg-chart-xaxis' + vis_attr\"></g>\n    <g :id=\"'svg-chart-yaxis' + vis_attr\"></g>\n    <g :id=\"'svg-chart-text' + vis_attr\"></g>\n    <g :id=\"'svg-chart-text1' + vis_attr\"></g>\n  </svg>\n</div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nimport busInvert from '../brushedInvert'\nexport default {\n  name: 'AttributeEle',\n  components: {\n\n  },\n  props: {\n    vis_attr: String,\n    dataBackGround: Object,\n    dataHighLight: Array,\n  },\n  data() {\n    return {\n      brushed_data: null, //从层次结构可视化获得的刷选数据\n      init_brushed_data: null, //最初的层次结构可视化数据\n      init_x_scale: null, //最初的层次结构数据x轴比例尺\n      init_y_scale: null, //最初的层次结构数据y轴比例尺\n      watch_jsonDataIn: 0,\n      attr_ele_brushed_data: null, //在属性柱状图上刷选的数据\n      data_backGround: null,\n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n    this.draw_attribute();\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      brushed_data: function(){\n        this.draw_attribute();\n      },\n      treeViewState: function() {\n        this.watch_jsonDataIn = 1;\n        this.data_background = this.dataBackGround['data']\n        this.draw_attribute();\n      },\n      // dataBackGround: function(){\n      //   this.watch_jsonDataIn = 1;\n      //   this.data_background = this.dataBackGround['data']\n      //   this.draw_attribute();\n      //   console.log('dataBackGround:',this.dataBackGround)\n      // },\n      dataHighLight: function(){\n        if(this.dataHighLight==null || typeof this.dataHighLight == 'undefined' || !(this.dataHighLight instanceof Array) ) return;\n        else{\n          this.dataHighLight.forEach(ele=>{\n            //ele 是treeIn数组 或者 treeOut数组\n            if(ele['type']=='treeOut' && ele['data'][0]){\n              // console.log('dataHighLight----treeOut',ele)\n              let eiChildrenIndexList = []\n              ele['data'].forEach(ei=>{\n                eiChildrenIndexList = eiChildrenIndexList.concat(d3.hierarchy(ei).descendants().map(d=>d.data.data.nodeIndex))\n              })\n              eiChildrenIndexList = Array.from(new Set( eiChildrenIndexList ))\n              let sendHighLight = d3.hierarchy(this.data_background).descendants().filter(d=>eiChildrenIndexList.includes(d.data.data.nodeIndex)).map(d=>d.data)\n              // console.log(sendHighLight)\n              this.brushed_data = sendHighLight\n              this.draw_attribute()\n            }\n            if(!ele['data'][0]){ //页面上的Out是\"请选择\" 或者为null\n              console.log(\"treeOut['data'][0]:\", ele['data'][0])\n            }\n          })\n        }\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'treeViewState'\n    ]),\n  },\n  created(){\n    bus.$on('brushed_data', (data)=>{\n      this.brushed_data = data;\n    })\n  },\n  methods: {\n    draw_attribute: function() {\n      //绘制刷选或者选择的数据；同时当前没有更新底层数据\n      if(this.brushed_data!=null && this.brushed_data.length > 0 && !this.watch_jsonDataIn){\n        let brushed_data = Object.values(this.brushed_data)\n        let vis_show = {}\n        let data_keys = Object.keys(brushed_data[0].data)\n        data_keys.forEach(ele=>{\n          vis_show[ele] = []\n          brushed_data.forEach(ei=>{\n            if(ei.data[ele] == null){ vis_show[ele].push(0)}\n            else{vis_show[ele].push(ei.data[ele])}\n          })\n        })\n        this.drawChart(vis_show[this.vis_attr], this.vis_attr, 0, '#ff6347')\n      }\n      else{\n        //绘制每次初始化的数据 以及 brush的数据为空时也需要重新绘图\n        if(this.dataBackGround['data'])\n        {\n          this.watch_jsonDataIn = 0\n          let data = this.dataBackGround['data']\n          let d = d3.hierarchy(data).eachBefore(d=>{\n            d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n            d.data.data.height = d.height; //重新画图之后要重新计算高度\n            d.data.data.degree = d.children ? d.children.length : 0; //重新画图之后要重新计算节点出度\n          })\n          let desc = d.descendants()\n          let data_keys = Object.keys(d.data.data)\n          let vis_show = {}\n          data_keys.forEach(ele=>{\n            vis_show[ele] = desc.map(d=>{\n              if(d.data.data[ele] == null){return 0;}\n              else if(d.data.data[ele] instanceof Array){return d.data.data[ele].length;}\n              else{return d.data.data[ele]}\n            })\n          })\n          // console.log(vis_show)\n          this.drawChart(vis_show[this.vis_attr], this.vis_attr, 1, '#ff6347')\n        }\n      }\n    },\n    drawChart: function(items, xlabel, isinit, colorup, colorbackground='gray'){\n      // let self = this\n      let margin = {top:20, right:20, bottom:50, left:20}\n      let width = d3.select('#svg-chart'+ this.vis_attr).node().getBoundingClientRect().width\n      let height = d3.select('#svg-chart' + this.vis_attr).node().getBoundingClientRect().height\n\n      //初始化绘图\n      if(isinit){\n        let color = colorbackground//\"gray\"\n        let data1 = {}\n        items.forEach(ele => {\n          if(data1[ele]){ \n            data1[ele]++;\n          }\n          else{ \n            data1[ele] = 1;\n          }\n        });\n        let attr_show_skew = 0 //x轴类型 数字0 字符串1 时间\n        if(xlabel == 'created_at' || xlabel == 'time'\n         || xlabel == 'edu' || xlabel == 'followers_count_str'\n         || xlabel == 'geo' || xlabel == 'location'\n         || xlabel == 'region' || xlabel == 'source'\n         || xlabel == 'type'){\n          attr_show_skew = 1\n        }\n        console.log('attr_show_skew: ',attr_show_skew)\n        let data = []\n        for (var key in data1) {\n          let tmp = {}\n          tmp['name'] = key\n          tmp['count'] = data1[key]\n          data.push(tmp)\n        }\n        this.init_brushed_data = JSON.parse(JSON.stringify(data)) //深拷贝 //保存初始化数据\n\n        \n\n        let y = d3.scaleLinear()\n          .domain([0, d3.max(this.init_brushed_data, d => d.count)]).nice()\n          .range([height - margin.bottom, margin.top])\n          .interpolate(d3.interpolateRound)\n        \n        let x = d3.scaleBand()\n          .domain(this.init_brushed_data.map(d => d.name).sort(function(a, b){return parseInt(a)-parseInt(b)}))\n          .range([margin.left, width - margin.right - margin.left])\n          .padding(0.1)\n          .round(true)\n        \n        this.init_x_scale = x;\n        this.init_y_scale = y;\n\n        let svg_ = d3.select(\"#svg-chart\"+ this.vis_attr)\n\n        let t = svg_.transition()\n          .duration(750)\n\n        // const brush = d3.brushX()\n        //   .extent([[margin.left, margin.top],[width-margin.right-margin.left, height-margin.bottom]])\n        //   .on(\"start\", brushstart)\n        //   .on(\"brush\", brushing)\n        //   .on(\"end\", brushend)\n\n        let mv_left = 10\n        let vis_attr = this.vis_attr\n        let index = 0\n        svg_.select(\"#svg-chart-g\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          .selectAll(\".histogram-bar\")\n          .data(data)\n          .join(\n            enter => enter.append(\"rect\")\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"initg\"+ vis_attr + d.index;}) //在初始svg-chart-g上的高亮\n              .attr('class',\"histogram-bar\")\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d =>y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count))\n              .attr(\"fill\", color),\n            update => update\n              .call(update => update.transition(t)\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"initg\"+ vis_attr + d.index;}) //在初始svg-chart-g上的高亮\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d => y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count)))\n              .attr(\"fill\", color),\n            exit => exit\n              .remove()\n          )\n        \n        svg_.select(\"#brush-g\"+ this.vis_attr).selectAll('*').remove();\n        // svg_.select(\"#brush-g1\"+ this.vis_attr).selectAll('*').remove();\n        \n        let brushG = svg_.select('#brush-g'+ this.vis_attr)\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          // .call(brush)\n          // .call(brush.move, x.range())\n\n        \n        svg_.select(\"#svg-chart-text\"+ this.vis_attr)\n          .selectAll(\"text\")\n          .data(data)\n          .join(\n            enter => enter.append(\"text\")\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"black\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",6)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.35em')\n              .text(d=>d.count),\n            update => update\n              .call(update => update.transition(t)\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"black\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",6)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.35em')\n              .text(d=>d.count)),\n            exit => exit\n              .remove()\n          )\n        \n        svg_.select(\"#svg-chart-g1\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-text1\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr).selectAll('*').remove();\n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr).selectAll('*').remove();\n        let fontsize = 6\n\n        //label是否需要倾斜\n        if(attr_show_skew){\n          svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n            .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n            .call(d3.axisBottom(x))\n              .selectAll('text')\n              .attr(\"font-size\",fontsize)\n              .attr(\"text-anchor\", \"start\")\n              .attr('transform','rotate(30)')\n        }\n        else{\n          svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n            .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n            .call(d3.axisBottom(x))\n              .selectAll('text')\n              .attr(\"font-size\",fontsize)\n              .attr(\"text-anchor\", \"start\")\n        }\n        svg_.select(\"#svg-chart-xaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(10,${height - margin.bottom})`)\n          // .call(d3.axisBottom(x))\n          // .call(g => g.select(\".domain\"))\n          .call(g => g.append(\"text\")\n            .attr(\"x\", width - margin.left - margin.right)\n            .attr(\"y\", 15)\n            .attr(\"fill\", 'currentColor')\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\",fontsize)\n            .text(xlabel))\n          .node()\n        \n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${margin.left + 10},0)`)\n          .call(d3.axisLeft(y))\n          .selectAll('text')\n            .attr(\"font-size\",fontsize)\n            .attr(\"text-anchor\", \"end\")\n\n        svg_.select(\"#svg-chart-yaxis\"+ this.vis_attr)\n          .attr(\"transform\", `translate(${margin.left + 10},0)`)\n          // .call(d3.axisLeft(y))\n          // .call(g => g.select(\".domain\"))\n          .call(g => g.select(\".tick:last-of-type text\").clone()\n            .attr(\"x\", -25)\n            .attr(\"y\", -10)\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"transform\",\"rotate(0)\")\n            .attr(\"font-size\",fontsize)\n            .text(\"Count/N\"))\n          .node()\n        \n        svg_.call(brush, brushG)\n\n        function brush(cell){\n          const brush = d3.brushX()\n            .extent([[margin.left+mv_left, margin.top],[width-margin.right-margin.left+mv_left, height-margin.bottom]])\n            .on(\"start\", brushstarted)\n            .on(\"brush\", brushed)\n            .on(\"end\", brushended)\n          \n          cell.call(brush);\n\n          let brushCell;\n          let selected = []\n          function brushstarted() {\n            if (brushCell !== this) {\n              d3.select(brushCell).call(brush.move, null);\n              brushCell = this;\n            }\n            svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", true)\n            svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", true)\n            // console.log(\"brush开始\") //按下操作\n          }\n\n          function brushed() { \n            // console.log(\"d3.event.selection\", d3.event.selection) //按下下拉才执行此函数\n            svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", true)\n            svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", true)\n\n            let [x0, x1] = d3.event.selection;\n            selected = []\n            data.forEach(ele=>{\n              if( x0 <= x(ele.name) + mv_left && x1 >= x(ele.name) + mv_left + x.bandwidth() ){\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", true);\n                selected.push(ele)\n              }\n              else{\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", false);\n              }\n            })\n            //brush的时候传数据\n            busInvert.$emit('attr_ele_brushed_data', selected)\n          }\n\n          function brushended() {\n            if (d3.event.selection != null){\n              //brushend的时候传数据\n              // busInvert.$emit('attr_ele_brushed_data', selected)\n              return;\n            }\n            else{\n              svg_.select(\"#svg-chart-g1\"+ vis_attr).classed(\"hide\", false)\n              svg_.select(\"#svg-chart-text1\"+ vis_attr).classed(\"hide\", false)\n              svg_.selectAll('.histogram-bar').classed('highlight-bar-initg-active', false)\n\n              //当d3.event.selection == null 时，将之前的刷选清除掉\n              selected.forEach(ele=>{\n                d3.select(\"#initg\"+vis_attr +ele.index).classed(\"highlight-bar-initg-active\", false);\n              })\n              busInvert.$emit('attr_ele_brushed_data', [])\n              // console.log(\"brush结束\")\n              return;\n            }\n          }\n\n        }\n\n      }\n      else{\n        let color = colorup//d3.rgb(255, 99, 71) //d3.rgb(28, 194, 83); //\"steelblue\"\n        let data1 = {}\n        // 统计items各个类别的个数, 构成一个字典 data1 = {\"类别1\":个数2, \"类别2\":个数2}\n        items.forEach(ele => {\n          if(data1[ele]){ \n            data1[ele]++;\n          }\n          else{ \n            data1[ele] = 1;\n          }\n        });\n        //data是一个列表，里面包含的是字典 data = [{\"name\":\"类别1\", \"count\": 个数1}, {\"name\":\"类别2\", \"count\": 个数2}]\n        // let data = this.init_brushed_data //浅拷贝\n        let data = JSON.parse(JSON.stringify(this.init_brushed_data)) //深拷贝\n        data.forEach(ele => {ele['count'] = 0})\n        for (var key in data1) {\n          data.forEach(ele=>{\n            if(ele['name']==key){\n              ele['count'] = data1[key]\n            }\n          })\n        }\n\n        let y = d3.scaleLinear()\n          .domain([0, d3.max(this.init_brushed_data, d => d.count)]).nice()\n          .range([height - margin.bottom, margin.top])\n          .interpolate(d3.interpolateRound)\n        let x = d3.scaleBand()\n          .domain(this.init_brushed_data.map(d => d.name).sort(function(a, b){return parseInt(a)-parseInt(b)}))\n          .range([margin.left, width - margin.right - margin.left])\n          .padding(0.1)\n          .round(true)\n\n        let svg_ = d3.select(\"#svg-chart\"+ this.vis_attr)\n\n        let t = svg_.transition()\n          .duration(750)\n\n        let mv_left = 10\n        let vis_attr = this.vis_attr\n        let index = 0\n        svg_.select(\"#svg-chart-g1\"+ this.vis_attr)\n          .attr('class', 'barchart-g1')\n          .attr(\"transform\", `translate(${mv_left},0)`)\n          .selectAll(\".histogram-bar\")\n          .data(data)\n          .join(\n            enter => enter.append(\"rect\")\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"g1\"+ vis_attr + d.index;})\n              .attr('class', 'histogram-bar')\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d =>y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count))\n              .attr(\"fill\", color),\n            update => update\n              .call(update => update.transition(t)\n              .attr('id', d=>{d.index = index++; d.type=vis_attr; return \"g1\"+ vis_attr + d.index;})\n              .attr(\"x\", d => x(d.name))\n              .attr(\"width\", x.bandwidth())\n              .attr(\"y\", d => y(d.count))\n              .attr(\"height\", d => y(0) - y(d.count)))\n              .attr(\"fill\", color),\n            exit => exit\n              .remove()\n          )\n\n        svg_.select(\"#svg-chart-text1\"+ this.vis_attr)\n          .attr('class', 'text-g1')\n          .selectAll(\"text\")\n          .data(data)\n          .join(\n            enter => enter.append(\"text\")\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"white\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",5)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.70em')\n              .text(d=>d.count? d.count : null), //个数为0 不显示\n            update => update\n              .call(update => update.transition(t)\n              .attr(\"x\", d=>x(d.name))\n              .attr(\"y\", d=>y(d.count))\n              .attr(\"fill\",\"white\")\n              .attr(\"text-anchor\",\"middle\")\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\",5)\n              .attr('transform',`translate(${(x.bandwidth()+20)/2},-3)`)\n              .attr(\"dy\",'0.70em')\n              .text(d=>d.count? d.count: null)),\n            exit => exit\n              .remove()\n          )\n\n      }\n    }\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"less\">\n.barchart-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n.text-g1 {\n  &.hide{\n    visibility: hidden;\n  }\n}\n\n@attr_init_brush_colr: #FF6347;\n.highlight-bar-initg-active {\n  fill: @attr_init_brush_colr;\n}\n</style>"],"sourceRoot":"src/views"}]}
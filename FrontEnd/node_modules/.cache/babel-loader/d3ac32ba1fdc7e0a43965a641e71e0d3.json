{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/ComponentDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/components/ComponentDialog.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport \"../assets/modal.css\";\nexport default {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      newComponent: {\n        name: '',\n        type: '',\n        color: '#409EFF',\n        attributes: []\n      }\n    };\n  },\n  methods: {\n    handleClickSaveComponent: function () {\n      var _handleClickSaveComponent = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var savedComponent;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.newComponent.name.length == 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this.$message.error('Empty component name!');\n                return _context.abrupt(\"return\");\n\n              case 3:\n                if (!(this.newComponent.type.length == 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this.$message.error('Empty component type!');\n                return _context.abrupt(\"return\");\n\n              case 6:\n                // create new component according to the attributes\n                this.removeEmptyAttribute();\n                savedComponent = JSON.parse(JSON.stringify(this.newComponent));\n                this.$emit('addcomponent', savedComponent); // after add new component, clear the attribute of the component\n\n                this.newComponent['name'] = '';\n                this.newComponent['type'] = '';\n                this.newComponent['color'] = '#409EFF';\n                this.newComponent['attributes'] = [];\n                this.$emit('update:visible', false);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleClickSaveComponent() {\n        return _handleClickSaveComponent.apply(this, arguments);\n      }\n\n      return handleClickSaveComponent;\n    }(),\n    handleClickCancelComponent: function () {\n      var _handleClickCancelComponent = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // cancel this component\n                this.$emit('update:visible', false);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleClickCancelComponent() {\n        return _handleClickCancelComponent.apply(this, arguments);\n      }\n\n      return handleClickCancelComponent;\n    }(),\n    addNewAttribute: function () {\n      var _addNewAttribute = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.newComponent['attributes'].push([\"\"]);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function addNewAttribute() {\n        return _addNewAttribute.apply(this, arguments);\n      }\n\n      return addNewAttribute;\n    }(),\n    removeAttribute: function () {\n      var _removeAttribute = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(index) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof index != 'undefined' && index != null) {\n                  if (index >= 0 && index < this.newComponent.attributes.length) {\n                    this.newComponent.attributes.splice(index, 1);\n                  }\n                }\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeAttribute(_x) {\n        return _removeAttribute.apply(this, arguments);\n      }\n\n      return removeAttribute;\n    }(),\n    removeEmptyAttribute: function removeEmptyAttribute() {\n      // remove the empty attribute from the attribute list in component object\n      var attributes = this.newComponent['attributes'];\n\n      for (var i = attributes.length - 1; i >= 0; i--) {\n        if (attributes[i].length == 0) {\n          attributes.splice(i, 1);\n        }\n      }\n    }\n  },\n  watch: {\n    connection: {\n      immediate: true,\n      handler: function handler(val) {\n        if (!val) {\n          return;\n        }\n\n        this.connectionForm.id = val.id;\n        this.connectionForm.type = val.type;\n        this.connectionForm.name = val.name;\n        this.connectionForm.expression = val.expression;\n      }\n    }\n  }\n};",{"version":3,"sources":["ComponentDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"modal\" v-if=\"visible\" style=\"width: 320px\">\n            <div class=\"header\">\n                <span>New Component</span>\n            </div>\n            <div class=\"body\">\n                <el-form ref=\"form\" :model=\"newComponent\" label-width=\"120px\">\n                  <el-row class=\"component-attribute\">\n                      <el-col :span=\"21\">\n                        <el-input size=\"mini\" placeholder=\"component name (required)\" v-model=\"newComponent.name\"></el-input>\n                      </el-col>\n                      <el-col :offset=\"1\" :span=\"2\">\n                        <el-color-picker v-model=\"newComponent.color\"></el-color-picker>\n                      </el-col>\n                  </el-row>\n                  <el-row class=\"component-attribute\">\n                      <el-col :span=\"24\">\n                        <el-input size=\"mini\" placeholder=\"component type (required)\" v-model=\"newComponent.type\"></el-input>\n                      </el-col>\n                  </el-row>\n                  <el-row v-for=\"(attr, index) in newComponent.attributes\"class=\"component-attribute\">\n                      <el-col :span=\"23\">\n                        <el-input size=\"mini\" placeholder=\"attribute name\" v-model=\"attr[0]\"></el-input>\n                      </el-col>\n                      <el-col :span=\"1\" class=\"attibute-space close\">\n                        <i class=\"el-icon-close\" @click=\"removeAttribute(index)\"></i>\n                      </el-col>\n                  </el-row>\n                </el-form>\n            </div>\n            <div class=\"footer\">\n                <button @click=\"addNewAttribute\"><i class=\"el-icon-plus\"></i> attrbute</button>\n                <button @click=\"handleClickCancelComponent\">Cancel</button>\n                <button @click=\"handleClickSaveComponent\">Save</button>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n  import '../assets/modal.css';\n\n  export default {\n    props: {\n      visible: {\n        type: Boolean,\n        default: false,\n      }\n    },\n    data() {\n      return {\n        newComponent: {\n          name: '',\n          type: '',\n          color: '#409EFF',\n          attributes: []\n        }\n      };\n    },\n    methods: {\n      async handleClickSaveComponent() {\n        // save this component\n        // when new component name and type are not empty, then initialize new component\n        if (this.newComponent.name.length == 0) {\n          this.$message.error('Empty component name!');\n          return\n        }\n        if (this.newComponent.type.length == 0) {\n          this.$message.error('Empty component type!');\n          return\n        }\n        // create new component according to the attributes\n        this.removeEmptyAttribute()\n        let savedComponent = JSON.parse(JSON.stringify(this.newComponent))\n        this.$emit('addcomponent', savedComponent);\n        // after add new component, clear the attribute of the component\n        this.newComponent['name'] = ''\n        this.newComponent['type'] = ''\n        this.newComponent['color'] = '#409EFF'\n        this.newComponent['attributes'] = []\n        this.$emit('update:visible', false);\n      },\n      async handleClickCancelComponent() {\n        // cancel this component\n        this.$emit('update:visible', false);\n      },\n      async addNewAttribute() {\n        this.newComponent['attributes'].push([\"\"])\n      },\n      async removeAttribute(index) {\n        if ((typeof(index) != 'undefined') && (index != null)) {\n          if ((index >= 0) && (index < this.newComponent.attributes.length)) {\n            this.newComponent.attributes.splice(index, 1)\n          }\n        }\n      },\n      removeEmptyAttribute() {\n        // remove the empty attribute from the attribute list in component object\n        let attributes = this.newComponent['attributes']\n        for (let i = (attributes.length - 1); i >= 0; i--) {\n          if (attributes[i].length == 0) {\n            attributes.splice(i, 1)\n          }\n        }\n      }\n    },\n    watch: {\n      connection: {\n        immediate: true,\n        handler(val) {\n          if (!val) { return; }\n          this.connectionForm.id = val.id;\n          this.connectionForm.type = val.type;\n          this.connectionForm.name = val.name;\n          this.connectionForm.expression = val.expression;\n        },\n      },\n    },\n  };\n</script>\n<style lang=\"less\">\n  .el-color-picker__trigger {\n    height: 28px !important;\n    width: 28px !important;\n  }\n  .el-color-picker {\n    height: 28px !important;\n  }\n</style>\n<style lang=\"less\" scoped>\n  .body {\n    max-height: 300px;\n    overflow-y: auto;\n  }\n  .component-attribute {\n    margin-bottom: 10px;\n  }\n  .attibute-space {\n    line-height: 28px;\n    vertical-align: middle;\n    text-align: center;\n    cursor: pointer;\n    &.close:hover {\n      color: red;\n    }\n  }\n</style>"],"sourceRoot":"src/components"}]}
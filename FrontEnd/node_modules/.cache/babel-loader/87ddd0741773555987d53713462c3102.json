{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/VisPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/VisPanel.vue","mtime":1700550570861},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  name: 'VisPanel',\n  components: {},\n  props: {},\n  data: function data() {\n    return {\n      treeSize: 0,\n      treeHeight: 0,\n      treeWidth: 0,\n      options: [],\n      value: '',\n      initalLabel: ''\n    };\n  },\n  beforeMount: function beforeMount() {},\n  mounted: function mounted() {},\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    visPanelState: function visPanelState() {\n      d3.select(this.$el).select('#node-link-tree').selectAll('*').remove();\n      var tmpData = sysDatasetObj.getVisData();\n\n      if ('data' in tmpData) {\n        this.width = this.$refs.nodeLinkPanel.clientWidth;\n        this.height = this.$refs.nodeLinkPanel.clientHeight;\n        this.initalLabel = sysDatasetObj.getVisData()['data']['doi'];\n        this.draw_node_link_tree(this.width, this.height, tmpData);\n      } else {\n        this.treeSize = 0;\n        this.treeHeight = 0;\n        this.treeWidth = 0;\n      }\n    },\n    visTreeDataState: function visTreeDataState() {\n      d3.select(this.$el).select('#node-link-tree').selectAll('*').remove();\n      var tmpData = sysDatasetObj.getVisTreeData();\n\n      if ('data' in tmpData) {\n        this.width = this.$refs.nodeLinkPanel.clientWidth;\n        this.height = this.$refs.nodeLinkPanel.clientHeight;\n        this.initalLabel = sysDatasetObj.getVisTreeData()['data']['doi'];\n        this.draw_node_link_tree(this.width, this.height, tmpData);\n      } else {\n        this.treeSize = 0;\n        this.treeHeight = 0;\n        this.treeWidth = 0;\n      }\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'visPanelState', 'visTreeDataState'])),\n  created: function created() {},\n  methods: _objectSpread({}, mapMutations(['DATA_QUERY_INDEX']), {\n    treeChange: function treeChange(command) {\n      this.DATA_QUERY_INDEX(parseInt(this.value));\n    },\n    draw_node_link_tree: function draw_node_link_tree(width, height, data) {\n      var self = this;\n      var data_index = sysDatasetObj.getSameTree(parseInt(data['index']) - 1);\n      d3.selectAll(\".dot\").classed(\"dot-highlighted\", false);\n      var tmp_transform = d3.select('#dot' + data_index).attr(\"transform\");\n      var tmp_data = d3.select('#dot' + data_index).data();\n      var tmp_x = +d3.select('#dot' + data_index).attr(\"x\");\n      var tmp_y = +d3.select('#dot' + data_index).attr(\"y\");\n      var tmp_r = +d3.select('#dot' + data_index).attr(\"r\");\n      var tmp_selected = d3.select('#dot' + data_index).attr(\"class\");\n      var dot_selected_flag = false;\n\n      if (tmp_selected.search(/dot-selected/) != -1) {\n        dot_selected_flag = true;\n      }\n\n      d3.select('#dot' + data_index).remove();\n      d3.select(\".overview-svg\").selectAll('#dot' + data_index).data(tmp_data).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"id\", function (d) {\n        return \"dot\" + data_index;\n      }).classed(\"dot-highlighted\", true).classed(\"dot-selected\", dot_selected_flag).attr(\"transform\", function (d) {\n        return tmp_transform;\n      }).attr(\"m\", function (d) {\n        return d['m'];\n      }).attr(\"r\", function () {\n        return tmp_r;\n      }).on('click', function () {\n        self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"m\")));\n      });\n      self.treeSize = data['size'];\n      self.treeHeight = data['height'];\n      self.treeWidth = data['width'];\n      data = data['data'];\n      var scale = 300;\n      var isVertical = 1;\n      var min_width_height = Math.min(width, height);\n      var trbl = min_width_height * 20 / scale;\n      var margin = {\n        top: trbl,\n        right: trbl,\n        bottom: trbl,\n        left: trbl\n      };\n      var innerWidth = width - 40;\n      var innerHeight = height - 47;\n      var r = min_width_height * 3 / scale;\n      var r_min = min_width_height * 2.5 / scale;\n      var r_max = min_width_height * 3.5 / scale;\n      var strokeWidth = min_width_height * r / 5 / scale;\n      var strokeOpacity = min_width_height * 0.4 / scale;\n      var degree_max = 0;\n      var root = d3.tree().size([innerWidth, innerHeight])(d3.hierarchy(data).eachBefore(function (d) {}));\n      var DimGray = d3.rgb(105, 105, 105);\n      var linear = d3.scaleLinear().domain([0, root.height]).range([1, 0]);\n      var color = d3.interpolate(DimGray, DimGray);\n      self.RootDes = root.descendants();\n      var RootDes = self.RootDes;\n      var svg = d3.select(self.$el).select('#node-link-tree');\n      svg.selectAll('.vis-tree-name').remove();\n      svg.append(\"text\").attr(\"class\", \"vis-tree-name\").attr(\"y\", height - 5).attr(\"x\", width / 2).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"20\").attr(\"fill\", \"#808080\").text(data['doi']);\n      var t = svg.transition().duration(750);\n      var g = svg.append('g').attr('id', 'g-level-1').attr('transform', \"translate(\".concat(20, \", \", 10, \")\"));\n      var path_logScale = d3.scaleLog().domain([1, 2000]).range([5, 1]);\n\n      if (isVertical) {\n        g.append('g').attr('id', 'g-level-1-path').attr('class', 'gLink').attr('stroke-opacity', 0.2).attr('stroke-width', function () {\n          return path_logScale(self.treeSize);\n        }).attr(\"stroke\", \"red !important\").attr(\"style\", \"fill: red !important\").selectAll('path').data(root.links(), function (d, i) {}).join(function (enter) {\n          return enter.append('path').attr(\"stroke\", \"red !important\").attr(\"fill\", \"red !important\").each(function (d) {\n            d.target.linkNode = self;\n          }).attr('d', function (d) {\n            return \"M\".concat(d.source.x, \" \").concat(d.source.y, \" L \").concat(d.target.x, \" \").concat(d.target.y);\n          });\n        }, function (update) {\n          return update.call(function (update) {\n            return update.transition(t).each(function (d) {\n              d.target.linkNode = self;\n            }).attr('d', function (d) {\n              return \"M\".concat(d.source.x, \" \").concat(d.source.y, \" L \").concat(d.target.x, \" \").concat(d.target.y);\n            });\n          });\n        }, function (exit) {\n          return exit.remove();\n        });\n        var g_node_stoke = g.append('g').attr(\"class\", \"g-nodes-stroke\"); // 保留\n\n        var node = g.append('g').attr('id', 'g-level-1-node').selectAll('g').data(RootDes, function (d, i) {}).join(function (enter) {\n          return enter.append('g').attr(\"transform\", function (d) {\n            return \"translate(\".concat(d.x, \",\").concat(d.y, \")\");\n          });\n        }, function (update) {\n          return update.call(function (update) {\n            return update.transition(t).attr(\"transform\", function (d) {\n              return \"translate(\".concat(d.x, \",\").concat(d.y, \")\");\n            });\n          });\n        }, function (exit) {\n          return exit.remove();\n        });\n        var logScale = d3.scaleLog().domain([1, 2000]).range([10, 5]);\n        var node_stroke = [];\n        d3.select(self.$el).select('#node_link_tree').selectAll('.tree-node').remove();\n        node.append(\"g\").attr(\"id\", function (d) {\n          return \"node-stroke-\" + d['data'].index;\n        }).append(\"circle\").attr('class', 'tree-node').attr('id', function (d) {\n          return 'node-id-' + d['data'].index;\n        }).attr(\"fill\", function (d) {\n          if ('color_flag' in d['data'] && d['data']['color_flag']) {\n            for (var i = 0; i < d['data']['color'].length; i++) {\n              var tmp = {};\n              tmp['node_data'] = d;\n              tmp['index'] = d['data']['index'];\n              tmp['color'] = d['data']['color'][i];\n              tmp['x'] = d.x;\n              tmp['y'] = d.y;\n              tmp['r'] = logScale(self.treeSize) * 0.75 + i * 2 + 1;\n              node_stroke.push(tmp);\n            }\n\n            return \"white\";\n          }\n\n          return \"steelblue\";\n        }).attr(\"r\", function (d) {\n          return logScale(self.treeSize);\n        }).call(self.tooltip_ele(\"node-link-tree\"));\n\n        for (var _i = 0, _node_stroke = node_stroke; _i < _node_stroke.length; _i++) {\n          var tmp_stroke = _node_stroke[_i];\n          d3.select('#node-stroke-' + tmp_stroke['index']).append(\"circle\").attr(\"stroke\", tmp_stroke['color']).attr(\"stroke-width\", '2').attr(\"r\", tmp_stroke['r']).attr(\"fill-opacity\", '0').attr(\"transform\", function (d) {\n            return \"translate(\".concat(0, \",\", 0, \")\");\n          }).call(self.tooltip_ele(\"node-link-tree\"));\n        }\n      }\n    }\n  })\n};",{"version":3,"sources":["VisPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"vis-panel-view\">\n     <span class=\"title-text\">Tree Visualization</span>\n     <span class=\"size-text\">size:{{treeSize}}</span>\n     <span class=\"height-text\">height:{{treeHeight}}</span>\n     <span class=\"width-text\">width:{{treeWidth}}</span>\n    <div class=\"node-link-tree-panel\" ref=\"nodeLinkPanel\">\n        <svg id=\"node-link-tree\" style=\"position: absolute; width: 100%; height: 100%;\">\n        </svg>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\n\nexport default {\n  name: 'VisPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n      treeSize: 0,\n      treeHeight: 0,\n      treeWidth: 0,\n      options: [],\n      value: '',\n      initalLabel: '',\n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n\n        d3.select(this.$el).select('#node-link-tree').selectAll('*').remove()\n        let tmpData = sysDatasetObj.getVisData()\n        if('data' in tmpData){\n          this.width = this.$refs.nodeLinkPanel.clientWidth\n          this.height = this.$refs.nodeLinkPanel.clientHeight\n          this.initalLabel = sysDatasetObj.getVisData()['data']['doi']\n          this.draw_node_link_tree(this.width, this.height, tmpData)\n        }\n        else{\n          this.treeSize = 0\n          this.treeHeight = 0\n          this.treeWidth = 0\n        }\n      },\n      visTreeDataState: function(){\n        d3.select(this.$el).select('#node-link-tree').selectAll('*').remove()\n        let tmpData = sysDatasetObj.getVisTreeData()\n        if('data' in tmpData){\n          this.width = this.$refs.nodeLinkPanel.clientWidth\n          this.height = this.$refs.nodeLinkPanel.clientHeight\n          this.initalLabel = sysDatasetObj.getVisTreeData()['data']['doi']\n          this.draw_node_link_tree(this.width, this.height, tmpData)\n        }\n        else{\n          this.treeSize = 0\n          this.treeHeight = 0\n          this.treeWidth = 0\n        }\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'visTreeDataState',\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n      'DATA_QUERY_INDEX'\n    ]),\n    treeChange: function(command){\n       this.DATA_QUERY_INDEX(parseInt(this.value))\n    },\n    draw_node_link_tree: function(width, height, data){\n        let self = this\n\n        let data_index = sysDatasetObj.getSameTree(parseInt(data['index'])-1)\n        d3.selectAll(\".dot\").classed(\"dot-highlighted\", false)\n\n        let tmp_transform = d3.select('#dot'+data_index).attr(\"transform\")\n        let tmp_data = d3.select('#dot'+data_index).data()\n\n        let tmp_x = +d3.select('#dot'+data_index).attr(\"x\")\n        let tmp_y = +d3.select('#dot'+data_index).attr(\"y\")\n        let tmp_r = +d3.select('#dot'+data_index).attr(\"r\")\n\n        let tmp_selected = d3.select('#dot'+data_index).attr(\"class\")\n        let dot_selected_flag = false\n        if (tmp_selected.search(/dot-selected/) != -1){\n            dot_selected_flag = true\n        }\n        \n        d3.select('#dot'+data_index).remove()\n\n        d3.select(\".overview-svg\")\n        .selectAll('#dot'+data_index)\n            .data(tmp_data)\n            .enter()\n            .append(\"circle\")\n            .attr(\"class\",\"dot\")\n            .attr(\"id\", function(d) { return \"dot\"+data_index})\n            .classed(\"dot-highlighted\", true)\n            .classed(\"dot-selected\", dot_selected_flag)\n            .attr(\"transform\", function(d){\n              return tmp_transform;\n            })\n            .attr(\"m\", function(d) {return d['m']})\n            .attr(\"r\", function(){\n              return tmp_r;\n            })\n            .on('click', function(){\n                self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"m\")))\n            });\n\n        self.treeSize = data['size']\n        self.treeHeight = data['height']\n        self.treeWidth = data['width']\n        data = data['data']\n\n        let scale = 300\n\n        let isVertical = 1;\n        let min_width_height = Math.min(width, height);\n        let trbl = (min_width_height * 20) / scale;\n        let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n        let innerWidth = width - 40;\n        let innerHeight = height - 47;\n\n        let r = (min_width_height * 3)/ scale;\n        let r_min = (min_width_height * 2.5)/ scale;\n        let r_max = (min_width_height * 3.5)/ scale;\n        let strokeWidth = (min_width_height * r/5) / scale;\n        let strokeOpacity = (min_width_height *0.4) / scale;\n\n        let degree_max = 0\n        let root = d3.tree().size([innerWidth, innerHeight]) (\n            d3.hierarchy(data)\n                .eachBefore(d=>{\n            })\n        );\n\n        let DimGray = d3.rgb(105,105,105)\n        let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n        let color = d3.interpolate(DimGray, DimGray)\n\n        self.RootDes = root.descendants()\n        let RootDes = self.RootDes\n\n        const svg = d3.select(self.$el).select('#node-link-tree')\n\n        svg.selectAll('.vis-tree-name').remove();\n        svg.append(\"text\")\n          .attr(\"class\", \"vis-tree-name\")\n          .attr(\"y\", height-5)\n          .attr(\"x\", width/2)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"20\")\n          .attr(\"fill\", \"#808080\")\n          .text(data['doi']);\n\n        let t = svg.transition()\n            .duration(750)\n\n        let g = svg.append('g')\n            .attr('id', 'g-level-1')\n            .attr('transform', `translate(${20}, ${10})`);\n\n        let path_logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([5, 1]);\n\n        if(isVertical)\n        {\n            g.append('g')\n            .attr('id', 'g-level-1-path')\n            .attr('class', 'gLink')\n            .attr('stroke-opacity', 0.2)\n            .attr('stroke-width', function(){\n              return path_logScale(self.treeSize)\n            })\n            .attr(\"stroke\", \"red !important\")\n            .attr(\"style\", \"fill: red !important\")\n            .selectAll('path')\n            .data(root.links(), function(d, i) {\n            })\n            .join(\n                enter => enter.append('path')\n                .attr(\"stroke\", \"red !important\")\n                .attr(\"fill\", \"red !important\")\n                .each(function(d){d.target.linkNode=self;})\n                .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                update => update\n                .call(update => update.transition(t)\n                .each(function(d){d.target.linkNode=self;})\n                .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                exit => exit\n                .remove()\n            );\n\n            let g_node_stoke = g.append('g')\n                       .attr(\"class\", \"g-nodes-stroke\")\n\n            // 保留\n            let node = g.append('g')\n            .attr('id', 'g-level-1-node')\n            .selectAll('g')\n            .data(RootDes, function(d, i) {\n            })\n            .join(\n                enter => enter.append('g')\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                update => update\n                .call(update => update.transition(t)\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                exit => exit\n                .remove()\n            )\n            let logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([10, 5]);\n\n            \n            let node_stroke = []\n\n            d3.select(self.$el).select('#node_link_tree').selectAll('.tree-node').remove();\n\n            node.append(\"g\")\n            .attr(\"id\", d=>\"node-stroke-\"+d['data'].index)\n            .append(\"circle\")\n            .attr('class', 'tree-node')\n            .attr('id', d=> 'node-id-' + d['data'].index)\n            .attr(\"fill\", function(d){\n              if('color_flag' in d['data'] && d['data']['color_flag']){\n                for(let i=0; i<d['data']['color'].length; i++){\n                  let tmp = {}\n                  tmp['node_data'] = d \n                  tmp['index'] = d['data']['index']\n                  tmp['color'] = d['data']['color'][i]\n                  tmp['x'] = d.x\n                  tmp['y'] = d.y\n                  tmp['r'] = logScale(self.treeSize)*0.75 + i*2 + 1\n                  node_stroke.push(tmp)\n                }\n                return \"white\"\n              }\n              return \"steelblue\"\n            })\n            .attr(\"r\", function(d){\n              return logScale(self.treeSize)\n            })\n            .call(self.tooltip_ele(\"node-link-tree\"))\n\n\n            for(let tmp_stroke of node_stroke){\n              d3.select('#node-stroke-'+tmp_stroke['index']).append(\"circle\")\n              .attr(\"stroke\", tmp_stroke['color'])\n              .attr(\"stroke-width\", '2')\n              .attr(\"r\", tmp_stroke['r'])\n              .attr(\"fill-opacity\", '0')\n              .attr(\"transform\", d => `translate(${0},${0})`)\n              .call(self.tooltip_ele(\"node-link-tree\"))\n            }\n\n\n        }\n\n    }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.vis-panel-view{\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  right: 0%;\n  bottom: 0%;\n  .title-text{\n    position: absolute;\n    font-size: 1rem;\n    font-weight: bolder;\n    color: black;\n    top: 5px;\n    left: 5px;\n  }\n  .size-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 30px;\n    left: 5px;\n  }\n  .height-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 50px;\n    left: 5px;\n  }\n  .width-text{\n    position: absolute;\n    font-size: 1rem;\n    color: #808080;\n    top: 70px;\n    left: 5px;\n  }\n  .node-link-tree-panel {\n    position: absolute;\n    top: 2%;\n    bottom: 2%;\n    left: 2%;\n    right: 2%;\n  }\n  .tree-select{\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    width: 100px;\n\n  }\n}\n\n</style>"],"sourceRoot":"src/views"}]}
{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/VoronoiTreemap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/VoronoiTreemap.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport * as seedrandom from 'seedrandom';\nimport golbalVariable from \"../global\";\nimport recursive from \"../recursive\";\nexport default {\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object\n  },\n  watch: {\n    width: function width() {\n      this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    },\n    height: function height() {\n      this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    },\n    treeViewState: function treeViewState() {\n      this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'treeViewState'])),\n  data: function data() {\n    return {\n      counter: 0,\n      scale: 400\n    };\n  },\n  mounted: function mounted() {\n    this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods: {\n    draw_voronoi_treemap: function draw_voronoi_treemap(jsonpath, jsondata, width, height) {\n      var _this = this;\n\n      var needlable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var seed = seedrandom(2022);\n      d3.select('#voronoi_treemap').selectAll('*').remove();\n      var data = JSON.parse(JSON.stringify(jsondata));\n      data = this.recursive(data);\n      var keep_random_highlight = [];\n\n      if (this.random_highlight != null) {\n        var namelist = d3.hierarchy(data).descendants().map(function (d) {\n          return d.data.name;\n        });\n\n        if (golbalVariable.highlight_2leaves) {\n          namelist = d3.hierarchy(data).leaves().map(function (d) {\n            return d.data.name;\n          });\n        }\n\n        for (var k = 0; k < Object.keys(this.random_highlight).length; k++) {\n          var randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]];\n          keep_random_highlight.push(\".\" + namelist[Math.floor(randomValue * (namelist.length - 1))] + \"vt\");\n        }\n      } // console.log(keep_random_highlight)\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n\n      var min_width_height = Math.min(width, height);\n      var trbl = min_width_height * 10 / this.scale;\n      var text_x_r = min_width_height * 7 / this.scale;\n      var margin = {\n        top: trbl,\n        right: trbl,\n        bottom: trbl,\n        left: trbl\n      };\n      var voronoiTreemap = d3VoronoiTreemap.voronoiTreemap().prng(seed).clip([[margin.left, margin.top], [margin.left, height - margin.bottom], [width - margin.right, height - margin.bottom], [width - margin.right, margin.top]]);\n      var root = d3.hierarchy(data).eachBefore(function (d) {\n        d.data.id = (d.parent ? d.parent.data.id + '.' : '') + d.data.name;\n      }).sum(function (d) {\n        return d.value;\n      }).sort(function (a, b) {\n        return b.value - a.value;\n      });\n      voronoiTreemap(root);\n      var allNodes = root.descendants().sort(function (a, b) {\n        return a.depth - b.depth;\n      }).map(function (d, i) {\n        return Object.assign({}, d, {\n          id: i\n        });\n      });\n\n      var title = function title(n) {\n        return \"PATH: \".concat(n.data.id, \"\\nNAME: \").concat(n.data.name, \"\\nVALUE: \").concat(n.value.toLocaleString(\"en\"));\n      };\n\n      var DimGray = d3.rgb(105, 105, 105);\n      var LightGray = d3.rgb(211, 211, 211);\n      var color = d3.scaleOrdinal([DimGray, LightGray]);\n      var svg = d3.select(this.$el).select('#voronoi_treemap').attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\").attr(\"font-family\", \"sans-serif\");\n      var g = svg.append('g');\n      g.append('style').text(\"\\n            .rect-vt-active {\\n              stroke: steelblue !important;\\n              stroke-opacity: 1;\\n              stroke-width: 2px;\\n            }\\n          \");\n      var node = g.selectAll('a').data(allNodes).join('a');\n      node.append('path').attr('class', function (d) {\n        return d.data.name + 'vt';\n      }).style('fill', function (d) {\n        return d.depth === 1 ? color(d.data.name) : 'none';\n      }).attr('d', function (d) {\n        return 'M' + d.polygon.join('L') + 'Z';\n      }).attr('stroke', '#F5F5F2').attr('stroke-width', function (d) {\n        return min_width_height * (8 - d.depth * 5) / _this.scale;\n      }).style('fill-opacity', function (d) {\n        return d.depth >= 1 ? 1 : 0;\n      }).attr('pointer-events', function (d) {\n        return d.depth >= 2 ? 'all' : 'none';\n      }).on(\"mouseover\", mouseovered(true, keep_random_highlight)).on(\"mouseout\", mouseovered(false, keep_random_highlight));\n      node.append('title').text(function (d) {\n        return title(d);\n      });\n\n      if (needlable) {\n        node.append(\"text\").data(allNodes.filter(function (d) {\n          return d.depth === 2;\n        })).join('text').attr('class', function (d) {\n          return \"label-\".concat(d.id);\n        }).attr('text-anchor', 'middle').attr('transform', function (d) {\n          return \"translate(\".concat(d.polygon.site.x, \",\").concat(d.polygon.site.y, \")\");\n        }).text(function (d) {\n          return d.data.name;\n        }).style('font-size', text_x_r).style('fill', '#F5F5F5');\n      }\n\n      function mouseovered(active, keep_random_highlight) {\n        for (var _k = 0; _k < keep_random_highlight.length; _k++) {\n          d3.select(keep_random_highlight[_k]).style('stroke', 'steelblue').style('stroke-width', '2px');\n        }\n\n        return function (d, i) {\n          d3.select(this).classed(\"rect-vt-active\", active);\n        };\n      } // });\n\n    }\n  }\n};",{"version":3,"sources":["VoronoiTreemap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"voronoi_treemap\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport * as seedrandom from 'seedrandom'\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n  name: 'Tree',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_voronoi_treemap(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_voronoi_treemap: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      let seed = seedrandom(2022)\n\n      d3.select('#voronoi_treemap').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"vt\")\n        }\n      }\n      // console.log(keep_random_highlight)\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n        \n          let min_width_height = Math.min(width, height);\n\n          let trbl = (min_width_height * 10) / this.scale;\n          let text_x_r = (min_width_height * 7) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n\n          let voronoiTreemap = d3VoronoiTreemap.voronoiTreemap()\n            .prng(seed)\n            .clip([\n            \t[margin.left, margin.top],\n  \t\t        [margin.left, height - margin.bottom],\n  \t\t        [width - margin.right, height - margin.bottom],\n  \t\t        [width - margin.right, margin.top],\n              ])\n\n          let root = d3.hierarchy(data)\n              .eachBefore(function(d){\n                d.data.id = (d.parent? d.parent.data.id+'.':'')+d.data.name;\n              })\n              .sum( d=> d.value )\n              .sort((a,b) => b.value - a.value)\n          voronoiTreemap(root)\n\n          let allNodes = root.descendants()\n          \t.sort((a,b)=>a.depth - b.depth)\n          \t.map((d,i)=>Object.assign({},d,{id:i}));\n          \n          let title = function(n){return `PATH: ${n.data.id}\\nNAME: ${n.data.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)       \n          let color = d3.scaleOrdinal([DimGray,LightGray])\n\n          const svg = d3.select(this.$el)\n            .select('#voronoi_treemap')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n\n          g.append('style').text(`\n            .rect-vt-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 2px;\n            }\n          `);\n\n          let node = g.selectAll('a')\n          \t.data(allNodes)\n          \t.join('a');\n\n          node.append('path')\n            .attr('class', d=>d.data.name+'vt')\n          \t.style('fill', d => d.depth === 1 ? color(d.data.name) : 'none')\n            .attr('d', d=>'M'+d.polygon.join('L')+'Z')\n    \t\t    .attr('stroke', '#F5F5F2')\n    \t\t    .attr('stroke-width', d => (min_width_height*(8 - d.depth * 5))/this.scale)\n    \t\t    .style('fill-opacity', d => d.depth >= 1 ? 1 : 0)\n    \t\t    .attr('pointer-events', d => d.depth >= 2 ? 'all' : 'none')\n            .on(\"mouseover\", mouseovered(true,keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false,keep_random_highlight));\n\n          node.append('title')\n            .text(d=>title(d))\n\n          if(needlable){\n            node.append(\"text\")\n      \t\t\t\t.data(allNodes.filter(d =>d.depth === 2))\n      \t\t\t  .join('text')\n      \t\t\t    .attr('class', d => `label-${d.id}`)\n      \t\t\t    .attr('text-anchor', 'middle')\n      \t\t\t    .attr('transform', d => `translate(${d.polygon.site.x},${d.polygon.site.y})`)\n      \t\t\t    .text(d => d.data.name)\n      \t\t\t    .style('font-size', text_x_r)\n      \t\t\t    .style('fill', '#F5F5F5')\n          }\n\n          function mouseovered(active,keep_random_highlight){\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).style('stroke', 'steelblue').style('stroke-width','2px');\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-vt-active\", active);\n            }\n          }\n\n      // });\n\n    }\n  }\n}\n</script>"],"sourceRoot":"src/components"}]}
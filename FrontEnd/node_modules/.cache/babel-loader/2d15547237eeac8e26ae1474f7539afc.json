{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/flowchart/render.js","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/flowchart/render.js","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/eslint-loader/index.js","mtime":1660192275000}],"contextDependencies":[],"result":["import * as d3 from 'd3';\nimport { roundTo20 } from \"../../utils/math\";\n\nfunction render(g, node, isSelected, excludeShownAttrArray) {\n  node.width = node.width || 120;\n  node.height = node.height || 60;\n  var borderWidth = isSelected ? '2.5px' : '1px'; // body text\n\n  var textList = []; // if (node.type === 'condition') {\n  //   textList.push(node['Name'])\n  // } else {\n  //   for (let attr in node) {\n  //     if (excludeShownAttrArray.indexOf(attr) === -1) {\n  //       if (node[attr].length > 0) {\n  //         let oneLineText = attr + ': ' + node[attr] \n  //         textList.push(oneLineText)\n  //       }\n  //     }\n  //   }\n  // }\n  // render the condition node, which in a diamond shape\n\n  if (node.type === 'condition') {\n    var conditionNode = g.append('path').attr('class', 'condition node-body').attr(\"d\", function (d, i) {\n      var start = 'M ';\n      var end = ' Z';\n      var pointsCoord = [node.x + node.width / 2, node.y, node.x + node.width, node.y + node.height / 2, node.x + node.width / 2, node.y + node.height, node.x, node.y + node.height / 2];\n      var pointCoordPath = pointsCoord.join(' ');\n      return start + pointCoordPath + end;\n    });\n  } else {\n    // render the operation nodes, which are rectangle shape\n    // render component body\n    var body = g.append('rect').attr('class', function (d, i) {\n      var classList = ['body', 'node-body'];\n\n      if (isSelected) {\n        classList.push('selected');\n      }\n\n      return classList.join(' ');\n    }).attr('x', node.x).attr('y', node.y).attr('rx', 5).attr('ry', 5).attr('width', node.width + 'px').attr('height', node.height + 'px'); // render component title\n    // g.append('rect')\n    //   .attr('class', function(d, i) {\n    //     let classList = ['body', 'node-title']\n    //     if (isSelected) {\n    //       classList.push('selected')\n    //     }\n    //     return classList.join(' ')\n    //   })\n    //   .attr('x', node.x)\n    //   .attr('y', node.y)\n    //   .attr('width', node.width + 'px')\n    //   .attr('height', '20px')\n    //   .attr('stroke', borderColor)\n    //   .attr('fill', node.color)\n    // .style('stroke-width', borderWidth)\n    // .style('width', node.width + 'px');\n\n    if (node['type'] == 'data') {\n      g.append('text').attr('x', node.x + 4).attr('y', node.y + 15).attr('class', 'unselectable title').text(function () {\n        return \"data\";\n      }).each(function wrap() {\n        var self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n\n        while (textLength > node.width - 2 * 4 && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    } else if (node['type'] == 'query') {\n      node['regexName'] = sysDatasetObj.returnRegexName(node['regexIndex']);\n      g.append('text').attr('x', node.x + 30).attr('y', node.y + 30).attr('class', 'unselectable title').text(function () {\n        return node['regexName'];\n      }).each(function wrap() {\n        var self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n\n        while (textLength > node.width - 2 * 4 && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    } else if (node['type'] == 'vis') {\n      g.append('text').attr('x', node.x + 30).attr('y', node.y + 30).attr('class', 'unselectable title').text(function () {\n        return \"vis\";\n      }).each(function wrap() {\n        var self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n\n        while (textLength > node.width - 2 * 4 && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    }\n  }\n\n  var bodyTextY;\n  var bodyTextX;\n\n  if (node.type === 'condition') {\n    bodyTextY = node.y + 5 + roundTo20(node.height) / 2;\n    bodyTextX = node.x + node.width / 2;\n\n    if (textList.length > 0) {\n      g.append('text').attr('class', 'unselectable content').attr('text-anchor', 'middle').attr('x', bodyTextX).attr('y', bodyTextY).text(function (d) {\n        return textList[0];\n      });\n    }\n  } else {\n    bodyTextY = node.y + 25 + roundTo20(node.height - 20) / 2;\n    g.selectAll('.text-group').remove();\n    g.selectAll('.text-group').data(textList).enter().append('text').attr('x', node.x + 10).attr('y', function (d, i) {\n      return node.y + 40 + 20 * i;\n    }).attr('class', 'unselectable content').attr('text-anchor', 'start').text(function (d) {\n      return d;\n    }).each(function wrap() {\n      var self = d3.select(this),\n          textLength = self.node().getComputedTextLength(),\n          text = self.text();\n\n      while (textLength > node.width - 2 * 4 && text.length > 0) {\n        text = text.slice(0, -1);\n        self.text(text + '...');\n        textLength = self.node().getComputedTextLength();\n      }\n    });\n  }\n}\n\nexport default render;",{"version":3,"sources":["/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/components/flowchart/render.js"],"names":["d3","roundTo20","render","g","node","isSelected","excludeShownAttrArray","width","height","borderWidth","textList","type","conditionNode","append","attr","d","i","start","end","pointsCoord","x","y","pointCoordPath","join","body","classList","push","text","each","wrap","self","select","textLength","getComputedTextLength","length","slice","sysDatasetObj","returnRegexName","bodyTextY","bodyTextX","selectAll","remove","data","enter"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport {roundTo20} from '../../utils/math';\n\nfunction render(g, node, isSelected, excludeShownAttrArray) {\n  node.width = node.width || 120;\n  node.height = node.height || 60;\n  let borderWidth = isSelected ? '2.5px' : '1px';\n  // body text\n  let textList = []\n  // if (node.type === 'condition') {\n  //   textList.push(node['Name'])\n  // } else {\n  //   for (let attr in node) {\n  //     if (excludeShownAttrArray.indexOf(attr) === -1) {\n  //       if (node[attr].length > 0) {\n  //         let oneLineText = attr + ': ' + node[attr] \n  //         textList.push(oneLineText)\n  //       }\n  //     }\n  //   }\n  // }\n  // render the condition node, which in a diamond shape\n  if (node.type === 'condition') {\n     let conditionNode = g.append('path')\n       .attr('class', 'condition node-body')\n       .attr(\"d\", function(d, i) {\n         let start = 'M '\n         let end = ' Z'\n         let pointsCoord = [node.x+node.width/2, node.y, node.x+node.width, node.y+node.height/2, node.x+node.width/2, node.y+node.height, node.x, node.y+node.height/2]\n         let pointCoordPath = pointsCoord.join(' ')\n         return start + pointCoordPath + end\n       })\n  } \n  else {\n    // render the operation nodes, which are rectangle shape\n    // render component body\n    let body = g.append('rect')\n      .attr('class', function(d, i) {\n        let classList = ['body', 'node-body']\n        if (isSelected) {\n          classList.push('selected')\n        }\n        return classList.join(' ')\n      })\n      .attr('x', node.x)\n      .attr('y', node.y)\n      .attr('rx', 5)\n      .attr('ry', 5)\n      .attr('width', node.width + 'px')\n      .attr('height', node.height + 'px')\n    // render component title\n    // g.append('rect')\n    //   .attr('class', function(d, i) {\n    //     let classList = ['body', 'node-title']\n    //     if (isSelected) {\n    //       classList.push('selected')\n    //     }\n    //     return classList.join(' ')\n    //   })\n    //   .attr('x', node.x)\n    //   .attr('y', node.y)\n    //   .attr('width', node.width + 'px')\n    //   .attr('height', '20px')\n    //   .attr('stroke', borderColor)\n    //   .attr('fill', node.color)\n      // .style('stroke-width', borderWidth)\n      // .style('width', node.width + 'px');\n    if(node['type'] == 'data'){\n      g.append('text')\n      .attr('x', node.x + 4)\n      .attr('y', node.y + 15)\n      .attr('class', 'unselectable title')\n      .text(() => \"data\")\n      .each(function wrap() {\n        let self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n        while (textLength > (node.width - 2 * 4) && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    }\n    else if(node['type'] == 'query'){\n      node['regexName'] = sysDatasetObj.returnRegexName(node['regexIndex'])\n      g.append('text')\n      .attr('x', node.x + 30)\n      .attr('y', node.y + 30)\n      .attr('class', 'unselectable title')\n      .text(() => node['regexName'])\n      .each(function wrap() {\n        let self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n        while (textLength > (node.width - 2 * 4) && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    }\n    else if(node['type'] == 'vis'){\n      g.append('text')\n      .attr('x', node.x + 30)\n      .attr('y', node.y + 30)\n      .attr('class', 'unselectable title')\n      .text(() => \"vis\")\n      .each(function wrap() {\n        let self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n        while (textLength > (node.width - 2 * 4) && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n    }\n  }\n  let bodyTextY;\n  let bodyTextX;\n  if (node.type === 'condition') {\n    bodyTextY = node.y + 5 + roundTo20(node.height) / 2;\n    bodyTextX = node.x + node.width / 2\n    if (textList.length > 0) {\n      g.append('text')\n        .attr('class', 'unselectable content')\n        .attr('text-anchor', 'middle')\n        .attr('x', bodyTextX)\n        .attr('y', bodyTextY)\n        .text(function(d) {return textList[0];})\n    }\n  } else {\n    bodyTextY = node.y + 25 + roundTo20(node.height - 20) / 2;\n    g.selectAll('.text-group')\n      .remove()\n    g.selectAll('.text-group')\n      .data(textList)\n      .enter()\n      .append('text')\n      .attr('x', node.x + 10)\n      .attr('y', function(d, i) {\n        return node.y + 40 + 20 * i\n      })\n      .attr('class', 'unselectable content')\n      .attr('text-anchor', 'start')\n      .text(function(d) {return d;})\n      .each(function wrap() {\n        let self = d3.select(this),\n            textLength = self.node().getComputedTextLength(),\n            text = self.text();\n        while (textLength > (node.width - 2 * 4) && text.length > 0) {\n          text = text.slice(0, -1);\n          self.text(text + '...');\n          textLength = self.node().getComputedTextLength();\n        }\n      });\n  }\n}\n\nexport default render;"]}]}
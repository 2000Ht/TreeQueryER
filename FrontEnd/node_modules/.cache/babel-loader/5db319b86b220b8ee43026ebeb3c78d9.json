{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/GraphPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/GraphPanel.vue","mtime":1664106011785},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport Vis from \"vis\";\nexport default {\n  name: 'GraphPanel',\n  components: {},\n  props: {},\n  data: function data() {\n    return {};\n  },\n  beforeMount: function beforeMount() {},\n  mounted: function mounted() {\n    this.drawNetwork();\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode'])),\n  created: function created() {},\n  methods: {\n    drawNetwork: function drawNetwork() {\n      var nodesJson = d3.json('treeDataset/CitationNetworkId.json').then(function (data) {\n        return data;\n      });\n      var edgesJson = d3.json('treeDataset/CitationNetwork.json').then(function (data) {\n        return data;\n      });\n      var nodes = new Vis.DataSet([]); // create an array with edges\n\n      var edges = new Vis.DataSet([{\n        from: 1,\n        to: 3\n      }, {\n        from: 1,\n        to: 2\n      }, {\n        from: 2,\n        to: 4\n      }, {\n        from: 2,\n        to: 5\n      }, {\n        from: 3,\n        to: 3\n      }]); // create a network\n\n      var container = document.getElementById('myNetwork'); // provide the data in the vis format\n\n      var data = {\n        nodes: nodes,\n        edges: edges\n      };\n      var options = {\n        width: '100%',\n        height: '100%'\n      }; // initialize your network!\n\n      var network = new Vis.Network(container, data, options);\n    }\n  }\n};",{"version":3,"sources":["GraphPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAOA,SAAA,QAAA,EAAA,YAAA,QAAA,MAAA;AACA,OAAA,GAAA,MAAA,KAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,UAAA,EAAA,EAFA;AAIA,EAAA,KAAA,EAAA,EAJA;AAOA,EAAA,IAPA,kBAOA;AACA,WAAA,EAAA;AAGA,GAXA;AAYA,EAAA,WAZA,yBAYA,CAEA,CAdA;AAeA,EAAA,OAfA,qBAeA;AACA,SAAA,WAAA;AACA,GAjBA;AAkBA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA,uBAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,aAAA;AACA;AAHA,GAlBA;AAuBA,EAAA,QAAA,oBACA,QAAA,CAAA,CACA,aADA,CAAA,CADA,CAvBA;AA4BA,EAAA,OA5BA,qBA4BA,CAEA,CA9BA;AA+BA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,SAAA,GAAA,EAAA,CAAA,IAAA,CAAA,oCAAA,EACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,eAAA,IAAA;AACA,OAHA,CAAA;AAIA,UAAA,SAAA,GAAA,EAAA,CAAA,IAAA,CAAA,kCAAA,EACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,eAAA,IAAA;AACA,OAHA,CAAA;AAIA,UAAA,KAAA,GAAA,IAAA,GAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CATA,CAaA;;AACA,UAAA,KAAA,GAAA,IAAA,GAAA,CAAA,OAAA,CAAA,CACA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OALA,CAAA,CAAA,CAdA,CAsBA;;AACA,UAAA,SAAA,GAAA,QAAA,CAAA,cAAA,CAAA,WAAA,CAAA,CAvBA,CAyBA;;AACA,UAAA,IAAA,GAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA;AAIA,UAAA,OAAA,GAAA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,MAAA,EAAA;AAFA,OAAA,CA9BA,CAoCA;;AACA,UAAA,OAAA,GAAA,IAAA,GAAA,CAAA,OAAA,CAAA,SAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AACA;AAvCA;AA/BA,CAAA","sourcesContent":["<template>\n  <div class=\"graph-vis-view\">\n    <div id=\"myNetwork\" class=\"myChart\" width=\"100%\" height=\"100%\"></div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport Vis from \"vis\";\n\nexport default {\n  name: 'GraphPanel',\n  components: {\n  },\n  props: {\n    \n  },\n  data() {\n    return {\n\n    }\n  },\n  beforeMount(){\n    \n  },\n  mounted() {\n    this.drawNetwork()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    drawNetwork(){\n        var nodesJson = d3.json('treeDataset/CitationNetworkId.json')\n                        .then (function(data){\n                            return data\n        })\n        var edgesJson = d3.json('treeDataset/CitationNetwork.json')\n                        .then (function(data){\n                            return data\n        })\n        var nodes = new Vis.DataSet([\n            \n        ]);\n\n        // create an array with edges\n        var edges = new Vis.DataSet([\n        { from: 1, to: 3 },\n        { from: 1, to: 2 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 },\n        { from: 3, to: 3 },\n        ]);\n\n        // create a network\n        var container = document.getElementById('myNetwork');\n\n        // provide the data in the vis format\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n        var options = {\n            width: '100%',\n            height: '100%',\n\n        };\n\n        // initialize your network!\n        var network = new Vis.Network(container, data, options);\n        }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.graph-vis-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .myChart{\n        position: absolute;\n        top: 0%;\n        bottom: 0%;\n        left: 0%;\n        right: 0%;\n    }\n}\n\n</style>"],"sourceRoot":"src/views"}]}
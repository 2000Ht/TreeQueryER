{"remainingRequest":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/DataFlowView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/src/views/DataFlowView.vue","mtime":1648714649000},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ht.mi/Downloads/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport ComponentDialog from \"../components/ComponentDialog\";\nimport ConnectionDialog from \"../components/ConnectionDialog\";\nimport DescriptionDialog from \"../components/DescriptionDialog\";\nimport NodeDialog from \"../components/NodeDialog\";\nimport Flowchart from \"../components/flowchart/Flowchart\";\nimport { loadHierarchicalData } from '@/data/dataloading.js';\nimport { getComponentKey } from '@/utils/componentkey.js';\nimport * as d3 from \"d3\";\nexport default {\n  name: 'DataFlowView',\n  components: {\n    ConnectionDialog: ConnectionDialog,\n    ComponentDialog: ComponentDialog,\n    DescriptionDialog: DescriptionDialog,\n    NodeDialog: NodeDialog,\n    Flowchart: Flowchart\n  },\n  props: {},\n  data: function data() {\n    return {\n      nodes: [],\n      connections: [],\n      nodeForm: {\n        target: null\n      },\n      connectionForm: {\n        target: null,\n        operation: null\n      },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false,\n      componentDialogVisible: false,\n      descriptionDialogVisible: false,\n      defaultX: 10,\n      defaultY: 30,\n      defaultWidth: 60,\n      defaultHeight: 60,\n      componentList: [{\n        type: 'data',\n        color: '#fdbf6f',\n        name: 'data'\n      }, {\n        type: 'query',\n        color: '#ff7f00',\n        name: 'query'\n      }, {\n        type: 'vis',\n        color: '#cab2d6',\n        name: 'vis'\n      }],\n      // default components in the component panel\n      // the attributes be excluded in the node editing and edge editing dialog \n      excludeShownAttrArray: ['type', 'color', 'render', 'width', 'height', 'x', 'y', 'name', 'id'],\n      descriptionList: [],\n      descriptionObj: {},\n      visible: false,\n      descriptionDialogTitle: '' // the title is \"new description\" by default\n\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  computed: _objectSpread({}, mapState(['initialData'])),\n  methods: _objectSpread({}, mapMutations(['UPDATE_CURRENT_REGEX', 'DELETE_REGEX_LIST', 'SHOW_REVIEW', 'SHOW_VISVIEW', 'UPDATE_CURRENT_DATA', 'UPDATE_REVIEW_DATA']), {\n    handleChartSave: function () {\n      var _handleChartSave = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(nodes, connections) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function handleChartSave(_x, _x2) {\n        return _handleChartSave.apply(this, arguments);\n      }\n\n      return handleChartSave;\n    }(),\n    handleEditNode: function handleEditNode(node) {\n      // edit the detailed information of nodes when clicking \"edit\" button\n      // specifically, show the dialog of editing nodes' detailed information\n      this.nodeForm.target = node;\n\n      if (node['type'] == 'query') {\n        //this.nodeDialogVisible = true;\n        this.UPDATE_CURRENT_REGEX(node['regexIndex']);\n        this.UPDATE_REVIEW_DATA();\n        this.SHOW_REVIEW();\n      }\n    },\n    handleEditConnection: function handleEditConnection(connection) {\n      // edit the detailed information of paths when clicking \"edit\" button\n      // Specifically, show the dialog of editing paths' detailed information\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n    handleAddComponent: function handleAddComponent(componentObj) {\n      // The component object contains\n      // 1. name\n      // 2. type\n      // 3. color\n      // 4. many attributes in attribute list [['attribute1'], ['attribute2'], ...]\n      this.componentList.push(componentObj);\n    },\n    handleAddDescription: function handleAddDescription(descriptionObj) {\n      // add new description in the description list \n      var component = descriptionObj['component'];\n      var defaultX = this.defaultX,\n          defaultY = this.defaultY,\n          defaultWidth = this.defaultWidth,\n          defaultHeight = this.defaultHeight;\n      component['id'] = +new Date();\n      component['x'] = defaultX;\n      component['y'] = defaultY;\n      component['width'] = defaultWidth;\n      component['height'] = defaultHeight; // call the function of diagflow chart, add new components in the flowchart canvas\n\n      this.$refs.chart.add(component);\n      this.descriptionList.push(descriptionObj);\n    },\n    addComponent: function addComponent(component) {\n      // add new component in the component list\n      var defaultX = this.defaultX,\n          defaultY = this.defaultY,\n          defaultWidth = this.defaultWidth,\n          defaultHeight = this.defaultHeight;\n      var initComponent = {}; // id, x, y, width, height, name, type, and color are required attributes\n\n      initComponent['id'] = +new Date();\n      initComponent['x'] = defaultX;\n      initComponent['y'] = defaultY;\n      initComponent['width'] = defaultWidth;\n      initComponent['height'] = defaultHeight; // defualt attributes are name, type, and color\n\n      initComponent['name'] = component.name;\n      initComponent['type'] = component.type;\n      initComponent['color'] = component.color;\n\n      if (component['type'] == 'query') {\n        initComponent['regexIndex'] = sysDatasetObj.initialRegexNode();\n        initComponent['regexName'] = 'untitled';\n      } // the attributes in the attribute list is the optional attribute\n\n\n      if (typeof component.attributes !== 'undefined') {\n        for (var i = 0; i < component.attributes.length; i++) {\n          var attrName = component.attributes[i];\n          initComponent[attrName] = \"\";\n        }\n      }\n\n      this.$refs.chart.add(initComponent);\n    },\n    showComponentDialog: function showComponentDialog() {\n      // show the component dialog \n      this.componentDialogVisible = true;\n    },\n    getDescTitle: function getDescTitle(descObj) {\n      if (typeof descObj['title'] === 'undefined' || descObj['title'].length === 0) {\n        return 'untitled';\n      }\n\n      return descObj['title'];\n    },\n    getDescContent: function getDescContent(descObj) {\n      if (typeof descObj['content'] === 'undefined' || descObj['content'].length === 0) {\n        return '';\n      }\n\n      return descObj['content'];\n    },\n    editDescObj: function editDescObj(descObj, index) {\n      // edit the description object\n      this.descriptionObj = descObj;\n      this.descriptionDialogTitle = \"Edit Description\"; // add the description object\n\n      this.descriptionDialogVisible = true;\n    },\n    removeDescObj: function removeDescObj(descObj, index) {\n      // remove the description object\n      this.descriptionList.splice(index, 1);\n    },\n    addDescObj: function addDescObj() {\n      // add the description object\n      // initialize the description Obj\n      this.descriptionObj = {\n        title: \"\",\n        content: \"\"\n      };\n      this.descriptionDialogTitle = \"New Description\"; // open the description dialog\n\n      this.descriptionDialogVisible = true;\n    },\n    description_mouseover: function description_mouseover(descObj) {\n      console.log('descObj', descObj);\n    },\n    dataClick: function dataClick() {\n      this.visible = false;\n      this.addComponent(this.componentList[1]);\n    }\n  })\n};",{"version":3,"sources":["DataFlowView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dataflow-view\">\n      <div id=\"page\">\n      <div id=\"header\">\n        <!-- <span class=\"navtitle\" style=\"padding-left: 1rem;\">Diagnosis Flow</span> -->\n        <!-- <el-divider direction=\"vertical\"></el-divider> -->\n        <span class=\"header-title\">\n          Query Flow Panel\n        </span>\n        <el-divider direction=\"vertical\"></el-divider>\n        <el-tooltip class='labelIcon' key=\"add\" content=\"add component\" effect=\"light\">\n          <span class=\"navitem\" @click=\"visible = false;addComponent(componentList[1])\">\n                <i class=\"el-icon-plus\"></i>\n          </span>\n        </el-tooltip>\n\n        <!-- <el-tooltip class='labelIcon' key=\"add\" content=\"add component\" effect=\"light\">\n          <span class=\"navitem\" \n                style=\"padding-left: 0.5rem; padding-right: 0.5rem;\">\n          <el-popover\n            placement=\"top\"\n            width=\"0\"\n            v-model=\"visible\">\n            <div style=\"text-align: center; margin: 0\">\n              <el-button size=\"mini\" type=\"text\" @click=\"visible = false;addComponent(componentList[0])\">Data</el-button>\n              <el-button size=\"mini\" type=\"text\" @click=\"visible = false;addComponent(componentList[1])\">Query</el-button>\n              <el-button size=\"mini\" type=\"text\" @click=\"visible = false;addComponent(componentList[2])\">Vis</el-button>\n            </div>\n            <el-button slot=\"reference\" type=\"text\" >+</el-button>\n          </el-popover>\n          </span>\n        </el-tooltip> -->\n        \n        <el-tooltip class='labelIcon' key=\"remove\" content=\"remove operation\" effect=\"light\">\n          <span class=\"navitem\" @click=\"$refs.chart.remove()\">\n                <i class=\"el-icon-delete\"></i>\n          </span>\n        </el-tooltip>\n        <!-- <el-tooltip class='labelIcon' key=\"save\" content=\"save results\" effect=\"light\">\n          <span class=\"navitem\" @click=\"$refs.chart.save()\" \n                style=\"padding-left: 0.5rem; padding-right: 0.5rem;\">\n                <i class=\"el-icon-download\"></i>\n          </span>\n        </el-tooltip> -->\n      </div>\n      <div class=\"container\">\n        <!-- flow chart authoring canvas -->\n        <div class=\"flowchart-container\">\n          <flowchart\n            ref=\"chart\"\n            :nodes=\"nodes\"\n            :connections=\"connections\"\n            @editnode=\"handleEditNode\"\n            :width=\"'100%'\"\n            :height=\"500\"\n            :readonly=\"false\"\n            @editconnection=\"handleEditConnection\"\n            @save=\"handleChartSave\"\n            :excludeShownAttrArray=\"excludeShownAttrArray\"\n            @addComponent=\"addComponent\">\n          </flowchart>\n        </div>\n        <!-- the dialog of adding new descriptions -->\n        <description-dialog\n          :dialogTitle.sync=\"descriptionDialogTitle\"\n          :descriptionObj.sync=\"descriptionObj\"\n          :visible.sync=\"descriptionDialogVisible\"\n          @adddescription=\"handleAddDescription\">\n        </description-dialog>\n        <!-- the dialog of adding new components -->\n        <component-dialog\n          :visible.sync=\"componentDialogVisible\"\n          @addcomponent=\"handleAddComponent\">\n        </component-dialog>\n        <!-- the dialog of editing nodes -->\n        <node-dialog\n          :visible.sync=\"nodeDialogVisible\"\n          :node.sync=\"nodeForm.target\"\n          :excludeShownAttrArray=\"excludeShownAttrArray\">\n        </node-dialog>\n        <!-- the dialog of editing links between nodes -->\n        <connection-dialog\n          :visible.sync=\"connectionDialogVisible\"\n          :connection.sync=\"connectionForm.target\"\n          :operation=\"connectionForm.operation\">\n        </connection-dialog>\n      </div>\n  </div>\n  </div>\n  \n</template>\n\n\n<script>\n\nimport { mapState, mapMutations } from 'vuex';\nimport ComponentDialog from \"../components/ComponentDialog\";\nimport ConnectionDialog from \"../components/ConnectionDialog\";\nimport DescriptionDialog from \"../components/DescriptionDialog\";\nimport NodeDialog from \"../components/NodeDialog\";\nimport Flowchart from \"../components/flowchart/Flowchart\";\nimport { loadHierarchicalData } from '@/data/dataloading.js'\nimport { getComponentKey } from '@/utils/componentkey.js'\nimport * as d3 from \"d3\";\n\nexport default {\n  name: 'DataFlowView',\n  components: {\n    ConnectionDialog,\n    ComponentDialog,\n    DescriptionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  props: {\n\n  },\n  data() {\n      return {\n        nodes: [],\n        connections: [],\n        nodeForm: { target: null },\n        connectionForm: { target: null, operation: null },\n        nodeDialogVisible: false,\n        connectionDialogVisible: false,\n        componentDialogVisible: false,\n        descriptionDialogVisible: false,\n        defaultX: 10,\n        defaultY: 30,\n        defaultWidth: 60,\n        defaultHeight: 60,\n        componentList: [\n          {type: 'data', color: '#fdbf6f', name: 'data'},\n          {type: 'query', color: '#ff7f00', name: 'query'},\n          {type: 'vis', color: '#cab2d6', name: 'vis'},\n        ],// default components in the component panel\n        // the attributes be excluded in the node editing and edge editing dialog \n        excludeShownAttrArray: ['type', 'color', 'render', 'width', 'height', 'x', 'y', 'name', 'id'],\n        descriptionList: [],\n        descriptionObj: {},\n        visible: false,\n        descriptionDialogTitle: '' // the title is \"new description\" by default\n      }\n  },\n async mounted() {},\n    computed: {\n    ...mapState([\n      'initialData'\n    ]),\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_CURRENT_REGEX',\n      'DELETE_REGEX_LIST',\n      'SHOW_REVIEW',\n      'SHOW_VISVIEW',\n      'UPDATE_CURRENT_DATA',\n      'UPDATE_REVIEW_DATA'\n    ]),\n    async handleChartSave(nodes, connections) {\n      // TODO save the canvas into bitmap image\n    },\n    handleEditNode(node) {\n      // edit the detailed information of nodes when clicking \"edit\" button\n      // specifically, show the dialog of editing nodes' detailed information\n      this.nodeForm.target = node;\n      if(node['type'] == 'query'){\n        //this.nodeDialogVisible = true;\n        this.UPDATE_CURRENT_REGEX(node['regexIndex'])\n        this.UPDATE_REVIEW_DATA()\n        this.SHOW_REVIEW()    \n      }\n    },\n    handleEditConnection(connection) {\n      // edit the detailed information of paths when clicking \"edit\" button\n      // Specifically, show the dialog of editing paths' detailed information\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n    handleAddComponent(componentObj) {\n      // The component object contains\n      // 1. name\n      // 2. type\n      // 3. color\n      // 4. many attributes in attribute list [['attribute1'], ['attribute2'], ...]\n      this.componentList.push(componentObj)\n    },\n    handleAddDescription(descriptionObj) {\n      // add new description in the description list \n      let component = descriptionObj['component']\n      let defaultX = this.defaultX, defaultY = this.defaultY, \n          defaultWidth = this.defaultWidth, defaultHeight = this.defaultHeight\n      component['id'] = +new Date()\n      component['x'] = defaultX\n      component['y'] = defaultY\n      component['width'] = defaultWidth\n      component['height'] = defaultHeight\n      // call the function of diagflow chart, add new components in the flowchart canvas\n      this.$refs.chart.add(component)\n      this.descriptionList.push(descriptionObj)\n    },\n    addComponent(component) {\n      // add new component in the component list\n      let defaultX = this.defaultX, defaultY = this.defaultY, \n          defaultWidth = this.defaultWidth, defaultHeight = this.defaultHeight\n      let initComponent = {}\n      // id, x, y, width, height, name, type, and color are required attributes\n      initComponent['id'] = +new Date()\n      initComponent['x'] = defaultX\n      initComponent['y'] = defaultY\n      initComponent['width'] = defaultWidth\n      initComponent['height'] = defaultHeight\n      // defualt attributes are name, type, and color\n      initComponent['name'] = component.name\n      initComponent['type'] = component.type\n      initComponent['color'] = component.color\n      if(component['type'] == 'query'){     \n        initComponent['regexIndex'] = sysDatasetObj.initialRegexNode()\n        initComponent['regexName'] = 'untitled'\n      }\n\n      // the attributes in the attribute list is the optional attribute\n      if (typeof(component.attributes) !== 'undefined') {\n        for (let i = 0; i < component.attributes.length; i++) {\n          let attrName = component.attributes[i]\n          initComponent[attrName] = \"\"\n        }\n      }\n      this.$refs.chart.add(initComponent)\n    },\n    showComponentDialog() {\n      // show the component dialog \n      this.componentDialogVisible = true;\n    },\n    getDescTitle(descObj) {\n      if ((typeof(descObj['title']) === 'undefined') || (descObj['title'].length === 0)) {\n        return 'untitled'\n      }\n      return descObj['title']\n    },\n    getDescContent(descObj) {\n      if ((typeof(descObj['content']) === 'undefined') || (descObj['content'].length === 0)) {\n        return ''\n      }\n      return descObj['content']\n    },\n    editDescObj(descObj, index) {\n      // edit the description object\n      this.descriptionObj = descObj\n      this.descriptionDialogTitle = \"Edit Description\"\n      // add the description object\n      this.descriptionDialogVisible = true\n    },\n    removeDescObj(descObj, index) {\n      // remove the description object\n      this.descriptionList.splice(index, 1)\n    },\n    addDescObj() {\n      // add the description object\n      // initialize the description Obj\n      this.descriptionObj = {title: \"\", content: \"\"}\n      this.descriptionDialogTitle = \"New Description\"\n      // open the description dialog\n      this.descriptionDialogVisible = true\n    },\n    description_mouseover(descObj) {\n      console.log('descObj', descObj)\n    },\n    dataClick(){\n      this.visible = false;\n      this.addComponent(this.componentList[1])\n    }\n  },\n};\n</script>\n<style lang=\"less\" scoped>\n@header-height: 1rem;\n@component-div-width: 0px;\n@description-div-width: 0px;\n@description-div-margin: 10px;\n.dataflow-view {\n  height: 100%;\n  width: 100%;\n  #page{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgb(255, 255, 255);\n  overflow-y: hidden;\n  #header {\n    position: absolute;\n    top: 0%;\n    left: 0%;\n    width: 100%;\n    height: 2rem;\n    border-top: #cccccc 1px solid;\n    // border-bottom: #cccccc 1px solid;\n    // background: #095FB0;\n    line-height: @header-height;\n    font-size: 1rem;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .header-title {\n      font-weight: bold;\n      margin-left: 1rem;\n    }\n    .navitem {\n      display: inline-block;\n      cursor: pointer;\n      margin: 0px 10px;\n      padding: 2px;\n      &:hover {\n        background: #eeeeee;\n      }\n    }\n    .navtitle {\n      cursor: pointer;\n    }\n    .el-button{\n      font-family:element-icons !important;\n      font-weight:330 !important;\n      font-size:25px !important;\n      color:white !important;\n    }\n  }\n  .container {\n    position: absolute;\n    top: 2rem;\n    width: 100%;\n    bottom: 0%;\n    left: 0%;\n    margin: auto;\n    .component-container {\n      position: absolute;\n      width: @component-div-width;\n      top: 0%;\n      bottom: 0%;\n      left: 0%;\n      margin: auto;\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n      overflow-y: auto;\n      .inner-container {\n        top: 0%;\n        height: auto;\n        left: 0%;\n        right: 0%;\n        .component {\n          width: @component-div-width - 25;\n          height: @component-div-width - 20;\n          margin-top: 7px;\n          opacity: 0.9;\n          cursor: pointer;\n          border: white 3px solid;\n          text-align: center;\n          vertical-align: middle;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          color: #444444;\n          font-weight: bold;\n          font-size: 12px;\n          position: relative;\n          .component-icon {\n            position: absolute;\n            left: 0%;\n            top: 0%;\n            height: 100%;\n            width: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 40px;\n            opacity: 0;\n            font-weight: bold;\n            background-color: white;\n            cursor: pointer;\n            &:hover {\n              opacity: 0.7 !important;\n            }\n          }\n          &:hover {\n            border: #999999 3px solid;\n          }\n          &.condition {\n            background-image: url('~@/assets/diamond.png');\n            background-repeat: no-repeat;\n            background-position: center;\n            background-size:  @component-div-width - 25;\n          }\n        }\n      }\n    }\n    .flowchart-container {\n      position: absolute;\n      right: @description-div-width;\n      top: 0%;\n      bottom: 0%;\n      left: @component-div-width;\n      margin: auto;\n    }\n    .detailed-decription-container {\n      position: absolute;\n      top: 0%;\n      bottom: 0%;\n      right: 0%;\n      width: @description-div-width;\n      display: flex;\n      flex-direction: column;\n      // justify-content: center;\n      border-left: 1px solid #dddddd;\n      .description {\n        height: 150px;\n        margin: @description-div-margin @description-div-margin 0 @description-div-margin;\n        width: @description-div-width - 2 * @description-div-margin;\n        border: 1px solid #dddddd;\n        font-size: 12px;\n        &:hover {\n          border: 1px solid steelblue;\n        }\n        &.hover {\n          border: 1px solid steelblue;\n        }\n        .description-title {\n          height: 20px;\n          background-color: #dddddd;\n          padding: 0px 10px;\n          .desc-icons {\n            float: right;\n            cursor: pointer;\n            .desc-icon {\n              padding-left: 3px;\n            }\n            .desc-edit {\n              &:hover {\n                color: steelblue;\n              }\n            }\n            .desc-close {\n              &:hover {\n                color: red;\n              }              \n            }\n          }\n        }\n        .description-content {\n          padding: 3px 10px;\n          overflow-y: auto;\n        }\n      }\n      .add-description {\n        height: 50px;\n        // border: 1px solid #dddddd;\n        // background-color: #efefef;\n        margin: @description-div-margin @description-div-margin 0 @description-div-margin;\n        text-align: center;\n        border: dashed 2px #eeeeee;\n        .el-icon-plus {\n          font-size: 35px;\n          font-weight: bold;\n          line-height: 50px;\n          color: #dddddd;\n          cursor: pointer;\n        }\n        &.hover {\n          border: dashed 1px #777777;\n          .el-icon-plus {\n            color: #777777;\n          }\n        }\n        &:hover {\n          border: dashed 1px #777777;\n          .el-icon-plus {\n            color: #777777;\n          }\n        }\n      }\n    }\n  }\n  }\n}\n#toolbar {\n  margin-bottom: 10px;\n}\n\n.title {\n  margin-top: 10px;\n  margin-bottom: 0;\n}\n\n.subtitle {\n  margin-bottom: 10px;\n}\n\n#toolbar > button {\n  margin-right: 4px;\n}\n</style>\n\n\n\n"],"sourceRoot":"src/views"}]}
{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/RadialTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/RadialTree.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport bus from \"../brushed\";\nimport busInvert from \"../brushedInvert\";\nexport default {\n  name: 'RadialTree',\n  props: {\n    dataBackGround: Object,\n    dataHighLight: Array\n  },\n  watch: {\n    treeViewState: function treeViewState() {\n      console.log(\"111dataBackGround\", this.dataBackGround);\n      console.log(\"111dataHighLight\", this.dataHighLight);\n      this.draw_radial_tree(this.dataBackGround, this.width, this.height, 0);\n      this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1);\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'treeViewState'])),\n  data: function data() {\n    return {\n      scale: 400,\n      brushed_data: null,\n      attr_ele_brushed_data: null,\n      RootDes: null,\n      json_data_out_node: null,\n      json_data_out_node_attr: null,\n      attr_ele_brushed_data_idList: [],\n      //保存属性视图刷选的数据\n      hightLightType: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    busInvert.$on('attr_ele_brushed_data', function (data) {\n      _this.attr_ele_brushed_data = data;\n\n      _this.highlight_attr_ele_brushed_data();\n    });\n  },\n  mounted: function mounted() {\n    this.width = this.$refs.canvas.clientWidth;\n    this.height = this.$refs.canvas.clientHeight;\n    console.log('width', this.width, 'height', this.height);\n    this.draw_radial_tree(this.dataBackGround, this.width, this.height, 0);\n    this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1);\n  },\n  methods: {\n    highlight_attr_ele_brushed_data: function highlight_attr_ele_brushed_data() {\n      var _this2 = this;\n\n      if (this.attr_ele_brushed_data == null || this.attr_ele_brushed_data == 'undefined') {\n        return;\n      } else if (this.attr_ele_brushed_data.length > 0) {\n        //treeIn 以及 treeOut 先变暗\n        this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 0);\n        d3.select(this.$el).select('#radial_tree').selectAll('.tree-node').classed(this.hightLightType + '-highlight', false); //将上一次属性视图需要高亮的节点变暗\n\n        this.attr_ele_brushed_data_idList.forEach(function (eleid) {\n          d3.select(_this2.$el).select('#radial_tree').select('#node-id-' + eleid).classed(\"attr-brush-highlight\", false);\n        }); //将本次属性试图需要高亮的节点列表清空\n\n        this.attr_ele_brushed_data_idList = [];\n        this.RootDes.forEach(function (ele) {\n          _this2.attr_ele_brushed_data.forEach(function (ei) {\n            if (ele.data.data[ei.type] == ei.name) {\n              d3.select(_this2.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex).classed(\"attr-brush-highlight\", true);\n\n              _this2.attr_ele_brushed_data_idList.push(ele.data.data.nodeIndex);\n            }\n          });\n        }); // console.log(this.attr_ele_brushed_data_idList)\n      } else {\n        //当属性视图传过来的数据是空列表时，仍需清空上一次属性视图需要高亮的节点\n        this.attr_ele_brushed_data_idList.forEach(function (eleid) {\n          d3.select(_this2.$el).select('#radial_tree').select('#node-id-' + eleid).classed(\"attr-brush-highlight\", false);\n        });\n        this.attr_ele_brushed_data_idList = []; //treeIn 以及 treeOut 再变亮\n\n        this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1);\n        d3.select(this.$el).select('#radial_tree').selectAll('.tree-node').classed(this.hightLightType + '-highlight', true);\n      }\n    },\n    draw_radial_tree: function draw_radial_tree(tmpBackGroudData, width, height) {\n      var needlable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var self = this;\n      if (tmpBackGroudData['data'] == null || typeof tmpBackGroudData == 'undefined') return;\n      var data = tmpBackGroudData['data'];\n      var hightLightType = tmpBackGroudData['type'];\n      self.hightLightType = hightLightType; // let isVertical = 1;\n\n      var min_width_height = Math.min(width, height);\n      var trbl = min_width_height * 20 / self.scale;\n      var margin = {\n        top: trbl,\n        right: trbl,\n        bottom: trbl,\n        left: trbl\n      };\n      var innerWidth = width - margin.left;\n      var innerHeight = height - margin.top;\n      var min_inner_width_height = Math.min(innerWidth, innerHeight);\n      var radius = min_inner_width_height / 2;\n      var degree_max = 0;\n      var root = d3.hierarchy(data).eachBefore(function (d) {\n        d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识，在数据预处理时，处理好\n\n        d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n\n        d.data.data.height = d.height; //重新画图之后要重新计算高度\n\n        d.data.data.degree = d.children ? d.children.length : 0;\n        if (d.data.data.degree > degree_max) degree_max = d.data.data.degree;\n      });\n      root = d3.tree().size([2 * Math.PI, radius])(root);\n      var DimGray = d3.rgb(105, 105, 105); // let LightGray = d3.rgb(211,211,211)\n\n      var linear = d3.scaleLinear().domain([0, root.height]).range([1, 0]);\n      var color = d3.interpolate(DimGray, DimGray);\n      self.RootDes = root.descendants();\n      var RootDes = self.RootDes;\n      var r = min_width_height * 3 / self.scale;\n      var r_min = min_width_height * 1.5 / self.scale;\n      var r_max = min_width_height * 4.5 / self.scale; // r = r_max\n\n      var strokeWidth = min_width_height * r / 5 / self.scale;\n      var strokeOpacity = min_width_height * 0.4 / self.scale;\n      var adjust = 1.5708;\n      var svg = d3.select(this.$el).select('#radial_tree');\n      var t = svg.transition().duration(750);\n      var g = svg.select('#g-level-1').attr('transform', \"translate(\".concat(width / 2, \", \").concat(height / 2, \")\"));\n      g.select('#g-level-1-path').attr('class', 'gLink').attr('stroke-opacity', strokeOpacity).attr('stroke-width', strokeWidth).selectAll('path').data(root.links(), function (d, i) {\n        //真正的nodeIndex在数据上传前就计算好\n        var source = d.source.data.data.nodeIndex;\n        var target = d.target.data.data.nodeIndex;\n        return \"node\" + source + \"node\" + target;\n      }).join(function (enter) {\n        return enter.append('path').each(function (d) {\n          d.target.linkNode = self;\n        }).attr(\"d\", function (d) {\n          var sourceX = d.source.y * Math.cos(d.source.x - adjust);\n          var sourceY = d.source.y * Math.sin(d.source.x - adjust);\n          var targetX = d.target.y * Math.cos(d.target.x - adjust);\n          var targetY = d.target.y * Math.sin(d.target.x - adjust);\n          return \"M\" + sourceX + \" \" + sourceY + \" \" + \"L\" + targetX + \" \" + targetY;\n        });\n      }, function (update) {\n        return update.call(function (update) {\n          return update.transition(t).each(function (d) {\n            d.target.linkNode = self;\n          }).attr(\"d\", function (d) {\n            var sourceX = d.source.y * Math.cos(d.source.x - adjust);\n            var sourceY = d.source.y * Math.sin(d.source.x - adjust);\n            var targetX = d.target.y * Math.cos(d.target.x - adjust);\n            var targetY = d.target.y * Math.sin(d.target.x - adjust);\n            return \"M\" + sourceX + \" \" + sourceY + \" \" + \"L\" + targetX + \" \" + targetY;\n          });\n        });\n      }, function (exit) {\n        return exit.remove();\n      });\n      var node = g.select('#g-level-1-node').attr('class', 'brush').call(brush).selectAll('a').data(RootDes, function (d, i) {\n        //真正的nodeIndex在数据上传前就计算好\n        var node_id = d.data.data.nodeIndex;\n        return node_id;\n      }).join(function (enter) {\n        return enter.append('a').attr(\"transform\", function (d) {\n          return \"rotate(\".concat(d.x * 180 / Math.PI - 90, \") translate(\").concat(d.y, \",0)\");\n        });\n      }, function (update) {\n        return update.call(function (update) {\n          return update.transition(t).attr(\"transform\", function (d) {\n            return \"rotate(\".concat(d.x * 180 / Math.PI - 90, \") translate(\").concat(d.y, \",0)\");\n          });\n        });\n      }, function (exit) {\n        return exit.remove();\n      });\n      d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').remove();\n      node.append(\"circle\").attr('class', 'tree-node').attr('id', function (d) {\n        return 'node-id-' + d.nodeIndex;\n      }).attr(\"fill\", function (d) {\n        return color(linear(d.height));\n      }).attr(\"r\", function (d) {\n        return d.data.data.degree > 0 ? d.data.data.degree * r_min > r_max ? r_max : d.data.data.degree * r_min : r_min;\n      }).call(self.tooltip_ele(\"radial_tree\"));\n      d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType + '-highlight', true);\n\n      function brush(cell) {\n        var brush = d3.brush().extent([[-width / 2, -height / 2], [width / 2, height / 2]]).on(\"start\", brushstarted).on(\"brush\", brushed).on(\"end\", brushended);\n        cell.call(brush);\n        var brushCell;\n        var selected = [];\n\n        function brushstarted() {\n          if (brushCell !== this) {\n            d3.select(brushCell).call(brush.move, null);\n            brushCell = this;\n          } // console.log(\"brush开始\")\n\n        }\n\n        function brushed() {\n          // console.log(\"brush\")\n          if (d3.event.selection == null) return; //刷选的区域为空时直接返回\n\n          selected.forEach(function (ele) {\n            d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex).classed(\"brush-highlight\", false);\n          });\n\n          var _d3$event$selection = _slicedToArray(d3.event.selection, 2),\n              _d3$event$selection$ = _slicedToArray(_d3$event$selection[0], 2),\n              x0 = _d3$event$selection$[0],\n              y0 = _d3$event$selection$[1],\n              _d3$event$selection$2 = _slicedToArray(_d3$event$selection[1], 2),\n              x1 = _d3$event$selection$2[0],\n              y1 = _d3$event$selection$2[1];\n\n          selected = RootDes.filter(function (d) {\n            return x0 <= d.y * Math.cos(d.x - adjust) && x1 >= d.y * Math.cos(d.x - adjust) && y0 <= d.y * Math.sin(d.x - adjust) && y1 >= d.y * Math.sin(d.x - adjust);\n          });\n          self.dataHighLight_In_and_Out('radial_tree', self.dataHighLight, bus, self.RootDes, 0);\n          d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType + '-highlight', false);\n          selected.forEach(function (ele) {\n            d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex).classed(\"brush-highlight\", true);\n          }); // console.log(\"树上刷选的数据:\", selected.map(d=>d.data))\n\n          bus.$emit('brushed_data', selected.map(function (d) {\n            return d.data;\n          })); //传递刷选的数据到属性视图\n        }\n\n        function brushended() {\n          if (d3.event.selection != null) {\n            return;\n          } else {\n            //当d3.event.selection == null 时，将之前的刷选清除掉\n            selected.forEach(function (ele) {\n              d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex).classed(\"brush-highlight\", false);\n            });\n            d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType + '-highlight', true);\n            self.dataHighLight_In_and_Out('radial_tree', self.dataHighLight, bus, self.RootDes, 1); // bus.$emit('brushed_data', [])\n            // console.log(\"brush结束\")\n\n            return;\n          }\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["RadialTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"canvas\" ref=\"canvas\">\n    <svg id=\"radial_tree\" class=\"inner-canvas\">\n      <g id=\"g-level-1\">\n        <g id=\"g-level-1-path\"></g>\n        <g id=\"g-level-1-node\"></g>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nimport busInvert from '../brushedInvert'\nexport default {\n  name: 'RadialTree',\n  props: {\n    dataBackGround: Object,\n    dataHighLight: Array,\n  },\n  watch: {\n      treeViewState: function() {\n        console.log(\"111dataBackGround\", this.dataBackGround)\n        console.log(\"111dataHighLight\", this.dataHighLight)\n        this.draw_radial_tree(this.dataBackGround, this.width, this.height, 0);\n        this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1)\n      },\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      scale: 400,\n      brushed_data: null,\n      attr_ele_brushed_data: null,\n      RootDes: null,\n      json_data_out_node: null,\n      json_data_out_node_attr: null,\n      attr_ele_brushed_data_idList: [], //保存属性视图刷选的数据\n      hightLightType: null,\n    }\n  },\n  created() {\n    busInvert.$on('attr_ele_brushed_data', (data)=>{\n      this.attr_ele_brushed_data = data;\n      this.highlight_attr_ele_brushed_data()\n    })\n  },\n  mounted() {\n    this.width = this.$refs.canvas.clientWidth\n    this.height = this.$refs.canvas.clientHeight\n    console.log('width', this.width, 'height', this.height)\n    this.draw_radial_tree(this.dataBackGround, this.width, this.height, 0);\n    this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1)\n  },\n  methods:{\n    highlight_attr_ele_brushed_data: function() {\n      if(this.attr_ele_brushed_data == null || this.attr_ele_brushed_data == 'undefined'){\n        return;\n      }\n      else if(this.attr_ele_brushed_data.length > 0){\n        //treeIn 以及 treeOut 先变暗\n        this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 0)\n        d3.select(this.$el).select('#radial_tree').selectAll('.tree-node').classed(this.hightLightType+'-highlight', false);\n        //将上一次属性视图需要高亮的节点变暗\n        this.attr_ele_brushed_data_idList.forEach(eleid=>{\n          d3.select(this.$el).select('#radial_tree')\n            .select('#node-id-' + eleid).classed(\"attr-brush-highlight\", false);\n        })\n        //将本次属性试图需要高亮的节点列表清空\n        this.attr_ele_brushed_data_idList = []\n        this.RootDes.forEach(ele=>{\n          this.attr_ele_brushed_data.forEach(ei=>{\n            if(ele.data.data[ei.type]==ei.name){\n              d3.select(this.$el).select('#radial_tree')\n                .select('#node-id-' + ele.data.data.nodeIndex).classed(\"attr-brush-highlight\", true);\n              this.attr_ele_brushed_data_idList.push(ele.data.data.nodeIndex)\n            }\n          })\n        })\n        // console.log(this.attr_ele_brushed_data_idList)\n\n      }else{\n        //当属性视图传过来的数据是空列表时，仍需清空上一次属性视图需要高亮的节点\n        this.attr_ele_brushed_data_idList.forEach(eleid=>{\n          d3.select(this.$el).select('#radial_tree')\n            .select('#node-id-' + eleid).classed(\"attr-brush-highlight\", false);\n        })\n        this.attr_ele_brushed_data_idList = []\n        //treeIn 以及 treeOut 再变亮\n        this.dataHighLight_In_and_Out('radial_tree', this.dataHighLight, bus, this.RootDes, 1)\n        d3.select(this.$el).select('#radial_tree').selectAll('.tree-node').classed(this.hightLightType+'-highlight', true);\n      }\n    },\n    draw_radial_tree: function(tmpBackGroudData, width, height, needlable=false) {\n      let self = this\n      if(tmpBackGroudData['data'] == null || typeof tmpBackGroudData == 'undefined') return;\n      let data = tmpBackGroudData['data']\n      let hightLightType = tmpBackGroudData['type']\n      self.hightLightType = hightLightType\n\n      // let isVertical = 1;\n      let min_width_height = Math.min(width, height);\n      let trbl = (min_width_height * 20) / self.scale;\n      let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n      let innerWidth = width - margin.left;\n      let innerHeight = height - margin.top;\n\n      let min_inner_width_height = Math.min(innerWidth, innerHeight)\n      let radius = min_inner_width_height / 2;\n\n      let degree_max = 0;\n      let root = d3.hierarchy(data)\n        .eachBefore(d=>{\n          d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识，在数据预处理时，处理好\n          d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n          d.data.data.height = d.height; //重新画图之后要重新计算高度\n          d.data.data.degree = d.children ? d.children.length : 0;\n          if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n      })\n\n      root = d3.tree()\n        .size([2*Math.PI, radius]) (root);\n      \n      let DimGray = d3.rgb(105,105,105)\n      // let LightGray = d3.rgb(211,211,211)\n      let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n      let color = d3.interpolate(DimGray, DimGray)\n\n      self.RootDes = root.descendants()\n      let RootDes = self.RootDes\n \n      let r = (min_width_height * 3)/ self.scale\n      let r_min = (min_width_height * 1.5)/ self.scale;\n      let r_max = (min_width_height * 4.5)/ self.scale;\n      // r = r_max\n      let strokeWidth = (min_width_height * r/5) / self.scale;\n      let strokeOpacity = (min_width_height *0.4) / self.scale;\n      let adjust = 1.5708;\n\n      const svg = d3.select(this.$el).select('#radial_tree')\n      let t = svg.transition()\n        .duration(750)\n      \n      let g = svg.select('#g-level-1')\n        .attr('transform', `translate(${width/2}, ${height/2})`);\n          \n      g.select('#g-level-1-path')\n        .attr('class', 'gLink')\n        .attr('stroke-opacity', strokeOpacity)\n        .attr('stroke-width', strokeWidth)\n      .selectAll('path')\n        .data(root.links(), function(d, i) {\n          //真正的nodeIndex在数据上传前就计算好\n          let source = d.source.data.data.nodeIndex\n          let target = d.target.data.data.nodeIndex\n          return \"node\"+source+\"node\"+target;\n        })\n        .join(\n          enter => enter.append('path')\n            .each(function(d){d.target.linkNode=self;})\n            .attr(\"d\", function(d){\n              let sourceX = (d.source.y * Math.cos(d.source.x - adjust)); \n              let sourceY = (d.source.y * Math.sin(d.source.x - adjust)); \n              let targetX = (d.target.y * Math.cos(d.target.x - adjust)); \n              let targetY = (d.target.y * Math.sin(d.target.x -adjust)); \n              return \"M\" + sourceX + \" \" + sourceY + \" \"+ \"L\" + targetX + \" \" + targetY;\n            }),\n          update => update\n            .call(update => update.transition(t)\n            .each(function(d){d.target.linkNode=self;})\n            .attr(\"d\", function(d){\n              let sourceX = (d.source.y * Math.cos(d.source.x - adjust)); \n              let sourceY = (d.source.y * Math.sin(d.source.x - adjust)); \n              let targetX = (d.target.y * Math.cos(d.target.x - adjust)); \n              let targetY = (d.target.y * Math.sin(d.target.x -adjust)); \n              return \"M\" + sourceX + \" \" + sourceY + \" \"+ \"L\" + targetX + \" \" + targetY;\n            })\n            ),\n          exit => exit\n            .remove()\n        );\n\n        let node = g.select('#g-level-1-node')\n          .attr('class', 'brush')\n          .call(brush)\n        .selectAll('a')\n          .data(RootDes, function(d, i) {\n            //真正的nodeIndex在数据上传前就计算好\n            let node_id = d.data.data.nodeIndex\n            return node_id;\n          })\n          .join(\n            enter => enter.append('a')\n              .attr(\"transform\", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`),\n            update => update\n              .call(update => update.transition(t)\n              .attr(\"transform\", d => `rotate(${d.x * 180 / Math.PI - 90}) translate(${d.y},0)`)),\n            exit => exit\n              .remove()\n        )\n        d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').remove();\n        node.append(\"circle\")\n          .attr('class', 'tree-node')\n          .attr('id', d=> 'node-id-' + d.nodeIndex)\n          .attr(\"fill\", d => color(linear(d.height)) )\n          .attr(\"r\", d=> d.data.data.degree > 0 ? d.data.data.degree * r_min > r_max ? r_max : d.data.data.degree * r_min : r_min)\n          .call(self.tooltip_ele(\"radial_tree\"));\n        d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType+'-highlight', true);\n\n        function brush(cell) {\n          const brush = d3.brush()\n            .extent([[-width/2, -height/2], [width/2, height/2]])\n            .on(\"start\", brushstarted)\n            .on(\"brush\", brushed)\n            .on(\"end\", brushended);\n          cell.call(brush);\n\n          let brushCell;\n          let selected = []\n          function brushstarted() {\n            if (brushCell !== this) {\n              d3.select(brushCell).call(brush.move, null);\n              brushCell = this;\n            }\n            // console.log(\"brush开始\")\n          }\n\n          function brushed() {\n            // console.log(\"brush\")\n            if (d3.event.selection == null) return; //刷选的区域为空时直接返回\n            selected.forEach(ele=>{\n              d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex ).classed(\"brush-highlight\", false);\n            })\n            const [[x0, y0], [x1, y1]] = d3.event.selection;\n            selected = RootDes.filter(\n              d => x0 <= d.y * Math.cos(d.x - adjust)\n                && x1 >= d.y * Math.cos(d.x - adjust)\n                && y0 <= d.y * Math.sin(d.x - adjust)\n                && y1 >= d.y * Math.sin(d.x - adjust));\n            \n            self.dataHighLight_In_and_Out('radial_tree', self.dataHighLight, bus, self.RootDes, 0)\n            d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType+'-highlight', false);\n\n            selected.forEach(ele=>{\n              d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex ).classed(\"brush-highlight\", true);\n            })\n\n            // console.log(\"树上刷选的数据:\", selected.map(d=>d.data))\n            bus.$emit('brushed_data', selected.map(d=>d.data))//传递刷选的数据到属性视图\n          }\n\n          function brushended() {\n            if (d3.event.selection != null){\n              return;\n            }\n            else{\n              //当d3.event.selection == null 时，将之前的刷选清除掉\n              selected.forEach(ele=>{\n                d3.select(self.$el).select('#radial_tree').select('#node-id-' + ele.data.data.nodeIndex ).classed(\"brush-highlight\", false);\n              })\n\n              d3.select(self.$el).select('#radial_tree').selectAll('.tree-node').classed(hightLightType+'-highlight', true);\n              self.dataHighLight_In_and_Out('radial_tree', self.dataHighLight, bus, self.RootDes, 1)\n\n              // bus.$emit('brushed_data', [])\n              // console.log(\"brush结束\")\n              return;\n            }\n          }\n\n        }\n    }\n  }\n}\n</script>\n\n\n<style scoped lang=\"less\">\n.canvas {\n  width: 100%;\n  height: 100%;\n  .inner-canvas {\n    width: 100%;\n    height: 100%;\n  }\n}\n</style>\n\n<style lang=\"less\">\n@stroke-line:#555;\n\n.gLink{\n  fill: none;\n  stroke: @stroke-line;\n}\n\n.attr-brush-highlight{\n  stroke: white;\n  stroke-opacity: 1;\n  stroke-width: 1.5px;\n  fill: #ff6347;\n}\n\n.brush-highlight {\n  stroke: white;\n  stroke-opacity: 1;\n  stroke-width: 1.5px;\n  // r: 5px;\n  fill: #ff6347;\n}\n\n.wholeTree-highlight{\n  stroke: white;\n  stroke-opacity: 1;\n  stroke-width: 1.5px;\n  fill: rgb(105,105,105);\n}\n\n.treeIn-highlight{\n  stroke: white;\n  stroke-opacity: 1;\n  stroke-width: 1.5px;\n  // r: 5px;\n  fill: steelblue;\n}\n\n.treeOut-highlight{\n  stroke: white;\n  stroke-opacity: 1;\n  stroke-width: 1.5px;\n  // r: 5px;\n  fill: rgb(255, 99, 71);\n}\n\n.tree-node{\n  stroke: white;\n  stroke-width: 0.2px;\n}\n</style>"],"sourceRoot":"src/components"}]}
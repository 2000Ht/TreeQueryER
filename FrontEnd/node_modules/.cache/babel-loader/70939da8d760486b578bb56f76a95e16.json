{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/CirclePacking.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/CirclePacking.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _toConsumableArray from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport golbalVariable from \"../global\";\nimport recursive from \"../recursive\";\nexport default {\n  name: 'CirclePacking',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object\n  },\n  watch: {\n    width: function width() {\n      this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    },\n    height: function height() {\n      this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    },\n    treeViewState: function treeViewState() {\n      this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n    }\n  },\n  computed: _objectSpread({}, mapState(['treeViewState'])),\n  data: function data() {\n    return {\n      counter: 0,\n      scale: 400\n    };\n  },\n  mounted: function mounted() {\n    this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods: {\n    draw_circle_packing: function draw_circle_packing(jsonpath, jsondata, width, height) {\n      var needlable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      d3.select('#circle_packing').selectAll('*').remove();\n      var data = JSON.parse(JSON.stringify(jsondata));\n      data = this.recursive(data);\n      var keep_random_highlight = [];\n\n      if (this.random_highlight != null) {\n        var namelist = d3.hierarchy(data).descendants().map(function (d) {\n          return d.data.name;\n        });\n\n        if (golbalVariable.highlight_2leaves) {\n          namelist = d3.hierarchy(data).leaves().map(function (d) {\n            return d.data.name;\n          });\n        }\n\n        for (var k = 0; k < Object.keys(this.random_highlight).length; k++) {\n          var randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]];\n          keep_random_highlight.push(\".\" + namelist[Math.floor(randomValue * (namelist.length - 1))] + \"cpk\");\n        }\n      } // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n\n      var min_width_height = Math.min(width, height); // let font_size_r = (min_width_height * 8) / this.scale;\n\n      var padding_r = min_width_height * 3 / this.scale;\n      var r_r = min_width_height * 10 / this.scale;\n      var trbl = min_width_height * 20 / this.scale;\n      var margin = {\n        top: trbl,\n        right: trbl,\n        bottom: trbl,\n        left: trbl\n      };\n      var innerWidth = width - margin.left;\n      var innerHeight = height - margin.top;\n      var svg = d3.select(this.$el).select('#circle_packing').attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\").attr(\"font-family\", \"sans-serif\");\n      var g = svg.append('g').attr('transform', \"translate(\".concat(margin.left / 2, \", \").concat(margin.top / 2, \")\"));\n      g.append('style').text(\"\\n            .rect-cpk-active {\\n              stroke: steelblue !important;\\n              stroke-opacity: 1;\\n              stroke-width: 1.5px;\\n            }\\n            .highlight-cpk-active {\\n              stroke: steelblue;\\n              stroke-opacity: 1;\\n              stroke-width: 1.5px;\\n            }\\n          \");\n      var root = d3.hierarchy(data).sum(function (d) {\n        return d.value;\n      }).sort(function (a, b) {\n        return b.value - a.value;\n      });\n      root = d3.pack().size([innerWidth, innerHeight]).padding(padding_r)(root);\n      var leaves = root.descendants().filter(function (d) {\n        return !d.children;\n      });\n      leaves.forEach(function (d, i) {\n        return d.index = i;\n      });\n\n      var title = function title(n) {\n        return \"PATH: \".concat(n.ancestors().reverse().map(function (d) {\n          return d.data.name;\n        }).join(\".\"), \"\\nNAME: \").concat(n.data.name, \"\\nVALUE: \").concat(n.value.toLocaleString(\"en\"));\n      };\n\n      var label = function label(d, n) {\n        return [].concat(_toConsumableArray(d.name.split(/(?=[A-Z][a-z])/g)), [n.value.toLocaleString(\"en\")]).join(\"\\n\");\n      };\n\n      var L = leaves.map(function (d) {\n        return label(d.data, d);\n      });\n      var node = g.selectAll('a').data(root.descendants()).join('a').attr('transform', function (d) {\n        return \"translate(\".concat(d.x, \",\").concat(d.y, \")\");\n      });\n      node.append('circle').attr('class', function (d) {\n        return d.data.name + 'cpk';\n      }).attr('fill', function (d) {\n        return d.children ? '#fff' : '#ddd';\n      }).attr('stroke', function (d) {\n        return d.children ? '#bbb' : null;\n      }).attr('r', function (d) {\n        return d.r;\n      }).on(\"mouseover\", mouseovered(true, keep_random_highlight)).on(\"mouseout\", mouseovered(false, keep_random_highlight));\n      if (title != null) node.append('title').text(function (d) {\n        return title(d);\n      });\n\n      if (L && needlable) {\n        var uid = \"O-\".concat(Math.random().toString(16).slice(2));\n        var leaf = node.filter(function (d) {\n          return !d.children && d.r > r_r && L[d.index] != null;\n        });\n        leaf.append('clipPath').attr('id', function (d) {\n          return \"\".concat(uid, \"-clip-\").concat(d.index);\n        }).append('circle').attr('r', function (d) {\n          return d.r;\n        });\n        leaf.append(\"text\").attr(\"clip-path\", function (d) {\n          return \"url(\".concat(new URL(\"#\".concat(uid, \"-clip-\").concat(d.index), location), \")\");\n        }).selectAll(\"tspan\").data(function (d) {\n          return \"\".concat(L[d.index]).split(/\\n/g);\n        }).join(\"tspan\").attr(\"x\", 0).attr(\"y\", function (d, i, D) {\n          return \"\".concat(i - D.length / 2 + 0.85, \"em\");\n        }).attr(\"fill-opacity\", function (d, i, D) {\n          return i === D.length - 1 ? 0.7 : null;\n        }).text(function (d) {\n          return d;\n        });\n      }\n\n      function mouseovered(active, keep_random_highlight) {\n        for (var _k = 0; _k < keep_random_highlight.length; _k++) {\n          d3.select(keep_random_highlight[_k]).classed(\"highlight-cpk-active\", true);\n        }\n\n        return function (d, i) {\n          d3.select(this).classed(\"rect-cpk-active\", active);\n\n          for (var j = 0; j < Object.values(d.ancestors().map(function (d) {\n            return \".\" + d.data.name;\n          })).length; j++) {\n            d3.select(Object.values(d.ancestors().map(function (d) {\n              return \".\" + d.data.name + \"cpk\";\n            }))[j]).classed(\"rect-cpk-active\", active);\n          }\n        };\n      } // });\n\n    }\n  }\n};",{"version":3,"sources":["CirclePacking.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"circle_packing\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport golbalVariable from '../global'\nimport recursive from '../recursive'\nexport default {\n  name: 'CirclePacking',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsondata: Object,\n    random_highlight: Object,\n  },\n  watch: {\n      width: function() {\n        this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      },\n      treeViewState: function(){\n        this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n      'treeViewState'\n    ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n    }\n  },\n  mounted() {\n    this.draw_circle_packing(this.jsonpath, this.jsondata, this.width, this.height, 0);\n  },\n  methods:{\n    draw_circle_packing: function(jsonpath, jsondata, width, height, needlable=false) {\n      \n      d3.select('#circle_packing').selectAll('*').remove();\n\n      let data = JSON.parse(JSON.stringify(jsondata))\n\n      data = this.recursive(data)\n\n      let keep_random_highlight = []\n      if(this.random_highlight != null){\n        let namelist = d3.hierarchy(data).descendants().map(d=>d.data.name)\n        if(golbalVariable.highlight_2leaves){namelist = d3.hierarchy(data).leaves().map(d=>d.data.name)}\n        for(let k=0;k<Object.keys(this.random_highlight).length;k++)\n        {\n          let randomValue = this.random_highlight[Object.keys(this.random_highlight)[k]]\n          keep_random_highlight.push(\".\"+namelist[Math.floor(randomValue * (namelist.length - 1))]+\"cpk\")\n        }\n      }\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n          // let font_size_r = (min_width_height * 8) / this.scale;\n          let padding_r = (min_width_height *3) / this.scale;\n          let r_r = (min_width_height *10) / this.scale;\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, right: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          const svg = d3.select(this.$el)\n            .select('#circle_packing')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${margin.left/2}, ${margin.top/2})`);\n\n          g.append('style').text(`\n            .rect-cpk-active {\n              stroke: steelblue !important;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n            .highlight-cpk-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let root = d3.hierarchy(data)\n            .sum(d=>d.value)\n            .sort((a,b)=>b.value - a.value);\n          \n          root = d3.pack()\n            .size([innerWidth, innerHeight])\n            .padding(padding_r) (root);\n\n          let leaves = root.descendants().filter(d=>!d.children);\n          leaves.forEach((d,i)=>d.index = i);\n\n          let title = function(n){return `PATH: ${n.ancestors().reverse().map(d => d.data.name).join(\".\")}\\nNAME: ${n.data.name}\\nVALUE: ${n.value.toLocaleString(\"en\")}`; };\n          let label = function(d,n){return [...d.name.split(/(?=[A-Z][a-z])/g), n.value.toLocaleString(\"en\")].join(\"\\n\"); }\n\n          let L = leaves.map(d=> label(d.data, d));\n\n          let node = g.selectAll('a')\n            .data(root.descendants())\n            .join('a')\n              .attr('transform', d=>`translate(${d.x},${d.y})`);\n\n          node.append('circle')\n            .attr('class',d=>d.data.name+'cpk')\n            .attr('fill', d=>d.children ? '#fff' : '#ddd')\n            .attr('stroke', d=>d.children ? '#bbb' : null)\n            .attr('r', d=>d.r)\n            .on(\"mouseover\", mouseovered(true, keep_random_highlight))\n            .on(\"mouseout\", mouseovered(false, keep_random_highlight));\n          \n\n          if(title!=null) node.append('title').text(d=>title(d));\n\n          if(L && needlable){\n            let uid = `O-${Math.random().toString(16).slice(2)}`;\n\n            let leaf = node.filter(d=>!d.children && d.r > r_r && L[d.index] != null);\n\n            leaf.append('clipPath')\n              .attr('id', d=>`${uid}-clip-${d.index}`)\n            .append('circle')\n              .attr('r', d=>d.r);\n\n            leaf.append(\"text\")\n              .attr(\"clip-path\", d => `url(${new URL(`#${uid}-clip-${d.index}`, location)})`)\n            .selectAll(\"tspan\")\n            .data(d => `${L[d.index]}`.split(/\\n/g))\n            .join(\"tspan\")\n              .attr(\"x\", 0)\n              .attr(\"y\", (d, i, D) => `${(i - D.length / 2) + 0.85}em`)\n              .attr(\"fill-opacity\", (d, i, D) => i === D.length - 1 ? 0.7 : null)\n              .text(d => d);\n          }\n\n          function mouseovered(active, keep_random_highlight){\n\n            for(let k=0;k<keep_random_highlight.length;k++){\n              d3.select(keep_random_highlight[k]).classed(\"highlight-cpk-active\", true);\n            }\n            return function(d, i){\n              d3.select(this).classed(\"rect-cpk-active\", active);\n              for(let j=0; j< Object.values(d.ancestors().map(d=>\".\"+d.data.name)).length; j++){\n                d3.select(Object.values(d.ancestors().map(d=>\".\"+d.data.name+\"cpk\"))[j]).classed(\"rect-cpk-active\", active);                \n              }\n            }\n          }\n        \n      // });\n\n    }\n  }\n}\n</script>"],"sourceRoot":"src/components"}]}
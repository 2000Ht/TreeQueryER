{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/TreeVisView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/TreeVisView.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport Node from \"./TreeElements/Node.vue\";\nimport Link from \"./TreeElements/Line.vue\";\nimport * as d3 from \"d3\";\nexport default {\n  name: 'TreeVisView',\n  components: {\n    Node: Node,\n    Link: Link\n  },\n  props: {\n    hierarchicalData: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      width: 0,\n      height: 0,\n      left: 0,\n      top: top,\n      nodes: [],\n      links: [],\n      root: null,\n      treeData: {\n        \"name\": \"Top Level\",\n        \"parent\": \"null\",\n        \"children\": [{\n          \"name\": \"Level 2: A\",\n          \"parent\": \"Top Level\",\n          \"children\": [{\n            \"name\": \"Son of A\",\n            \"parent\": \"Level 2: A\"\n          }, {\n            \"name\": \"Daughter of A\",\n            \"parent\": \"Level 2: A\"\n          }, {\n            \"name\": \"Son of A\",\n            \"parent\": \"Level 2: A\"\n          }, {\n            \"name\": \"Daughter of A\",\n            \"parent\": \"Level 2: A\"\n          }]\n        }, {\n          \"name\": \"Level 2: B\",\n          \"parent\": \"Top Level\",\n          \"children\": [{\n            \"name\": \"Son of B\",\n            \"parent\": \"Level 2: B\"\n          }, {\n            \"name\": \"Daughter of B\",\n            \"parent\": \"Level 2: B\"\n          }, {\n            \"name\": \"Son of B\",\n            \"parent\": \"Level 2: B\"\n          }, {\n            \"name\": \"Daughter of B\",\n            \"parent\": \"Level 2: B\"\n          }]\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    console.log('hierarchicalData', this.hierarchicalData);\n    this.initTreeLayout();\n    this.renderNodeLinkTree();\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode']), {\n    gTransform: function gTransform() {\n      return \"translate(350, 20)\";\n    }\n  }),\n  methods: {\n    initTreeLayout: function initTreeLayout() {\n      console.log('initTreeLayout');\n    },\n    computeLinkKey: function computeLinkKey(link) {\n      var thisNode = link;\n      var thisParentNode = link.parent;\n      return 'x' + thisParentNode.x + '-y' + thisParentNode.y + '=' + 'x' + thisNode.x + '-y' + thisNode.y;\n    },\n    computeNodeKey: function computeNodeKey(node) {\n      var nodeFill = node;\n      var nodeCollapsed = node.children == null ? 1 : 0;\n      return 'x' + node.x + '-y' + node.y + '-' + nodeCollapsed;\n    },\n    renderNodeLinkTree: function renderNodeLinkTree() {\n      // render the node link tree visualization using d3\n      var treeData = this.hierarchicalData; // Set the dimensions and margins of the diagram\n\n      var margin = {\n        top: 20,\n        right: 90,\n        bottom: 30,\n        left: 90\n      },\n          width = 100 - margin.left - margin.right,\n          height = 800 - margin.top - margin.bottom;\n      this.width = width + margin.right + margin.left;\n      this.height = height + margin.top + margin.bottom;\n      this.left = 90;\n      this.top = 20; // declares a tree layout and assigns the size\n\n      var treemap = d3.tree().size([this.height, this.width]); // Assigns parent, children, height, depth\n\n      this.root = d3.hierarchy(treeData, function (d) {\n        return d.children;\n      });\n      console.log('root:', this.root);\n      console.log('height', this.height);\n      this.root.x0 = this.height / 2;\n      this.root.y0 = 0;\n      var treeData = treemap(this.root); // Compute the new tree layout.\n\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1); // Normalize for fixed-depth.\n\n      nodes.forEach(function (d) {\n        d.y = d.depth * 65;\n      });\n      this.nodes = nodes;\n      this.links = links;\n    },\n    updateTree: function updateTree(d) {\n      if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      } else {\n        d.children = d._children;\n        d._children = null;\n      }\n\n      console.log(\"updateRoot:\", this.root);\n      var treemap = d3.tree().size([this.height, this.width]);\n      var treeData = treemap(this.root); // Compute the new tree layout.\n\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1); // Normalize for fixed-depth.\n\n      nodes.forEach(function (d) {\n        d.y = d.depth * 65;\n      });\n      this.nodes = nodes;\n      this.links = links;\n      console.log(\"updateLink: \", links);\n      console.log(\"updateNode: \", nodes);\n    }\n  }\n};",{"version":3,"sources":["TreeVisView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"treevisview\">\n    <svg class=\"treevisview-canvas\">\n      <g :transform=\"gTransform\">\n        <Link v-for=\"link in links\" :link=\"link\" :key=\"computeLinkKey(link)\"></Link>\n        <Node v-for=\"node in nodes\" :node=\"node\" :key=\"computeNodeKey(node)\" @collapseTree=\"updateTree\"></Node>\n      </g>\n    </svg>\n  </div>\n</template>\n\n\n\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import Node from './TreeElements/Node.vue';\n    import Link from './TreeElements/Line.vue'\n    import * as d3 from \"d3\";\n\nexport default {\n  name: 'TreeVisView',\n  \n  components: {\n    Node,\n    Link\n  },\n  \n  props: {\n    hierarchicalData: {\n      type: Object\n    }\n  },\n  data() {\n    return {\n      width:  0,\n      height: 0,\n      left: 0,\n      top,\n      nodes: [],\n      links: [],\n      root: null,\n      treeData: \n        {\n          \"name\": \"Top Level\",\n          \"parent\": \"null\",\n          \"children\": [\n            {\n              \"name\": \"Level 2: A\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Son of A\",\n                  \"parent\": \"Level 2: A\"\n                },\n                {\n                  \"name\": \"Daughter of A\",\n                  \"parent\": \"Level 2: A\"\n                }\n              ]\n            },\n            {\n              \"name\": \"Level 2: B\",\n              \"parent\": \"Top Level\",\n              \"children\": [\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Son of B\",\n                  \"parent\": \"Level 2: B\"\n                },\n                {\n                  \"name\": \"Daughter of B\",\n                  \"parent\": \"Level 2: B\"\n                }\n              ]\n            }\n          ]\n        }\n      \n    }\n  },\n  mounted() {\n    console.log('hierarchicalData', this.hierarchicalData)\n    this.initTreeLayout()\n    this.renderNodeLinkTree()\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode'\n    ]),\n    gTransform() {\n      return `translate(350, 20)`\n    },\n  },\n  methods: {\n    initTreeLayout() {\n      console.log('initTreeLayout')\n    },\n    computeLinkKey(link) {\n      let thisNode = link\n      let thisParentNode = link.parent\n      return 'x' + thisParentNode.x + '-y' + thisParentNode.y + '=' + 'x' + thisNode.x + '-y' + thisNode.y\n    },\n    computeNodeKey(node) {\n      let nodeFill = node\n      let nodeCollapsed = node.children==null?1:0\n      return 'x' + node.x + '-y' + node.y + '-' + nodeCollapsed\n    },\n    renderNodeLinkTree() {\n\n      // render the node link tree visualization using d3\n      var treeData = this.hierarchicalData\n\n      // Set the dimensions and margins of the diagram\n      var margin = {top: 20, right: 90, bottom: 30, left: 90},\n          width = 100 - margin.left - margin.right,\n          height = 800 - margin.top - margin.bottom;\n      \n      this.width = width + margin.right + margin.left\n      this.height = height + margin.top + margin.bottom\n      this.left = 90\n      this.top = 20\n        \n      // declares a tree layout and assigns the size\n      var treemap = d3.tree().size([this.height, this.width]);\n\n      // Assigns parent, children, height, depth\n      this.root = d3.hierarchy(treeData, function(d) { return d.children; });\n      console.log('root:', this.root)\n      console.log('height', this.height)\n      this.root.x0 = this.height / 2;\n      this.root.y0 = 0;\n\n      var treeData = treemap(this.root);\n\n      // Compute the new tree layout.\n      var nodes = treeData.descendants(),\n          links = treeData.descendants().slice(1);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d){ d.y = d.depth * 65});\n      this.nodes = nodes\n      this.links = links\n      \n    },\n    updateTree(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n         d.children = d._children;\n         d._children = null;\n        }\n        console.log(\"updateRoot:\",this.root)\n        var treemap = d3.tree().size([this.height, this.width]);\n        var treeData = treemap(this.root);\n\n        // Compute the new tree layout.\n        var nodes = treeData.descendants(),\n            links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 65});\n        this.nodes = nodes\n        this.links = links\n        console.log(\"updateLink: \", links)\n        console.log(\"updateNode: \", nodes)\n        \n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.treevisview {\n  height: 100%;\n  width: 100%;\n  .treevisview-canvas {\n    height: 100%;\n    width: 100%;\n  }\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}
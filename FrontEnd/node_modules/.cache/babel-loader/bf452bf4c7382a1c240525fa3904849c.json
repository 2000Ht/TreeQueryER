{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/flowchart/Flowchart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/flowchart/Flowchart.vue","mtime":1700550321167},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.math.hypot\";\nimport _toConsumableArray from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.math.trunc\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nvar _name$props$data$watc;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { line2, lineTo } from \"../../utils/svg\";\nimport { mapState, mapMutations } from 'vuex';\nimport * as d3 from \"d3\";\nimport { roundTo20, between, distanceOfPointToLine, getEdgeOfPoints, pointRectangleIntersection } from \"../../utils/math\";\nimport render from \"./render\";\nexport default (_name$props$data$watc = {\n  name: \"flowchart\",\n  props: {\n    nodes: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    connections: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    width: {\n      type: [String, Number],\n      default: 800\n    },\n    height: {\n      type: [String, Number],\n      default: 600\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    excludeShownAttrArray: {\n      type: Array,\n      default: []\n    }\n  },\n  data: function data() {\n    return {\n      internalNodes: [],\n      internalConnections: [],\n      connectingInfo: {\n        source: null,\n        sourcePosition: null\n      },\n      selectionInfo: null,\n      currentNodes: [],\n      currentConnections: [],\n\n      /**\n       * Mouse position(relative to chart div)\n       */\n      cursorToChartOffset: {\n        x: 0,\n        y: 0\n      },\n      clickedOnce: false,\n      pathClickedOnce: false,\n\n      /**\n       * lines of all internalConnections\n       */\n      lines: [],\n      canvasId: \"svg\",\n      regexContent: \"\",\n      regexContentFlag: false\n    };\n  },\n  watch: {\n    conditionState: function conditionState() {\n      console.log(\"conditionState\");\n    }\n  },\n  computed: _objectSpread({}, mapState(['regexContentState', 'curRegexIndex', 'selectedDomKey', 'selectedDom', 'visPanelState'])),\n  methods: _objectSpread({}, mapMutations(['UPDATE_VISVIEW', 'UPDATE_CURRENT_REGEX', 'UPDATE_CONNECTION', 'UPDATE_SELECTED_DOM', 'UPDATE_CONDITION_STATE', 'GET_SELECTEDKEY', 'DATA_QUERY_REGEX', 'UPDATE_NODE_DEFINITION_STATE']), {\n    query: function query() {\n      var edgeInfo = sysDatasetObj.getEdgeInfo();\n      console.log(\"edgeInfo: \", edgeInfo);\n      var rootNode = {\n        'type': 'node',\n        'repeat': [1, 1],\n        'data': {},\n        'children': []\n      };\n\n      for (var i = 0; i < this.internalNodes.length; i++) {\n        this.internalNodes[i]['regex']['children'] = [];\n      }\n\n      for (var _i = 0; _i < edgeInfo.length; _i++) {\n        var curI = null;\n        var curJ = null;\n\n        for (var i1 = 0; i1 < this.internalNodes.length; i1++) {\n          if (edgeInfo[_i][0] == this.internalNodes[i1]['regexIndex']) {\n            curI = this.internalNodes[i1]['regex'];\n          }\n\n          if (edgeInfo[_i][1] == this.internalNodes[i1]['regexIndex']) {\n            curJ = this.internalNodes[i1]['regex'];\n          }\n        }\n\n        curI['children'].push(curJ);\n      }\n\n      if (edgeInfo.length == 0 && this.internalNodes.length == 1) {\n        rootNode = this.internalNodes[0]['regex'];\n      }\n\n      for (var _i2 = 0; _i2 < edgeInfo.length; _i2++) {\n        var flag = 1;\n\n        for (var j = 0; j < edgeInfo.length; j++) {\n          if (edgeInfo[_i2][0] == edgeInfo[j][1]) {\n            flag = -1;\n            break;\n          }\n        }\n\n        if (flag != -1) {\n          for (var k = 0; k < this.internalNodes.length; k++) {\n            if (this.internalNodes[k]['regexIndex'] == edgeInfo[_i2][0]) {\n              rootNode = this.internalNodes[k]['regex'];\n              break;\n            }\n          }\n\n          break;\n        }\n      }\n\n      sysDatasetObj.updateRegex(rootNode);\n      this.DATA_QUERY_REGEX();\n    },\n    add: function add(node) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.internalNodes.push(node);\n    },\n    editNode: function editNode(node) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.$emit(\"editnode\", node);\n    },\n    handleChartMouseWheel: function handleChartMouseWheel(event) {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (event.ctrlKey) {\n        var svg = document.getElementById(\"svg\");\n        var zoom = parseFloat(svg.style.zoom || 1);\n\n        if (event.deltaY > 0 && zoom === 0.1) {\n          return;\n        }\n\n        zoom -= event.deltaY / 100 / 10;\n        svg.style.zoom = zoom;\n      }\n    },\n    handleChartMouseUp: function () {\n      var _handleChartMouseUp = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var tempId, conn, tmpSource, tmpDestination;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.connectingInfo.source) {\n                  if (this.hoveredConnector) {\n                    if (this.connectingInfo.source.id !== this.hoveredConnector.node.id) {\n                      // Node can't connect to itself\n                      tempId = +new Date();\n                      conn = {\n                        source: {\n                          id: this.connectingInfo.source.id,\n                          position: this.connectingInfo.sourcePosition\n                        },\n                        destination: {\n                          id: this.hoveredConnector.node.id,\n                          position: this.hoveredConnector.position\n                        },\n                        id: tempId,\n                        type: \"pass\",\n                        name: \"Pass\"\n                      };\n                      tmpSource = this.internalNodes.filter(function (item) {\n                        return item.id === conn['source']['id'];\n                      })[0];\n                      tmpDestination = this.internalNodes.filter(function (item) {\n                        return item.id === conn['destination']['id'];\n                      })[0];\n                      sysDatasetObj.addEdge(tmpSource['regexIndex'], tmpDestination['regexIndex']);\n                      this.internalConnections.push(conn);\n                    }\n                  }\n\n                  this.connectingInfo.source = null;\n                  this.connectingInfo.sourcePosition = null;\n                }\n\n                if (this.selectionInfo) {\n                  this.selectionInfo = null;\n                }\n\n                this.regexContentFlag = false;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleChartMouseUp() {\n        return _handleChartMouseUp.apply(this, arguments);\n      }\n\n      return handleChartMouseUp;\n    }(),\n    handleChartMouseMove: function () {\n      var _handleChartMouseMove = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(event) {\n        var svg, zoom, boundingClientRect, actualX, actualY, sourceOffset, destinationPosition;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // calc offset of cursor to chart\n                svg = document.getElementById(\"svg\");\n                zoom = svg.style.zoom; // the size ratio of the whole canvas\n\n                if (zoom.length == 0) {\n                  zoom = 1;\n                }\n\n                zoom = parseFloat(zoom);\n                boundingClientRect = event.currentTarget.getBoundingClientRect();\n                actualX = event.pageX - boundingClientRect.left - window.scrollX;\n                actualX = actualX / zoom;\n                this.cursorToChartOffset.x = Math.trunc(actualX);\n                actualY = event.pageY - boundingClientRect.top - window.scrollY;\n                actualY = actualY / zoom;\n                this.cursorToChartOffset.y = Math.trunc(actualY);\n\n                if (!this.connectingInfo.source) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 14;\n                return this.renderConnections();\n\n              case 14:\n                d3.selectAll(\"#svg .connector\").classed(\"active\", true);\n                sourceOffset = this.getNodeConnectorOffset(this.connectingInfo.source.id, this.connectingInfo.sourcePosition);\n                destinationPosition = this.hoveredConnector ? this.hoveredConnector.position : null;\n                this.arrowTo(sourceOffset.x, sourceOffset.y, this.cursorToChartOffset.x, this.cursorToChartOffset.y, this.connectingInfo.sourcePosition, false, destinationPosition);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleChartMouseMove(_x) {\n        return _handleChartMouseMove.apply(this, arguments);\n      }\n\n      return handleChartMouseMove;\n    }(),\n    handleChartMouseDown: function handleChartMouseDown(event) {\n      if (event.ctrlKey) {\n        return;\n      }\n\n      sysDatasetObj.updateSelectedDomKey(-1);\n      this.UPDATE_NODE_DEFINITION_STATE();\n      this.selectionInfo = {\n        x: event.offsetX,\n        y: event.offsetY\n      };\n    },\n    getConnectorPosition: function getConnectorPosition(node) {\n      //const halfWidth = node.width / 2;\n      var halfWidth = 20 + 5;\n      var halfHeight = node.height / 2;\n      var top = {\n        x: node.x + halfWidth,\n        y: node.y\n      };\n      var left = {\n        x: node.x,\n        y: node.y + halfHeight\n      };\n      var bottom = {\n        x: node.x + halfWidth,\n        y: node.y + node.height\n      };\n      var right = {\n        x: node.x + node.width,\n        y: node.y + halfHeight\n      };\n      return {\n        left: left,\n        right: right,\n        top: top,\n        bottom: bottom\n      };\n    },\n    renderSelection: function renderSelection() {\n      var that = this; // render selection rectangle\n\n      if (that.selectionInfo) {\n        that.currentNodes.splice(0, that.currentNodes.length);\n        that.currentConnections.splice(0, that.currentConnections.length);\n        var edge = getEdgeOfPoints([{\n          x: that.selectionInfo.x,\n          y: that.selectionInfo.y\n        }, {\n          x: that.cursorToChartOffset.x,\n          y: that.cursorToChartOffset.y\n        }]);\n        var svg = d3.select(\"#svg\");\n        var rect = svg.select(\".selection\").classed(\"active\", true);\n        rect.attr(\"x\", edge.start.x).attr(\"y\", edge.start.y).attr(\"width\", edge.end.x - edge.start.x).attr(\"height\", edge.end.y - edge.start.y);\n        that.internalNodes.forEach(function (item) {\n          var points = [{\n            x: item.x,\n            y: item.y\n          }, {\n            x: item.x,\n            y: item.y + item.height\n          }, {\n            x: item.x + item.width,\n            y: item.y\n          }, {\n            x: item.x + item.width,\n            y: item.y + item.height\n          }];\n\n          if (points.every(function (point) {\n            return pointRectangleIntersection(point, edge);\n          })) {\n            that.currentNodes.push(item);\n          }\n        });\n        that.lines.forEach(function (line) {\n          var points = [{\n            x: line.sourceX,\n            y: line.sourceY\n          }, {\n            x: line.destinationX,\n            y: line.destinationY\n          }];\n\n          if (points.every(function (point) {\n            return pointRectangleIntersection(point, edge);\n          }) && that.currentConnections.every(function (item) {\n            return item.id !== line.id;\n          })) {\n            var connection = that.internalConnections.filter(function (conn) {\n              return conn.id === line.id;\n            })[0];\n            that.currentConnections.push(connection);\n          }\n        });\n      } else {\n        d3.selectAll(\"#svg > .selection\").classed(\"active\", false);\n      }\n    },\n    renderConnections: function renderConnections() {\n      var that = this;\n      return new Promise(function (resolve) {\n        that.$nextTick(function () {\n          d3.selectAll(\"#svg > g.connection\").remove(); // render lines\n\n          that.lines = [];\n          that.internalConnections.forEach(function (conn) {\n            var sourcePosition = that.getNodeConnectorOffset(conn.source.id, conn.source.position);\n            var destinationPosition = that.getNodeConnectorOffset(conn.destination.id, conn.destination.position);\n            var colors = {\n              pass: \"#888888\",\n              reject: \"red\"\n            };\n            var connectionSelected = that.currentConnections.filter(function (item) {\n              return item === conn;\n            }).length > 0;\n\n            if (connectionSelected) {\n              colors = {\n                pass: \"#888888\",\n                reject: \"darkred\"\n              };\n            }\n\n            var result = that.arrowTo(sourcePosition.x, sourcePosition.y, destinationPosition.x, destinationPosition.y, conn.source.position, conn.destination.position, connectionSelected, colors[conn.type]);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = result.paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var path = _step.value;\n                path.on(\"mousedown\", function () {\n                  d3.event.stopPropagation();\n\n                  if (that.pathClickedOnce) {\n                    that.editConnection(conn);\n                  } else {\n                    var timer = setTimeout(function () {\n                      that.pathClickedOnce = false;\n                      clearTimeout(timer);\n                    }, 300);\n                    that.pathClickedOnce = true;\n                  }\n\n                  that.currentNodes.splice(0, that.currentNodes.length);\n                  that.currentConnections.splice(0, that.currentConnections.length);\n                  that.currentConnections.push(conn);\n                });\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = result.lines[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var line = _step2.value;\n                that.lines.push({\n                  sourceX: line.sourceX,\n                  sourceY: line.sourceY,\n                  destinationX: line.destinationX,\n                  destinationY: line.destinationY,\n                  id: conn.id\n                });\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          });\n          resolve();\n        });\n      });\n    },\n    renderNodes: function renderNodes() {\n      var that = this;\n      return new Promise(function (resolve) {\n        d3.selectAll(\"#svg > g.node\").remove(); // render nodes\n\n        that.internalNodes.forEach(function (node) {\n          that.renderNode(node, that.currentNodes.filter(function (item) {\n            return item === node;\n          }).length > 0);\n        });\n        resolve();\n      });\n    },\n    getNodeConnectorOffset: function getNodeConnectorOffset(nodeId, connectorPosition) {\n      var node = this.internalNodes.filter(function (item) {\n        return item.id === nodeId;\n      })[0];\n      return this.getConnectorPosition(node)[connectorPosition];\n    },\n    append: function append(element) {\n      var svg = d3.select(\"#svg\");\n      return svg.insert(element, \".selection\");\n    },\n    guideLineTo: function guideLineTo(x1, y1, x2, y2) {\n      var g = this.append(\"g\");\n      g.classed(\"guideline\", true);\n      lineTo(g, x1, y1, x2, y2, 1, \"#a3a3a3\", [5, 3]);\n    },\n    arrowTo: function arrowTo(x1, y1, x2, y2, startPosition, endPosition, connectionSelected, color) {\n      var g = this.append(\"g\");\n      g.classed(\"connection\", true);\n\n      if (connectionSelected) {\n        line2(g, x1, y1, x2, y2, startPosition, endPosition, 2.5, color || \"#a3a3a3\", true);\n      } else {\n        line2(g, x1, y1, x2, y2, startPosition, endPosition, 1, color || \"#a3a3a3\", true);\n      } // a 5px cover to make mouse operation conveniently\n\n\n      return line2(g, x1, y1, x2, y2, startPosition, endPosition, 5, \"transparent\", false);\n    },\n    renderNode: function renderNode(node, isSelected) {\n      var that = this;\n      var g = that.append(\"g\").attr(\"cursor\", \"move\").classed(\"node\", true);\n      node.render = render;\n      node.render(g, node, isSelected, this.excludeShownAttrArray);\n      var drag = d3.drag().on(\"start\", function () {\n        // handle mousedown\n        var isNotCurrentNode = that.currentNodes.filter(function (item) {\n          return item === node;\n        }).length === 0;\n\n        if (isNotCurrentNode) {\n          that.currentConnections.splice(0, that.currentConnections.length);\n          that.currentNodes.splice(0, that.currentNodes.length);\n          that.currentNodes.push(node);\n        } // the drag event and click event is conflicted, \n        // so handle the drag start function of the selected nodes is equal to the double click event\n\n\n        if (that.clickedOnce) {\n          that.currentNodes.splice(0, that.currentNodes.length);\n          that.editNode(node);\n        } else {\n          var timer = setTimeout(function () {\n            that.clickedOnce = false;\n            clearTimeout(timer);\n          }, 300);\n          that.clickedOnce = true;\n        }\n      }).on(\"drag\",\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var zoom, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, currentNode, edge, expectX, expectY;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!that.readonly) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                zoom = parseFloat(document.getElementById(\"svg\").style.zoom || 1);\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _iteratorError3 = undefined;\n                _context3.prev = 6;\n\n                for (_iterator3 = that.currentNodes[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  currentNode = _step3.value;\n                  currentNode.x += d3.event.dx / zoom;\n                  currentNode.y += d3.event.dy / zoom;\n                }\n\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](6);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context3.t0;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.prev = 15;\n\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n\n              case 17:\n                _context3.prev = 17;\n\n                if (!_didIteratorError3) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 20:\n                return _context3.finish(17);\n\n              case 21:\n                return _context3.finish(14);\n\n              case 22:\n                d3.selectAll(\"#svg > g.guideline\").remove();\n                edge = that.getCurrentNodesEdge();\n                expectX = Math.round(Math.round(edge.start.x) / 10) * 10;\n                expectY = Math.round(Math.round(edge.start.y) / 10) * 10;\n                that.internalNodes.forEach(function (item) {\n                  if (that.currentNodes.filter(function (currentNode) {\n                    return currentNode === item;\n                  }).length === 0) {\n                    if (item.x === expectX) {\n                      // vertical guideline\n                      if (item.y < expectY) {\n                        that.guideLineTo(item.x, item.y + item.height, expectX, expectY);\n                      } else {\n                        that.guideLineTo(expectX, expectY + item.height, item.x, item.y);\n                      }\n                    }\n\n                    if (item.y === expectY) {\n                      // horizontal guideline\n                      if (item.x < expectX) {\n                        that.guideLineTo(item.x + item.width, item.y, expectX, expectY);\n                      } else {\n                        that.guideLineTo(expectX + item.width, expectY, item.x, item.y);\n                      }\n                    }\n                  }\n                });\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[6, 10, 14, 22], [15,, 17, 21]]);\n      }))).on(\"end\", function () {\n        d3.selectAll(\"#svg > g.guideline\").remove();\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = that.currentNodes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var currentNode = _step4.value;\n            currentNode.x = Math.round(Math.round(currentNode.x) / 10) * 10;\n            currentNode.y = Math.round(Math.round(currentNode.y) / 10) * 10;\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      });\n      g.call(drag);\n      g.on(\"mousedown\", function () {\n        // handle ctrl+mousedown\n        if (!d3.event.ctrlKey) {\n          return;\n        }\n\n        var isNotCurrentNode = that.currentNodes.filter(function (item) {\n          return item === node;\n        }).length === 0;\n\n        if (isNotCurrentNode) {\n          that.currentNodes.push(node);\n        } else {\n          that.currentNodes.splice(that.currentNodes.indexOf(node), 1);\n        }\n      });\n\n      if (node['regex']['type'] == 'node') {\n        var curX = node.x + 5;\n        var curY = node.y + 5;\n        var eleWidth = 5;\n        var eleHeight = 5;\n\n        if ('notFlag' in node['regex'] && node['regex']['notFlag']) {\n          g.append('path').attr('d', function () {\n            var x1 = curX - 3;\n            var y1 = curY + 5;\n            return \"M \" + x1 + \" \" + y1 + \"v \" + 23;\n          }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n          g.append('circle').attr('cx', curX - 3).attr('cy', curY + 33).attr('r', '0.7').attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n        }\n\n        g.append('rect').attr('class', 'unselectable title').attr('id', 'rect' + node['regex']['key']).attr('x', curX).attr('y', curY).attr('width', 40).attr('height', 40).attr('style', function () {\n          var tmpKey = sysDatasetObj.getSelectedDomKey();\n\n          if (node['regex']['key'] === tmpKey) {\n            return \"stroke: red !important;\" + \"fill: \" + node['regex']['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n          }\n\n          return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['regex']['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n        }).on('click', function () {\n          d3.select(this).attr('style', function () {\n            return \"stroke: red !important;\" + \"fill: \" + node['regex']['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n          });\n          sysDatasetObj.updateSelectedDomKey(node['regex']['key']);\n          sysDatasetObj.updateSelectedOr(node['regex'], -1);\n          that.UPDATE_CONDITION_STATE(false);\n          that.UPDATE_SELECTED_DOM(node['regex']);\n        });\n\n        if ('nodeName' in node['regex']) {\n          if (node['regex']['nodeName'] == '.') {\n            g.append('text').attr('class', 'new11').attr('x', curX + 20).attr('y', curY + 12).attr('fill', 'white').attr('font-size', '50px').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n              return node['regex']['nodeName'];\n            }).on('click', function () {\n              d3.select('#rect' + node['regex']['key']).attr('style', function () {\n                return \"stroke: red !important;\" + \"fill: \" + node['regex']['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n              });\n              sysDatasetObj.updateSelectedDomKey(node['regex']['key']);\n              sysDatasetObj.updateSelectedOr(node['regex'], -1);\n              that.UPDATE_CONDITION_STATE(false);\n              that.UPDATE_SELECTED_DOM(node['regex']);\n            });\n          } else {\n            g.append('text').attr('class', 'new11').attr('x', curX + 20).attr('y', curY + 20 + 2.5).attr('fill', 'white').attr('font-size', '20px').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n              return node['regex']['nodeName'];\n            }).on('click', function () {\n              d3.select('#rect' + node['regex']['key']).attr('style', function () {\n                return \"stroke: red !important;\" + \"fill: \" + node['regex']['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n              });\n              sysDatasetObj.updateSelectedDomKey(node['regex']['key']);\n              sysDatasetObj.updateSelectedOr(node['regex'], -1);\n              that.UPDATE_CONDITION_STATE(false);\n              that.UPDATE_SELECTED_DOM(node['regex']);\n            });\n          }\n        }\n\n        node.width = eleWidth + 40 + 5;\n        node.height = eleHeight + 40 + 5;\n      } else if (node['regex']['type'] == 'or') {\n        (function () {\n          var eleWidth = 0;\n          var curX = node.x;\n          var curY = node.y;\n          g.append('path').attr('class', 'path-' + node['regex']['key']).attr('d', function () {\n            var x1 = curX + 15;\n            var y1 = curY + 2.5;\n            var x2 = curX + 15;\n            var y2 = curY + 44.5;\n            var qx = x1 - (y2 - y1) / 3;\n            var qy = (y2 + y1) / 2;\n            return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n          }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n          g.append('rect').attr('width', '18').attr('height', '42').attr('transform', function () {\n            var x1 = curX + 15;\n            var y1 = curY + 2.5;\n            var x2 = curX + 15;\n            var y2 = curY + 44.5;\n            var qx = x1 - (y2 - y1) / 3 + 5;\n            var qy = (y2 + y1) / 2;\n            return \"translate(\".concat(qx, \", \").concat(y1, \")\");\n          }).attr('opacity', '0').on('click', function () {\n            that.UPDATE_SELECTED_DOM(node['regex']);\n            d3.selectAll('.path-' + node['regex']['key']).attr('style', 'stroke: red; stroke-width: 2px; fill: none;');\n          });\n          curX = curX + 15;\n          eleWidth += 15;\n\n          var _loop = function _loop(i) {\n            if (i != 0) {\n              g.append('path').attr('d', function () {\n                var x1 = curX + 10;\n                var y1 = curY + 3;\n                return \"M \" + x1 + \" \" + y1 + \" v \" + 42;\n              }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              curX += 10;\n              eleWidth += 5;\n            }\n\n            if ('notFlag' in node['regex']['composition'][i] && node['regex']['composition'][i]['notFlag']) {\n              g.append('path').attr('d', function () {\n                var x1 = curX + 7;\n                var y1 = curY + 5;\n                return \"M \" + x1 + \" \" + y1 + \"v \" + 32;\n              }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              g.append('circle').attr('cx', curX + 7).attr('cy', curY + 40).attr('r', '1').attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              curX += 3;\n              eleWidth += 3;\n            }\n\n            g.append('rect').attr('class', 'unselectable title').attr('id', 'rect' + node['regex']['composition'][i]['key']).attr('x', curX + 10).attr('y', curY + 3).attr('width', 42).attr('height', 42).attr('style', function () {\n              var tmpKey = sysDatasetObj.getSelectedDomKey();\n\n              if ('definition' in node['regex']['composition'][i]) {\n                if (node['regex']['composition'][i]['definition']) {\n                  if (node['regex']['composition'][i]['key'] === tmpKey) {\n                    return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                  }\n\n                  return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                }\n              }\n\n              if ('key' in node['regex']['composition'][i] && node['regex']['composition'][i].key === tmpKey) {\n                return \"stroke: red !important; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n              }\n\n              return \"stroke: #c4bbbb; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n            }).on('click', function () {\n              d3.select(this).attr('style', function () {\n                if ('definition' in node['regex']['composition'][i]) {\n                  if (node['regex']['composition'][i]['definition']) {\n                    return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                  }\n                }\n\n                return \"stroke: red !important;\" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n              });\n              that.UPDATE_CONDITION_STATE(false);\n              that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n              sysDatasetObj.updateSelectedOr(node['regex'], i);\n            });\n\n            if ('nodeName' in node['regex']['composition'][i]) {\n              g.append('text').attr('class', 'new11').attr('x', curX + 31).attr('y', curY + 24).attr('fill', 'white').attr('font-size', '18px !important').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                return node['regex']['composition'][i]['nodeName'];\n              }).on('click', function () {\n                d3.select('#rect' + node['regex']['composition'][i]['key']).attr('style', function () {\n                  if ('definition' in node['regex']['composition'][i]) {\n                    if (node['regex']['composition'][i]['definition']) {\n                      return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    }\n                  }\n\n                  return \"stroke: red !important;\" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                });\n                that.UPDATE_CONDITION_STATE(false);\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                sysDatasetObj.updateSelectedOr(node['regex'], i);\n              });\n            }\n\n            curX = curX + 52;\n            eleWidth += 52;\n\n            if (!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)) {\n              g.append('text').attr('x', curX + 5).attr('y', curY + 2).attr('font-size', '15px').attr('alignment-baseline', 'hanging').text(function () {\n                return node['regex']['composition'][i]['repeat'][0] + '..' + node['regex']['composition'][i]['repeat'][1];\n              });\n              curX = curX + 30;\n              eleWidth += 30;\n            }\n          };\n\n          for (var i in node['regex']['composition']) {\n            _loop(i);\n          }\n\n          g.append('path').attr('class', 'path-' + node['regex']['key']).attr('d', function () {\n            var x1 = curX + 10;\n            var y1 = curY + 2.5;\n            var x2 = curX + 10;\n            var y2 = curY + 44.5;\n            var qx = x1 + (y2 - y1) / 3;\n            var qy = (y2 + y1) / 2;\n            return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n          }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n          g.append('rect').attr('width', '18').attr('height', '42').attr('transform', function () {\n            var x1 = curX + 10;\n            var y1 = curY + 2.5;\n            var x2 = curX + 10;\n            var y2 = curY + 44.5;\n            var qx = x1 - 5;\n            var qy = (y2 + y1) / 2;\n            return \"translate(\".concat(qx, \", \").concat(y1, \")\");\n          }).attr('opacity', '0').on('click', function () {\n            that.UPDATE_SELECTED_DOM(node['regex']);\n            d3.selectAll('.path-' + node['regex']['key']).attr('style', 'stroke: red; stroke-width: 2px; fill: none;');\n          });\n          curX = curX + 15;\n          eleWidth += 15;\n\n          if (!(node['regex']['repeat'][0] == 1 && node['regex']['repeat'][1] == 1)) {\n            g.append('text').attr('x', curX + 5).attr('y', curY + 2).attr('font-size', '15px').attr('alignment-baseline', 'hanging').text(function () {\n              return node['regex']['repeat'][0] + '..' + node['regex']['repeat'][1];\n            });\n            curX = curX + 30;\n            eleWidth += 30;\n          }\n\n          node.width = 15 + eleWidth;\n        })();\n      } else if (node['regex']['type'] == 'branch') {\n        (function () {\n          var eleWidth = 5;\n          var eleHeight = 5;\n          var curX = node.x + 5;\n          var curY = node.y + 5;\n          g.append('path').attr('class', 'bPath-' + node['regex']['key']).attr('d', function () {\n            var x0 = curX;\n            var y0 = curY + 10;\n            var x1 = curX + 20;\n            var y1 = curY;\n            var x2 = curX + 40;\n            var y2 = curY + 10;\n            return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1 + \" L \" + x2 + \" \" + y2;\n          }).attr('style', 'stroke: #c4bbbb; stroke-width: 2px; fill: none;');\n          g.append('text').attr('x', curX + 1).attr('y', curY - 4).attr('font-size', '14px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n            return node['regex']['repeat'][0];\n          });\n\n          if (node['regex']['repeat'][1] == '*') {\n            g.append('text').attr('x', curX + 38).attr('y', curY - 2).attr('font-size', '18px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n              return node['regex']['repeat'][1];\n            });\n          } else {\n            g.append('text').attr('x', curX + 38).attr('y', curY - 4).attr('font-size', '14px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n              return node['regex']['repeat'][1];\n            });\n          }\n\n          g.append('rect').attr('width', '40').attr('height', '10').attr('transform', function () {\n            var x = curX;\n            var y = curY;\n            return \"translate(\".concat(x, \", \").concat(y, \")\");\n          }).attr('opacity', '0').on('click', function () {\n            that.UPDATE_SELECTED_DOM(node['regex']);\n            d3.selectAll('.bPath-' + node['regex']['key']).attr('style', 'stroke: red; stroke-width: 2px; fill: none;');\n          });\n          curY += 15;\n          eleHeight += 15;\n\n          var _loop2 = function _loop2(i) {\n            if (node['regex']['composition'][i]['type'] == 'node') {\n              if ('notFlag' in node['regex']['composition'][i] && node['regex']['composition'][i]['notFlag']) {\n                g.append('path').attr('d', function () {\n                  var x1 = curX - 3;\n                  var y1 = curY + 5;\n                  return \"M \" + x1 + \" \" + y1 + \"v \" + 23;\n                }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n                g.append('circle').attr('cx', curX - 3).attr('cy', curY + 33).attr('r', '0.7').attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              }\n\n              g.append('rect').attr('class', 'unselectable title').attr('id', 'rect' + node['regex']['composition'][i]['key']).attr('x', curX).attr('y', curY).attr('width', 40).attr('height', 40).attr('style', function () {\n                var tmpKey = sysDatasetObj.getSelectedDomKey();\n\n                if (node['regex']['composition'][i]['key'] === tmpKey) {\n                  return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                }\n\n                return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n\n                if ('definition' in node['regex']['composition'][i]) {\n                  if (node['regex']['composition'][i]['definition']) {\n                    if (node['regex']['composition'][i]['key'] === tmpKey) {\n                      return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    }\n\n                    return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                  }\n                }\n\n                if ('key' in node['regex']['composition'][i] && node['regex']['composition'][i].key === tmpKey) {\n                  return \"stroke: red !important; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                }\n\n                return \"stroke: #c4bbbb; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n              }).on('click', function () {\n                d3.select(this).attr('style', function () {\n                  return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n\n                  if ('definition' in node['regex']['composition'][i]) {\n                    if (node['regex']['composition'][i]['definition']) {\n                      return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    }\n                  }\n\n                  return \"stroke: red !important;\" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                });\n                that.UPDATE_CONDITION_STATE(false);\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                sysDatasetObj.updateSelectedBranch(node['regex'], i);\n                sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1);\n              });\n\n              if ('nodeName' in node['regex']['composition'][i]) {\n                if (node['regex']['composition'][i]['nodeName'] == '.') {\n                  g.append('text').attr('class', 'new11').attr('x', curX + 20).attr('y', curY + 12).attr('fill', 'white').attr('font-size', '50px').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                    return node['regex']['composition'][i]['nodeName'];\n                  }).on('click', function () {\n                    d3.select('#rect' + node['regex']['composition'][i]['key']).attr('style', function () {\n                      return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    });\n                    that.UPDATE_CONDITION_STATE(false);\n                    that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                    sysDatasetObj.updateSelectedBranch(node['regex'], i);\n                    sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1);\n                  });\n                } else {\n                  g.append('text').attr('class', 'new11').attr('x', curX + 20).attr('y', curY + 20 + 2.5).attr('fill', 'white').attr('font-size', '20px').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                    return node['regex']['composition'][i]['nodeName'];\n                  }).on('click', function () {\n                    d3.select('#rect' + node['regex']['composition'][i]['key']).attr('style', function () {\n                      return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    });\n                    that.UPDATE_CONDITION_STATE(false);\n                    that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                    sysDatasetObj.updateSelectedBranch(node['regex'], i);\n                    sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1);\n                  });\n                }\n              }\n\n              if (!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)) {\n                g.append('path').attr('class', '1bPath-' + node['regex']['key']).attr('d', function () {\n                  var x1 = curX + 40 + 3;\n                  var y1 = curY + 16;\n                  var x2 = curX + 40 + 3;\n                  var y2 = curY + 24;\n                  var r = 7;\n                  eleWidth = 5 + 15;\n                  return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n                }).attr('style', 'stroke: #000000; stroke-width: 1.5px; fill: none;');\n                g.append('path').attr('class', '1bPath-' + node['regex']['key']).attr('d', function () {\n                  var x0 = curX + 40 + 3;\n                  var y0 = curY + 24;\n                  var x1 = x0 + 4;\n                  var y1 = y0 + 6;\n                  return \"M \" + x1 + \",\" + y1 + \" L \" + x0 + \",\" + y0;\n                }).attr('style', 'stroke: #000000; stroke-width: 1.5px; fill: none;');\n                g.append('text').attr('x', curX + 40 + 5).attr('y', curY).attr('font-size', '12px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                  return node['regex']['composition'][i]['repeat'][0];\n                });\n\n                if (node['regex']['composition'][i]['repeat'][1] == '*') {\n                  g.append('text').attr('x', curX + 40 + 5).attr('y', curY + 30).attr('font-size', '20px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                    return node['regex']['composition'][i]['repeat'][1];\n                  });\n                } else {\n                  g.append('text').attr('x', curX + 40 + 5).attr('y', curY + 30).attr('font-size', '12px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                    return node['regex']['composition'][i]['repeat'][1];\n                  });\n                }\n              }\n\n              curY = curY + 40 + 10;\n              eleHeight = eleHeight + 40 + 10;\n            } else if (node['regex']['composition'][i]['type'] == 'or') {\n              g.append('path').attr('class', 'path-' + node['regex']['composition'][i]['key']).attr('d', function () {\n                var x1 = curX + 15;\n                var y1 = curY + 2.5;\n                var x2 = curX + 15;\n                var y2 = curY + 44.5;\n                var qx = x1 - (y2 - y1) / 3;\n                var qy = (y2 + y1) / 2;\n                return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n              }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              g.append('rect').attr('width', '18').attr('height', '42').attr('transform', function () {\n                var x1 = curX + 15;\n                var y1 = curY + 2.5;\n                var x2 = curX + 15;\n                var y2 = curY + 44.5;\n                var qx = x1 - (y2 - y1) / 3 + 5;\n                var qy = (y2 + y1) / 2;\n                return \"translate(\".concat(qx, \", \").concat(y1, \")\");\n              }).attr('opacity', '0').on('click', function () {\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                d3.selectAll('.path-' + node['regex']['composition'][i]['key']).attr('style', 'stroke: red; stroke-width: 2px; fill: none;');\n              });\n              curX = curX + 15;\n              eleWidth += 15;\n\n              var _loop3 = function _loop3(j) {\n                if (j != 0) {\n                  g.append('path').attr('d', function () {\n                    var x1 = curX + 10;\n                    var y1 = curY + 3;\n                    return \"M \" + x1 + \" \" + y1 + \" v \" + 42;\n                  }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n                  curX += 10;\n                  eleWidth += 5;\n                }\n\n                if ('notFlag' in node['regex']['composition'][i]['composition'][j] && node['regex']['composition'][i]['composition'][j]['notFlag']) {\n                  g.append('path').attr('d', function () {\n                    var x1 = curX + 7;\n                    var y1 = curY + 5;\n                    return \"M \" + x1 + \" \" + y1 + \"v \" + 32;\n                  }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n                  g.append('circle').attr('cx', curX + 7).attr('cy', curY + 40).attr('r', '1').attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n                  curX += 3;\n                  eleWidth += 3;\n                }\n\n                g.append('rect').attr('class', 'unselectable title').attr('id', 'rect' + node['regex']['composition'][i]['composition'][j]['key']).attr('x', curX + 10).attr('y', curY + 3).attr('width', 42).attr('height', 42).attr('style', function () {\n                  var tmpKey = sysDatasetObj.getSelectedDomKey();\n\n                  if ('definition' in node['regex']['composition'][i]['composition'][j]) {\n                    if (node['regex']['composition'][i]['composition'][j]['definition']) {\n                      if (node['regex']['composition'][i]['composition'][j]['key'] === tmpKey) {\n                        return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                      }\n\n                      return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                    }\n                  }\n\n                  if ('key' in node['regex']['composition'][i]['composition'][j] && node['regex']['composition'][i]['composition'][j].key === tmpKey) {\n                    return \"stroke: red !important; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                  }\n\n                  return \"stroke: #c4bbbb; \" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                }).on('click', function () {\n                  d3.select(this).attr('style', function () {\n                    if ('definition' in node['regex']['composition'][i]['composition'][j]) {\n                      if (node['regex']['composition'][i]['composition'][j]['definition']) {\n                        return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                      }\n                    }\n\n                    return \"stroke: red !important;\" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                  });\n                  that.UPDATE_CONDITION_STATE(false);\n                  that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]['composition'][j]);\n                  sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], j);\n                });\n\n                if ('nodeName' in node['regex']['composition'][i]['composition'][j]) {\n                  g.append('text').attr('class', 'new11').attr('x', curX + 31).attr('y', curY + 24).attr('fill', 'white').attr('font-size', '18px !important').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                    return node['regex']['composition'][i]['composition'][j]['nodeName'];\n                  }).on('click', function () {\n                    d3.select('#rect' + node['regex']['composition'][i]['key']).attr('style', function () {\n                      if ('definition' in node['regex']['composition'][i]['composition'][j]) {\n                        if (node['regex']['composition'][i]['composition'][j]['definition']) {\n                          return \"stroke: red !important;\" + \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n                        }\n                      }\n\n                      return \"stroke: red !important;\" + \"stroke-width: 2; \" + \"stroke-dasharray: 4 2;\" + \"fill: white; \";\n                    });\n                    that.UPDATE_CONDITION_STATE(false);\n                    that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]['composition'][j]);\n                    sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], j);\n                  });\n                }\n\n                curX = curX + 52;\n                eleWidth += 52;\n\n                if (!(node['regex']['composition'][i]['composition'][j]['repeat'][0] == 1 && node['regex']['composition'][i]['composition'][j]['repeat'][1] == 1)) {\n                  g.append('text').attr('x', curX + 5).attr('y', curY + 2).attr('font-size', '15px').attr('alignment-baseline', 'hanging').text(function () {\n                    return node['regex']['composition'][i]['composition'][j]['repeat'][0] + '..' + node['regex']['composition'][i]['composition'][j]['repeat'][1];\n                  });\n                  curX = curX + 30;\n                  eleWidth += 30;\n                }\n              };\n\n              for (var j in node['regex']['composition'][i]['composition']) {\n                _loop3(j);\n              }\n\n              g.append('path').attr('class', 'path-' + node['regex']['composition'][i]['key']).attr('d', function () {\n                var x1 = curX + 10;\n                var y1 = curY + 2.5;\n                var x2 = curX + 10;\n                var y2 = curY + 44.5;\n                var qx = x1 + (y2 - y1) / 3;\n                var qy = (y2 + y1) / 2;\n                return \"M \" + x1 + \" \" + y1 + \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2;\n              }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              g.append('rect').attr('width', '18').attr('height', '42').attr('transform', function () {\n                var x1 = curX + 10;\n                var y1 = curY + 2.5;\n                var x2 = curX + 10;\n                var y2 = curY + 44.5;\n                var qx = x1 - 5;\n                var qy = (y2 + y1) / 2;\n                return \"translate(\".concat(qx, \", \").concat(y1, \")\");\n              }).attr('opacity', '0').on('click', function () {\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]);\n                d3.selectAll('.path-' + node['regex']['composition'][i]['key']).attr('style', 'stroke: red; stroke-width: 2px; fill: none;');\n              });\n              curX = curX + 15;\n              eleWidth += 15;\n\n              if (!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)) {\n                g.append('text').attr('x', curX + 5).attr('y', curY + 2).attr('font-size', '15px').attr('alignment-baseline', 'hanging').text(function () {\n                  return node['regex']['composition'][i]['repeat'][0] + '..' + node['regex']['composition'][i]['repeat'][1];\n                });\n                curX = curX + 30;\n                eleWidth += 30;\n              }\n\n              node.width = 8 + eleWidth;\n            }\n          };\n\n          for (var i in node['regex']['composition']) {\n            _loop2(i);\n          }\n\n          node.width = eleWidth + 40 + 5;\n          node.height = eleHeight - 5;\n        })();\n      } // .attr(\"class\", \"connector\");\n\n\n      var connectors = [];\n      var connectorPosition = this.getConnectorPosition(node);\n\n      var _loop4 = function _loop4(position) {\n        var positionElement = connectorPosition[position];\n        var connector = g.append(\"circle\").attr(\"cx\", positionElement.x).attr(\"cy\", positionElement.y).attr(\"r\", 4).attr(\"class\", \"connector\");\n        connector.on(\"mousedown\", function () {\n          d3.event.stopPropagation();\n\n          if (node.type === \"end\" || that.readonly) {\n            return;\n          }\n\n          that.connectingInfo.source = node;\n          that.connectingInfo.sourcePosition = position;\n        }).on(\"mouseup\", function () {\n          d3.event.stopPropagation();\n\n          if (that.connectingInfo.source) {\n            if (that.connectingInfo.source.id !== node.id) {\n              // Node can't connect to itself\n              var tempId = +new Date();\n              var conn = {\n                source: {\n                  id: that.connectingInfo.source.id,\n                  position: that.connectingInfo.sourcePosition\n                },\n                destination: {\n                  id: node.id,\n                  position: position\n                },\n                id: tempId,\n                type: \"pass\",\n                name: \"Pass\"\n              };\n              var tmpSource = that.internalNodes.filter(function (item) {\n                return item.id === conn['source']['id'];\n              })[0];\n              var tmpDestination = that.internalNodes.filter(function (item) {\n                return item.id === conn['destination']['id'];\n              })[0];\n              sysDatasetObj.addEdge(tmpSource['regexIndex'], tmpDestination['regexIndex']);\n              that.internalConnections.push(conn);\n            }\n\n            that.connectingInfo.source = null;\n            that.connectingInfo.sourcePosition = null;\n          }\n        }).on(\"mouseover\", function () {\n          connector.classed(\"active\", true);\n        }).on(\"mouseout\", function () {\n          connector.classed(\"active\", false);\n        });\n        connectors.push(connector);\n      };\n\n      for (var position in connectorPosition) {\n        _loop4(position);\n      }\n\n      g.on(\"mouseover\", function () {\n        connectors.forEach(function (conn) {\n          return conn.classed(\"active\", true);\n        });\n      }).on(\"mouseout\", function () {\n        connectors.forEach(function (conn) {\n          return conn.classed(\"active\", false);\n        });\n      });\n    },\n    getCurrentNodesEdge: function getCurrentNodesEdge() {\n      var points = this.currentNodes.map(function (node) {\n        return {\n          x: node.x,\n          y: node.y\n        };\n      });\n      points.push.apply(points, _toConsumableArray(this.currentNodes.map(function (node) {\n        return {\n          x: node.x + node.width,\n          y: node.y + node.height\n        };\n      })));\n      return getEdgeOfPoints(points);\n    },\n    remove: function () {\n      var _remove = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, conn, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, node;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.readonly) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                if (!(this.currentConnections.length > 0)) {\n                  _context4.next = 23;\n                  break;\n                }\n\n                _iteratorNormalCompletion5 = true;\n                _didIteratorError5 = false;\n                _iteratorError5 = undefined;\n                _context4.prev = 6;\n\n                for (_iterator5 = this.currentConnections[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  conn = _step5.value;\n                  this.removeConnection(conn);\n                }\n\n                _context4.next = 14;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](6);\n                _didIteratorError5 = true;\n                _iteratorError5 = _context4.t0;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.prev = 15;\n\n                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                  _iterator5.return();\n                }\n\n              case 17:\n                _context4.prev = 17;\n\n                if (!_didIteratorError5) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                throw _iteratorError5;\n\n              case 20:\n                return _context4.finish(17);\n\n              case 21:\n                return _context4.finish(14);\n\n              case 22:\n                this.currentConnections.splice(0, this.currentConnections.length);\n\n              case 23:\n                if (!(this.currentNodes.length > 0)) {\n                  _context4.next = 44;\n                  break;\n                }\n\n                _iteratorNormalCompletion6 = true;\n                _didIteratorError6 = false;\n                _iteratorError6 = undefined;\n                _context4.prev = 27;\n\n                for (_iterator6 = this.currentNodes[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  node = _step6.value;\n                  this.removeNode(node);\n                }\n\n                _context4.next = 35;\n                break;\n\n              case 31:\n                _context4.prev = 31;\n                _context4.t1 = _context4[\"catch\"](27);\n                _didIteratorError6 = true;\n                _iteratorError6 = _context4.t1;\n\n              case 35:\n                _context4.prev = 35;\n                _context4.prev = 36;\n\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n\n              case 38:\n                _context4.prev = 38;\n\n                if (!_didIteratorError6) {\n                  _context4.next = 41;\n                  break;\n                }\n\n                throw _iteratorError6;\n\n              case 41:\n                return _context4.finish(38);\n\n              case 42:\n                return _context4.finish(35);\n\n              case 43:\n                this.currentNodes.splice(0, this.currentNodes.length);\n\n              case 44:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[6, 10, 14, 22], [15,, 17, 21], [27, 31, 35, 43], [36,, 38, 42]]);\n      }));\n\n      function remove() {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }(),\n    removeNode: function removeNode(node) {\n      var connections = this.internalConnections.filter(function (item) {\n        return item.source.id === node.id || item.destination.id === node.id;\n      });\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = connections[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var connection = _step7.value;\n          this.internalConnections.splice(this.internalConnections.indexOf(connection), 1);\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      sysDatasetObj.deleteEdge(node['regexIndex']);\n      this.internalNodes.splice(this.internalNodes.indexOf(node), 1);\n    },\n    removeConnection: function removeConnection(conn) {\n      var index = this.internalConnections.indexOf(conn);\n      var tmpSource = this.internalNodes.filter(function (item) {\n        return item.id === conn['source']['id'];\n      })[0];\n      var tmpDestination = this.internalNodes.filter(function (item) {\n        return item.id === conn['destination']['id'];\n      })[0];\n      sysDatasetObj.deleteEdge1(tmpSource['regexIndex'], tmpDestination['regexIndex']);\n      this.internalConnections.splice(index, 1);\n    },\n    moveCurrentNode: function moveCurrentNode(x, y) {\n      if (this.currentNodes.length > 0 && !this.readonly) {\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = this.currentNodes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var node = _step8.value;\n            node.x += x;\n            node.y += y;\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      }\n    },\n    init: function init() {\n      var that = this;\n      that.internalNodes.splice(0, that.internalNodes.length);\n      that.internalConnections.splice(0, that.internalConnections.length);\n      that.nodes.forEach(function (node) {\n        var newNode = Object.assign({}, node);\n        newNode.width = newNode.width || 120;\n        newNode.height = newNode.height || 60;\n        that.internalNodes.push(newNode);\n      });\n      that.connections.forEach(function (connection) {\n        that.internalConnections.push(JSON.parse(JSON.stringify(connection)));\n      });\n    }\n  }, mapMutations(['UPDATE_HOVERING_ID'])),\n  mounted: function mounted() {\n    var that = this;\n    that.init();\n\n    document.onkeydown = function (event) {\n      switch (event.keyCode) {\n        case 37:\n          that.moveCurrentNode(-10, 0);\n          break;\n\n        case 38:\n          that.moveCurrentNode(0, -10);\n          break;\n\n        case 39:\n          that.moveCurrentNode(10, 0);\n          break;\n\n        case 40:\n          that.moveCurrentNode(0, 10);\n          break;\n\n        case 27:\n          that.currentNodes.splice(0, that.currentNodes.length);\n          that.currentConnections.splice(0, that.currentConnections.length);\n          break;\n\n        case 65:\n          if (document.activeElement === document.getElementById(\"chart\")) {\n            var _that$currentNodes, _that$currentConnecti;\n\n            that.currentNodes.splice(0, that.currentNodes.length);\n            that.currentConnections.splice(0, that.currentConnections.length);\n\n            (_that$currentNodes = that.currentNodes).push.apply(_that$currentNodes, _toConsumableArray(that.internalNodes));\n\n            (_that$currentConnecti = that.currentConnections).push.apply(_that$currentConnecti, _toConsumableArray(that.internalConnections));\n\n            event.preventDefault();\n          }\n\n          break;\n        // delete the selected item\n\n        case 8: // case 46:\n        //   that.remove();\n        //   break;\n\n        default:\n          break;\n      }\n    };\n  },\n  created: function created() {}\n}, _defineProperty(_name$props$data$watc, \"computed\", {\n  // ...mapState([\n  //   'hoveringId'\n  // ]),\n  hoveredConnector: function hoveredConnector() {\n    var _iteratorNormalCompletion9 = true;\n    var _didIteratorError9 = false;\n    var _iteratorError9 = undefined;\n\n    try {\n      for (var _iterator9 = this.internalNodes[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n        var node = _step9.value;\n        var connectorPosition = this.getConnectorPosition(node);\n\n        for (var prop in connectorPosition) {\n          var entry = connectorPosition[prop];\n\n          if (Math.hypot(entry.x - this.cursorToChartOffset.x, entry.y - this.cursorToChartOffset.y) < 10) {\n            return {\n              position: prop,\n              node: node\n            };\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError9 = true;\n      _iteratorError9 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n          _iterator9.return();\n        }\n      } finally {\n        if (_didIteratorError9) {\n          throw _iteratorError9;\n        }\n      }\n    }\n\n    return null;\n  },\n  hoveredConnection: function hoveredConnection() {\n    var _this = this;\n\n    var _iteratorNormalCompletion10 = true;\n    var _didIteratorError10 = false;\n    var _iteratorError10 = undefined;\n\n    try {\n      var _loop5 = function _loop5() {\n        var line = _step10.value;\n        var distance = distanceOfPointToLine(line.sourceX, line.sourceY, line.destinationX, line.destinationY, _this.cursorToChartOffset.x, _this.cursorToChartOffset.y);\n\n        if (distance < 5 && between(line.sourceX - 2, line.destinationX + 2, _this.cursorToChartOffset.x) && between(line.sourceY - 2, line.destinationY + 2, _this.cursorToChartOffset.y)) {\n          var connections = _this.internalConnections.filter(function (item) {\n            return item.id === line.id;\n          });\n\n          return {\n            v: connections.length > 0 ? connections[0] : null\n          };\n        }\n      };\n\n      for (var _iterator10 = this.lines[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n        var _ret = _loop5();\n\n        if (_typeof(_ret) === \"object\") return _ret.v;\n      }\n    } catch (err) {\n      _didIteratorError10 = true;\n      _iteratorError10 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n          _iterator10.return();\n        }\n      } finally {\n        if (_didIteratorError10) {\n          throw _iteratorError10;\n        }\n      }\n    }\n\n    return null;\n  },\n  cursor: function cursor() {\n    if (this.connectingInfo.source || this.hoveredConnector) {\n      return \"crosshair\";\n    }\n\n    if (this.hoveredConnection != null) {\n      return \"pointer\";\n    }\n\n    return null;\n  }\n}), _defineProperty(_name$props$data$watc, \"watch\", {\n  internalNodes: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderNodes();\n      this.renderConnections();\n    }\n  },\n  internalConnections: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderConnections();\n    }\n  },\n  selectionInfo: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderSelection();\n    }\n  },\n  currentNodes: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderNodes();\n    }\n  },\n  currentConnections: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderConnections();\n    }\n  },\n  cursorToChartOffset: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      if (this.selectionInfo) {\n        this.renderSelection();\n      }\n    }\n  },\n  connectingInfo: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.renderConnections();\n    }\n  },\n  nodes: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.init();\n    }\n  },\n  connections: {\n    immediate: true,\n    deep: true,\n    handler: function handler() {\n      this.init();\n    }\n  }\n}), _name$props$data$watc);",{"version":3,"sources":["Flowchart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAA,KAAA,EAAA,MAAA;AACA,SAAA,QAAA,EAAA,YAAA,QAAA,MAAA;AACA,OAAA,KAAA,EAAA,MAAA,IAAA;AAEA,SACA,SADA,EAEA,OAFA,EAGA,qBAHA,EAIA,eAJA,EAKA,0BALA;AAOA,OAAA,MAAA;AAEA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KALA;AASA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAjBA;AAqBA,IAAA,qBAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAFA;AArBA,GAFA;AA4BA,EAAA,IA5BA,kBA4BA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,EADA;AAEA,MAAA,mBAAA,EAAA,EAFA;AAGA,MAAA,cAAA,EAAA;AACA,QAAA,MAAA,EAAA,IADA;AAEA,QAAA,cAAA,EAAA;AAFA,OAHA;AAOA,MAAA,aAAA,EAAA,IAPA;AAQA,MAAA,YAAA,EAAA,EARA;AASA,MAAA,kBAAA,EAAA,EATA;;AAUA;;;AAGA,MAAA,mBAAA,EAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OAbA;AAcA,MAAA,WAAA,EAAA,KAdA;AAeA,MAAA,eAAA,EAAA,KAfA;;AAgBA;;;AAGA,MAAA,KAAA,EAAA,EAnBA;AAoBA,MAAA,QAAA,EAAA,KApBA;AAqBA,MAAA,YAAA,EAAA,EArBA;AAsBA,MAAA,gBAAA,EAAA;AAtBA,KAAA;AAwBA,GArDA;AAsDA,EAAA,KAAA,EAAA;AACA,IAAA,cAAA,EAAA,0BAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA;AAHA,GAtDA;AA2DA,EAAA,QAAA,oBACA,QAAA,CAAA,CACA,mBADA,EAEA,eAFA,EAGA,gBAHA,EAIA,aAJA,EAKA,eALA,CAAA,CADA,CA3DA;AAoEA,EAAA,OAAA,oBACA,YAAA,CAAA,CACA,gBADA,EAEA,sBAFA,EAGA,mBAHA,EAIA,qBAJA,EAKA,wBALA,EAMA,iBANA,EAOA,kBAPA,EAQA,8BARA,CAAA,CADA;AAYA,IAAA,KAZA,mBAYA;AACA,UAAA,QAAA,GAAA,aAAA,CAAA,WAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,QAAA;AACA,UAAA,QAAA,GAAA;AACA,gBAAA,MADA;AAEA,kBAAA,CAAA,CAAA,EAAA,CAAA,CAFA;AAGA,gBAAA,EAHA;AAMA,oBAAA;AANA,OAAA;;AAUA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,aAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,aAAA,CAAA,CAAA,EAAA,OAAA,EAAA,UAAA,IAAA,EAAA;AACA;;AACA,WAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,QAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA;AACA,YAAA,IAAA,GAAA,IAAA;;AACA,aAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAA,aAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,cAAA,QAAA,CAAA,EAAA,CAAA,CAAA,CAAA,KAAA,KAAA,aAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA;AACA;;AACA,cAAA,QAAA,CAAA,EAAA,CAAA,CAAA,CAAA,KAAA,KAAA,aAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA;AACA;AACA;;AACA,QAAA,IAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA;AACA;;AACA,UAAA,QAAA,CAAA,MAAA,IAAA,CAAA,IAAA,KAAA,aAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,QAAA,QAAA,GAAA,KAAA,aAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA;;AACA,WAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,QAAA,CAAA,MAAA,EAAA,GAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,KAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,YAAA,IAAA,IAAA,CAAA,CAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,aAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,KAAA,aAAA,CAAA,CAAA,EAAA,YAAA,KAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,cAAA,QAAA,GAAA,KAAA,aAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,MAAA,aAAA,CAAA,WAAA,CAAA,QAAA;AACA,WAAA,gBAAA;AACA,KAhEA;AAiEA,IAAA,GAjEA,eAiEA,IAjEA,EAiEA;AACA,UAAA,KAAA,QAAA,EAAA;AACA;AACA;;AACA,WAAA,aAAA,CAAA,IAAA,CAAA,IAAA;AACA,KAtEA;AAuEA,IAAA,QAvEA,oBAuEA,IAvEA,EAuEA;AACA,UAAA,KAAA,QAAA,EAAA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,UAAA,EAAA,IAAA;AACA,KA5EA;AA6EA,IAAA,qBA7EA,iCA6EA,KA7EA,EA6EA;AACA,MAAA,KAAA,CAAA,eAAA;AACA,MAAA,KAAA,CAAA,cAAA;;AACA,UAAA,KAAA,CAAA,OAAA,EAAA;AACA,YAAA,GAAA,GAAA,QAAA,CAAA,cAAA,CAAA,KAAA,CAAA;AACA,YAAA,IAAA,GAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAAA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,IAAA,KAAA,GAAA,EAAA;AACA;AACA;;AACA,QAAA,IAAA,IAAA,KAAA,CAAA,MAAA,GAAA,GAAA,GAAA,EAAA;AACA,QAAA,GAAA,CAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AACA;AACA,KAzFA;AA0FA,IAAA,kBA1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2FA,oBAAA,KAAA,cAAA,CAAA,MAAA,EAAA;AACA,sBAAA,KAAA,gBAAA,EAAA;AACA,wBAAA,KAAA,cAAA,CAAA,MAAA,CAAA,EAAA,KAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,EAAA,EAAA;AACA;AACA,sBAAA,MAFA,GAEA,CAAA,IAAA,IAAA,EAFA;AAGA,sBAAA,IAHA,GAGA;AACA,wBAAA,MAAA,EAAA;AACA,0BAAA,EAAA,EAAA,KAAA,cAAA,CAAA,MAAA,CAAA,EADA;AAEA,0BAAA,QAAA,EAAA,KAAA,cAAA,CAAA;AAFA,yBADA;AAKA,wBAAA,WAAA,EAAA;AACA,0BAAA,EAAA,EAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,EADA;AAEA,0BAAA,QAAA,EAAA,KAAA,gBAAA,CAAA;AAFA,yBALA;AASA,wBAAA,EAAA,EAAA,MATA;AAUA,wBAAA,IAAA,EAAA,MAVA;AAWA,wBAAA,IAAA,EAAA;AAXA,uBAHA;AAgBA,sBAAA,SAhBA,GAgBA,KAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,+BAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA;AAAA,uBAAA,EAAA,CAAA,CAhBA;AAiBA,sBAAA,cAjBA,GAiBA,KAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,+BAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,aAAA,CAAA,CAAA,IAAA,CAAA;AAAA,uBAAA,EAAA,CAAA,CAjBA;AAkBA,sBAAA,aAAA,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,EAAA,cAAA,CAAA,YAAA,CAAA;AAEA,2BAAA,mBAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA;;AACA,uBAAA,cAAA,CAAA,MAAA,GAAA,IAAA;AACA,uBAAA,cAAA,CAAA,cAAA,GAAA,IAAA;AACA;;AACA,oBAAA,KAAA,aAAA,EAAA;AACA,uBAAA,aAAA,GAAA,IAAA;AACA;;AACA,qBAAA,gBAAA,GAAA,KAAA;;AA1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6HA,IAAA,oBA7HA;AAAA;AAAA;AAAA,gDA6HA,KA7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8HA;AACA,gBAAA,GA/HA,GA+HA,QAAA,CAAA,cAAA,CAAA,KAAA,CA/HA;AAgIA,gBAAA,IAhIA,GAgIA,GAAA,CAAA,KAAA,CAAA,IAhIA,EAgIA;;AACA,oBAAA,IAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,kBAAA,IAAA,GAAA,CAAA;AACA;;AACA,gBAAA,IAAA,GAAA,UAAA,CAAA,IAAA,CAAA;AACA,gBAAA,kBArIA,GAqIA,KAAA,CAAA,aAAA,CAAA,qBAAA,EArIA;AAsIA,gBAAA,OAtIA,GAsIA,KAAA,CAAA,KAAA,GAAA,kBAAA,CAAA,IAAA,GAAA,MAAA,CAAA,OAtIA;AAuIA,gBAAA,OAAA,GAAA,OAAA,GAAA,IAAA;AACA,qBAAA,mBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA;AACA,gBAAA,OAzIA,GAyIA,KAAA,CAAA,KAAA,GAAA,kBAAA,CAAA,GAAA,GAAA,MAAA,CAAA,OAzIA;AA0IA,gBAAA,OAAA,GAAA,OAAA,GAAA,IAAA;AACA,qBAAA,mBAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA;;AA3IA,qBA4IA,KAAA,cAAA,CAAA,MA5IA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA6IA,KAAA,iBAAA,EA7IA;;AAAA;AA+IA,gBAAA,EAAA,CAAA,SAAA,CAAA,iBAAA,EAAA,OAAA,CAAA,QAAA,EAAA,IAAA;AAEA,gBAAA,YAjJA,GAiJA,KAAA,sBAAA,CACA,KAAA,cAAA,CAAA,MAAA,CAAA,EADA,EAEA,KAAA,cAAA,CAAA,cAFA,CAjJA;AAqJA,gBAAA,mBArJA,GAqJA,KAAA,gBAAA,GACA,KAAA,gBAAA,CAAA,QADA,GAEA,IAvJA;AAwJA,qBAAA,OAAA,CACA,YAAA,CAAA,CADA,EAEA,YAAA,CAAA,CAFA,EAGA,KAAA,mBAAA,CAAA,CAHA,EAIA,KAAA,mBAAA,CAAA,CAJA,EAKA,KAAA,cAAA,CAAA,cALA,EAMA,KANA,EAOA,mBAPA;;AAxJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmKA,IAAA,oBAnKA,gCAmKA,KAnKA,EAmKA;AACA,UAAA,KAAA,CAAA,OAAA,EAAA;AACA;AACA;;AACA,MAAA,aAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;AACA,WAAA,4BAAA;AACA,WAAA,aAAA,GAAA;AAAA,QAAA,CAAA,EAAA,KAAA,CAAA,OAAA;AAAA,QAAA,CAAA,EAAA,KAAA,CAAA;AAAA,OAAA;AACA,KA1KA;AA2KA,IAAA,oBA3KA,gCA2KA,IA3KA,EA2KA;AACA;AACA,UAAA,SAAA,GAAA,KAAA,CAAA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,MAAA,GAAA,CAAA;AACA,UAAA,GAAA,GAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,SAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA;AAAA,OAAA;AACA,UAAA,IAAA,GAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA;AAAA,OAAA;AACA,UAAA,MAAA,GAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,SAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA;AAAA,OAAA;AACA,UAAA,KAAA,GAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA;AAAA,QAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA;AAAA,OAAA;AACA,aAAA;AAAA,QAAA,IAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,GAAA,EAAA,GAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;AACA,KApLA;AAqLA,IAAA,eArLA,6BAqLA;AACA,UAAA,IAAA,GAAA,IAAA,CADA,CAEA;;AACA,UAAA,IAAA,CAAA,aAAA,EAAA;AACA,QAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,QAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,kBAAA,CAAA,MAAA;AACA,YAAA,IAAA,GAAA,eAAA,CAAA,CACA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA,aAAA,CAAA,CAAA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA,aAAA,CAAA;AAAA,SADA,EAEA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA,mBAAA,CAAA,CAAA;AAAA,UAAA,CAAA,EAAA,IAAA,CAAA,mBAAA,CAAA;AAAA,SAFA,CAAA,CAAA;AAIA,YAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACA,YAAA,IAAA,GAAA,GAAA,CAAA,MAAA,CAAA,YAAA,EAAA,OAAA,CAAA,QAAA,EAAA,IAAA,CAAA;AACA,QAAA,IAAA,CACA,IADA,CACA,GADA,EACA,IAAA,CAAA,KAAA,CAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,CAAA,KAAA,CAAA,CAFA,EAGA,IAHA,CAGA,OAHA,EAGA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAHA,EAIA,IAJA,CAIA,QAJA,EAIA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAJA;AAMA,QAAA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,MAAA,GAAA,CACA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA;AAAA,WADA,EAEA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA;AAAA,WAFA,EAGA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA;AAAA,WAHA,EAIA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA;AAAA,WAJA,CAAA;;AAMA,cACA,MAAA,CAAA,KAAA,CAAA,UAAA,KAAA;AAAA,mBAAA,0BAAA,CAAA,KAAA,EAAA,IAAA,CAAA;AAAA,WAAA,CADA,EAEA;AACA,YAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA,SAZA;AAaA,QAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,MAAA,GAAA,CACA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,OAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA;AAAA,WADA,EAEA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA,YAAA;AAAA,YAAA,CAAA,EAAA,IAAA,CAAA;AAAA,WAFA,CAAA;;AAIA,cACA,MAAA,CAAA,KAAA,CAAA,UAAA,KAAA;AAAA,mBAAA,0BAAA,CAAA,KAAA,EAAA,IAAA,CAAA;AAAA,WAAA,KACA,IAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AAAA,WAAA,CAFA,EAGA;AACA,gBAAA,UAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,MAAA,CACA,UAAA,IAAA;AAAA,qBAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AAAA,aADA,EAEA,CAFA,CAAA;AAGA,YAAA,IAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,UAAA;AACA;AACA,SAdA;AAeA,OA3CA,MA2CA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,mBAAA,EAAA,OAAA,CAAA,QAAA,EAAA,KAAA;AACA;AACA,KAtOA;AAuOA,IAAA,iBAvOA,+BAuOA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,QAAA,IAAA,CAAA,SAAA,CAAA,YAAA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,GADA,CAEA;;AACA,UAAA,IAAA,CAAA,KAAA,GAAA,EAAA;AACA,UAAA,IAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,gBAAA,cAAA,GAAA,IAAA,CAAA,sBAAA,CACA,IAAA,CAAA,MAAA,CAAA,EADA,EAEA,IAAA,CAAA,MAAA,CAAA,QAFA,CAAA;AAIA,gBAAA,mBAAA,GAAA,IAAA,CAAA,sBAAA,CACA,IAAA,CAAA,WAAA,CAAA,EADA,EAEA,IAAA,CAAA,WAAA,CAAA,QAFA,CAAA;AAIA,gBAAA,MAAA,GAAA;AACA,cAAA,IAAA,EAAA,SADA;AAEA,cAAA,MAAA,EAAA;AAFA,aAAA;AAIA,gBAAA,kBAAA,GAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,qBAAA,IAAA,KAAA,IAAA;AAAA,aAAA,EAAA,MAAA,GAAA,CAAA;;AACA,gBAAA,kBAAA,EAAA;AACA,cAAA,MAAA,GAAA;AACA,gBAAA,IAAA,EAAA,SADA;AAEA,gBAAA,MAAA,EAAA;AAFA,eAAA;AAIA;;AACA,gBAAA,MAAA,GAAA,IAAA,CAAA,OAAA,CACA,cAAA,CAAA,CADA,EAEA,cAAA,CAAA,CAFA,EAGA,mBAAA,CAAA,CAHA,EAIA,mBAAA,CAAA,CAJA,EAKA,IAAA,CAAA,MAAA,CAAA,QALA,EAMA,IAAA,CAAA,WAAA,CAAA,QANA,EAOA,kBAPA,EAQA,MAAA,CAAA,IAAA,CAAA,IAAA,CARA,CAAA;AApBA;AAAA;AAAA;;AAAA;AA8BA,mCAAA,MAAA,CAAA,KAAA,8HAAA;AAAA,oBAAA,IAAA;AACA,gBAAA,IAAA,CAAA,EAAA,CAAA,WAAA,EAAA,YAAA;AACA,kBAAA,EAAA,CAAA,KAAA,CAAA,eAAA;;AACA,sBAAA,IAAA,CAAA,eAAA,EAAA;AACA,oBAAA,IAAA,CAAA,cAAA,CAAA,IAAA;AACA,mBAFA,MAEA;AACA,wBAAA,KAAA,GAAA,UAAA,CAAA,YAAA;AACA,sBAAA,IAAA,CAAA,eAAA,GAAA,KAAA;AACA,sBAAA,YAAA,CAAA,KAAA,CAAA;AACA,qBAHA,EAGA,GAHA,CAAA;AAIA,oBAAA,IAAA,CAAA,eAAA,GAAA,IAAA;AACA;;AACA,kBAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,kBAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,kBAAA,CAAA,MAAA;AACA,kBAAA,IAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,IAAA;AACA,iBAdA;AAeA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA+CA,oCAAA,MAAA,CAAA,KAAA,mIAAA;AAAA,oBAAA,IAAA;AACA,gBAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,kBAAA,OAAA,EAAA,IAAA,CAAA,OADA;AAEA,kBAAA,OAAA,EAAA,IAAA,CAAA,OAFA;AAGA,kBAAA,YAAA,EAAA,IAAA,CAAA,YAHA;AAIA,kBAAA,YAAA,EAAA,IAAA,CAAA,YAJA;AAKA,kBAAA,EAAA,EAAA,IAAA,CAAA;AALA,iBAAA;AAOA;AAvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwDA,WAxDA;AAyDA,UAAA,OAAA;AACA,SA9DA;AA+DA,OAhEA,CAAA;AAiEA,KA1SA;AA2SA,IAAA,WA3SA,yBA2SA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA,GADA,CAGA;;AACA,QAAA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,UAAA,IAAA,CAAA,UAAA,CACA,IADA,EAEA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,mBAAA,IAAA,KAAA,IAAA;AAAA,WAAA,EAAA,MAAA,GAAA,CAFA;AAIA,SALA;AAOA,QAAA,OAAA;AACA,OAZA,CAAA;AAaA,KA1TA;AA2TA,IAAA,sBA3TA,kCA2TA,MA3TA,EA2TA,iBA3TA,EA2TA;AACA,UAAA,IAAA,GAAA,KAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA,KAAA,MAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AACA,aAAA,KAAA,oBAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;AACA,KA9TA;AA+TA,IAAA,MA/TA,kBA+TA,OA/TA,EA+TA;AACA,UAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACA,aAAA,GAAA,CAAA,MAAA,CAAA,OAAA,EAAA,YAAA,CAAA;AACA,KAlUA;AAmUA,IAAA,WAnUA,uBAmUA,EAnUA,EAmUA,EAnUA,EAmUA,EAnUA,EAmUA,EAnUA,EAmUA;AACA,UAAA,CAAA,GAAA,KAAA,MAAA,CAAA,GAAA,CAAA;AACA,MAAA,CAAA,CAAA,OAAA,CAAA,WAAA,EAAA,IAAA;AACA,MAAA,MAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,KAvUA;AAwUA,IAAA,OAxUA,mBAwUA,EAxUA,EAwUA,EAxUA,EAwUA,EAxUA,EAwUA,EAxUA,EAwUA,aAxUA,EAwUA,WAxUA,EAwUA,kBAxUA,EAwUA,KAxUA,EAwUA;AACA,UAAA,CAAA,GAAA,KAAA,MAAA,CAAA,GAAA,CAAA;AACA,MAAA,CAAA,CAAA,OAAA,CAAA,YAAA,EAAA,IAAA;;AACA,UAAA,kBAAA,EAAA;AACA,QAAA,KAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,aAAA,EAAA,WAAA,EAAA,GAAA,EAAA,KAAA,IAAA,SAAA,EAAA,IAAA,CAAA;AACA,OAFA,MAEA;AACA,QAAA,KAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,aAAA,EAAA,WAAA,EAAA,CAAA,EAAA,KAAA,IAAA,SAAA,EAAA,IAAA,CAAA;AACA,OAPA,CAQA;;;AACA,aAAA,KAAA,CACA,CADA,EAEA,EAFA,EAGA,EAHA,EAIA,EAJA,EAKA,EALA,EAMA,aANA,EAOA,WAPA,EAQA,CARA,EASA,aATA,EAUA,KAVA,CAAA;AAYA,KA7VA;AA8VA,IAAA,UA9VA,sBA8VA,IA9VA,EA8VA,UA9VA,EA8VA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,QAAA,EAAA,MAAA,EAAA,OAAA,CAAA,MAAA,EAAA,IAAA,CAAA;AAEA,MAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,MAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,qBAAA;AAEA,UAAA,IAAA,GAAA,EAAA,CACA,IADA,GAEA,EAFA,CAEA,OAFA,EAEA,YAAA;AACA;AACA,YAAA,gBAAA,GACA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,KAAA,IAAA;AAAA,SAAA,EAAA,MAAA,KAAA,CADA;;AAEA,YAAA,gBAAA,EAAA;AACA,UAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,kBAAA,CAAA,MAAA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA;AACA,SARA,CASA;AACA;;;AACA,YAAA,IAAA,CAAA,WAAA,EAAA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,IAAA;AACA,SAHA,MAGA;AAEA,cAAA,KAAA,GAAA,UAAA,CAAA,YAAA;AACA,YAAA,IAAA,CAAA,WAAA,GAAA,KAAA;AACA,YAAA,YAAA,CAAA,KAAA,CAAA;AACA,WAHA,EAGA,GAHA,CAAA;AAIA,UAAA,IAAA,CAAA,WAAA,GAAA,IAAA;AACA;AACA,OAxBA,EAyBA,EAzBA,CAyBA,MAzBA;AAAA;AAAA;AAAA;AAAA,8BAyBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,IAAA,CAAA,QADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKA,gBAAA,IALA,GAKA,UAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,EAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CALA;AAAA;AAAA;AAAA;AAAA;;AAMA,kCAAA,IAAA,CAAA,YAAA,2HAAA;AAAA,kBAAA,WAAA;AACA,kBAAA,WAAA,CAAA,CAAA,IAAA,EAAA,CAAA,KAAA,CAAA,EAAA,GAAA,IAAA;AACA,kBAAA,WAAA,CAAA,CAAA,IAAA,EAAA,CAAA,KAAA,CAAA,EAAA,GAAA,IAAA;AACA;;AATA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAWA,gBAAA,EAAA,CAAA,SAAA,CAAA,oBAAA,EAAA,MAAA;AACA,gBAAA,IAZA,GAYA,IAAA,CAAA,mBAAA,EAZA;AAaA,gBAAA,OAbA,GAaA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,IAAA,EAAA,IAAA,EAbA;AAcA,gBAAA,OAdA,GAcA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,IAAA,EAAA,IAAA,EAdA;AAeA,gBAAA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,sBACA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,UAAA,WAAA;AAAA,2BAAA,WAAA,KAAA,IAAA;AAAA,mBAAA,EACA,MADA,KACA,CAFA,EAGA;AACA,wBAAA,IAAA,CAAA,CAAA,KAAA,OAAA,EAAA;AACA;AACA,0BAAA,IAAA,CAAA,CAAA,GAAA,OAAA,EAAA;AACA,wBAAA,IAAA,CAAA,WAAA,CACA,IAAA,CAAA,CADA,EAEA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,MAFA,EAGA,OAHA,EAIA,OAJA;AAMA,uBAPA,MAOA;AACA,wBAAA,IAAA,CAAA,WAAA,CACA,OADA,EAEA,OAAA,GAAA,IAAA,CAAA,MAFA,EAGA,IAAA,CAAA,CAHA,EAIA,IAAA,CAAA,CAJA;AAMA;AACA;;AACA,wBAAA,IAAA,CAAA,CAAA,KAAA,OAAA,EAAA;AACA;AACA,0BAAA,IAAA,CAAA,CAAA,GAAA,OAAA,EAAA;AACA,wBAAA,IAAA,CAAA,WAAA,CACA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KADA,EAEA,IAAA,CAAA,CAFA,EAGA,OAHA,EAIA,OAJA;AAMA,uBAPA,MAOA;AACA,wBAAA,IAAA,CAAA,WAAA,CACA,OAAA,GAAA,IAAA,CAAA,KADA,EAEA,OAFA,EAGA,IAAA,CAAA,CAHA,EAIA,IAAA,CAAA,CAJA;AAMA;AACA;AACA;AACA,iBA1CA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzBA,IAoFA,EApFA,CAoFA,KApFA,EAoFA,YAAA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,oBAAA,EAAA,MAAA;AADA;AAAA;AAAA;;AAAA;AAEA,gCAAA,IAAA,CAAA,YAAA,mIAAA;AAAA,gBAAA,WAAA;AACA,YAAA,WAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,OA1FA,CAAA;AA2FA,MAAA,CAAA,CAAA,IAAA,CAAA,IAAA;AACA,MAAA,CAAA,CAAA,EAAA,CAAA,WAAA,EAAA,YAAA;AACA;AACA,YAAA,CAAA,EAAA,CAAA,KAAA,CAAA,OAAA,EAAA;AACA;AACA;;AACA,YAAA,gBAAA,GACA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,KAAA,IAAA;AAAA,SAAA,EAAA,MAAA,KAAA,CADA;;AAEA,YAAA,gBAAA,EAAA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA;AACA,SAFA,MAEA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,IAAA,CAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA;AACA,OAZA;;AAaA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,MAAA,KAAA,MAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA;AACA,YAAA,SAAA,GAAA,CAAA;;AACA,YAAA,aAAA,IAAA,CAAA,OAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,SAAA,CAAA,EAAA;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AAEA,mBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,IADA,GACA,EADA;AAEA,WAPA,EAQA,IARA,CAQA,OARA,EAQA,iDARA;AASA,UAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EACA,IADA,CACA,IADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,IAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,KAHA,EAIA,IAJA,CAIA,OAJA,EAIA,iDAJA;AAMA;;AAEA,QAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,oBADA,EAEA,IAFA,CAEA,IAFA,EAEA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAHA,EAIA,IAJA,CAIA,GAJA,EAIA,IAJA,EAKA,IALA,CAKA,OALA,EAKA,EALA,EAMA,IANA,CAMA,QANA,EAMA,EANA,EAOA,IAPA,CAOA,OAPA,EAOA,YAAA;AACA,cAAA,MAAA,GAAA,aAAA,CAAA,iBAAA,EAAA;;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,MAAA,MAAA,EAAA;AACA,mBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;;AACA,iBACA,iCACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,SAvBA,EAwBA,EAxBA,CAwBA,OAxBA,EAwBA,YAAA;AACA,UAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,mBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,WARA;AASA,UAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA;AACA,UAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA;AACA,UAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,UAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,SAtCA;;AAuCA,YAAA,cAAA,IAAA,CAAA,OAAA,CAAA,EAAA;AACA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,UAAA,KAAA,GAAA,EAAA;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,MALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,UAAA,CAAA;AAAA,aATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,cAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,uBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,eARA;AASA,cAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA;AACA,cAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA;AACA,cAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,cAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,aAxBA;AAyBA,WA1BA,MA2BA;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAAA,GAAA,GAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,MALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,UAAA,CAAA;AAAA,aATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,cAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,uBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,eARA;AASA,cAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA;AACA,cAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA,CAAA;AACA,cAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,cAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,aAxBA;AAyBA;AAEA;;AACA,QAAA,IAAA,CAAA,KAAA,GAAA,QAAA,GAAA,EAAA,GAAA,CAAA;AACA,QAAA,IAAA,CAAA,MAAA,GAAA,SAAA,GAAA,EAAA,GAAA,CAAA;AACA,OAzHA,MA0HA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,MAAA,KAAA,IAAA,EAAA;AAAA;AACA,cAAA,QAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,CAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,CAAA;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,gBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AAEA,mBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA;AAEA,WAbA,EAcA,IAdA,CAcA,OAdA,EAcA,iDAdA;AAgBA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,IADA,EAEA,IAFA,CAEA,QAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,gBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,uCAAA,EAAA,eAAA,EAAA;AACA,WAZA,EAaA,IAbA,CAaA,SAbA,EAaA,GAbA,EAcA,EAdA,CAcA,OAdA,EAcA,YAAA;AACA,YAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,YAAA,EAAA,CAAA,SAAA,CAAA,WAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,6CADA;AAEA,WAlBA;AAmBA,UAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,UAAA,QAAA,IAAA,EAAA;;AAxCA,qCA0CA,CA1CA;AA2CA,gBAAA,CAAA,IAAA,CAAA,EAAA;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,uBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA;AAEA,eANA,EAOA,IAPA,CAOA,OAPA,EAOA,iDAPA;AAQA,cAAA,IAAA,IAAA,EAAA;AACA,cAAA,QAAA,IAAA,CAAA;AACA;;AACA,gBAAA,aAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,SAAA,CAAA,EAAA;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AAEA,uBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,IADA,GACA,EADA;AAEA,eAPA,EAQA,IARA,CAQA,OARA,EAQA,iDARA;AASA,cAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EACA,IADA,CACA,IADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,IAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,GAHA,EAIA,IAJA,CAIA,OAJA,EAIA,iDAJA;AAMA,cAAA,IAAA,IAAA,CAAA;AACA,cAAA,QAAA,IAAA,CAAA;AACA;;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,oBADA,EAEA,IAFA,CAEA,IAFA,EAEA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,GAJA,EAIA,IAAA,GAAA,CAJA,EAKA,IALA,CAKA,OALA,EAKA,EALA,EAMA,IANA,CAMA,QANA,EAMA,EANA,EAOA,IAPA,CAOA,OAPA,EAOA,YAAA;AACA,kBAAA,MAAA,GAAA,aAAA,CAAA,iBAAA,EAAA;;AACA,kBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,oBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,sBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,MAAA,MAAA,EAAA;AACA,2BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;;AACA,yBACA,iCACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAOA;AACA;;AACA,kBAAA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,GAAA,KAAA,MAAA,EAAA;AACA,uBAAA,6BACA,mBADA,GAEA,wBAFA,GAGA,eAHA;AAIA;;AACA,qBACA,sBACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,aAxCA,EAyCA,EAzCA,CAyCA,OAzCA,EAyCA,YAAA;AACA,cAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,oBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,sBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,2BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;AACA;;AACA,uBACA,4BACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,eAlBA;AAmBA,cAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,cAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,cAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,aAhEA;;AAiEA,gBAAA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,iBALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,uBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,UAAA,CAAA;AAAA,eATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,gBAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,sBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,wBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,6BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;AACA;;AACA,yBACA,4BACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,iBAlBA;AAmBA,gBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,gBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,gBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,eAjCA;AAkCA;;AACA,YAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,YAAA,QAAA,IAAA,EAAA;;AACA,gBAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA;AAAA,uBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,IAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,eALA;AAMA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,cAAA,QAAA,IAAA,EAAA;AACA;AA1LA;;AA0CA,eAAA,IAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,CAAA,EAAA;AAAA,kBAAA,CAAA;AAiJA;;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,gBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AAEA,mBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA;AAEA,WAbA,EAcA,IAdA,CAcA,OAdA,EAcA,iDAdA;AAgBA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,IADA,EAEA,IAFA,CAEA,QAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,gBAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,uCAAA,EAAA,eAAA,EAAA;AACA,WAZA,EAaA,IAbA,CAaA,SAbA,EAaA,GAbA,EAcA,EAdA,CAcA,OAdA,EAcA,YAAA;AACA,YAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,YAAA,EAAA,CAAA,SAAA,CAAA,WAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,6CADA;AAEA,WAlBA;AAoBA,UAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,UAAA,QAAA,IAAA,EAAA;;AAEA,cAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA;AAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,IAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,aALA;AAMA,YAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,YAAA,QAAA,IAAA,EAAA;AACA;;AAEA,UAAA,IAAA,CAAA,KAAA,GAAA,KAAA,QAAA;AA9OA;AAgPA,OAhPA,MAiPA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,MAAA,KAAA,QAAA,EAAA;AAAA;AACA,cAAA,QAAA,GAAA,CAAA;AACA,cAAA,SAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA;AAEA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,WAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,gBAAA,EAAA,GAAA,IAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AAEA,mBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA,GAEA,KAFA,GAEA,EAFA,GAEA,GAFA,GAEA,EAFA;AAGA,WAbA,EAcA,IAdA,CAcA,OAdA,EAcA,iDAdA;AAiBA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,QALA,EAMA,IANA,CAMA,aANA,EAMA,MANA,EAOA,IAPA,CAOA,MAPA,EAOA,SAPA,EAQA,IARA,CAQA;AAAA,mBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,WARA;;AAUA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,KAAA,GAAA,EAAA;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,EADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,QALA,EAMA,IANA,CAMA,aANA,EAMA,MANA,EAOA,IAPA,CAOA,MAPA,EAOA,SAPA,EAQA,IARA,CAQA;AAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,aARA;AASA,WAVA,MAWA;AACA,YAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,EADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,QALA,EAMA,IANA,CAMA,aANA,EAMA,MANA,EAOA,IAPA,CAOA,MAPA,EAOA,SAPA,EAQA,IARA,CAQA;AAAA,qBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,aARA;AASA;;AAIA,UAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,IADA,EAEA,IAFA,CAEA,QAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,YAAA;AACA,gBAAA,CAAA,GAAA,IAAA;AACA,gBAAA,CAAA,GAAA,IAAA;AACA,uCAAA,CAAA,eAAA,CAAA;AACA,WAPA,EAQA,IARA,CAQA,SARA,EAQA,GARA,EASA,EATA,CASA,OATA,EASA,YAAA;AACA,YAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,YAAA,EAAA,CAAA,SAAA,CAAA,YAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,6CADA;AAEA,WAbA;AAeA,UAAA,IAAA,IAAA,EAAA;AACA,UAAA,SAAA,IAAA,EAAA;;AA1EA,uCA8EA,CA9EA;AA+EA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,MAAA,KAAA,MAAA,EAAA;AACA,kBAAA,aAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,SAAA,CAAA,EAAA;AACA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AAEA,yBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,IADA,GACA,EADA;AAEA,iBAPA,EAQA,IARA,CAQA,OARA,EAQA,iDARA;AASA,gBAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EACA,IADA,CACA,IADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,IAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,KAHA,EAIA,IAJA,CAIA,OAJA,EAIA,iDAJA;AAMA;;AAEA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,oBADA,EAEA,IAFA,CAEA,IAFA,EAEA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAHA,EAIA,IAJA,CAIA,GAJA,EAIA,IAJA,EAKA,IALA,CAKA,OALA,EAKA,EALA,EAMA,IANA,CAMA,QANA,EAMA,EANA,EAOA,IAPA,CAOA,OAPA,EAOA,YAAA;AACA,oBAAA,MAAA,GAAA,aAAA,CAAA,iBAAA,EAAA;;AACA,oBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,MAAA,MAAA,EAAA;AACA,yBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;;AACA,uBACA,iCACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;;AAMA,oBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,sBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,wBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,MAAA,MAAA,EAAA;AACA,6BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;;AACA,2BACA,iCACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAOA;AACA;;AACA,oBAAA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,GAAA,KAAA,MAAA,EAAA;AACA,yBAAA,6BACA,mBADA,GAEA,wBAFA,GAGA,eAHA;AAIA;;AACA,uBACA,sBACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,eAtDA,EAuDA,EAvDA,CAuDA,OAvDA,EAuDA,YAAA;AACA,gBAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,yBACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;;AAMA,sBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,wBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,6BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;AACA;;AACA,yBACA,4BACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,iBAxBA;AAyBA,gBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,gBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,gBAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,gBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,eArFA;;AAsFA,kBAAA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,oBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,UAAA,KAAA,GAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,MALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,UAAA,CAAA;AAAA,mBATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,oBAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,6BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,qBARA;AASA,oBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,oBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,oBAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,oBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,mBAxBA;AAyBA,iBA1BA,MA2BA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAAA,GAAA,GAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,MALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,UAAA,CAAA;AAAA,mBATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,oBAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,6BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA,qBARA;AASA,oBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,oBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,oBAAA,aAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,oBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,mBAxBA;AAyBA;AACA;;AAGA,kBAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,YAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,CAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,CAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,sBAAA,CAAA,GAAA,CAAA;AACA,kBAAA,QAAA,GAAA,IAAA,EAAA;AACA,yBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA,IAAA,GAAA,KAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA;AACA,iBAVA,EAWA,IAXA,CAWA,OAXA,EAWA,mDAXA;AAaA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,YAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,CAAA;AACA,sBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,sBAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AACA,sBAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AAEA,yBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA;AAEA,iBAVA,EAWA,IAXA,CAWA,OAXA,EAWA,mDAXA;AAaA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,EAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,MALA,EAMA,IANA,CAMA,MANA,EAMA,SANA,EAOA,IAPA,CAOA;AAAA,yBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,iBAPA;;AASA,oBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,GAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,EAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,MALA,EAMA,IANA,CAMA,MANA,EAMA,SANA,EAOA,IAPA,CAOA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,mBAPA;AAQA,iBATA,MAUA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,EAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA,aALA,EAKA,MALA,EAMA,IANA,CAMA,MANA,EAMA,SANA,EAOA,IAPA,CAOA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,mBAPA;AAQA;AACA;;AAEA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA;AACA,cAAA,SAAA,GAAA,SAAA,GAAA,EAAA,GAAA,EAAA;AAGA,aAjOA,MAkOA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,MAAA,KAAA,IAAA,EAAA;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,oBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,oBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AAEA,uBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA;AAEA,eAbA,EAcA,IAdA,CAcA,OAdA,EAcA,iDAdA;AAgBA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,IADA,EAEA,IAFA,CAEA,QAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,oBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA;AACA,oBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,2CAAA,EAAA,eAAA,EAAA;AACA,eAZA,EAaA,IAbA,CAaA,SAbA,EAaA,GAbA,EAcA,EAdA,CAcA,OAdA,EAcA,YAAA;AACA,gBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,gBAAA,EAAA,CAAA,SAAA,CAAA,WAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,6CADA;AAEA,eAlBA;AAoBA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,cAAA,QAAA,IAAA,EAAA;;AAtCA,2CAwCA,CAxCA;AAyCA,oBAAA,CAAA,IAAA,CAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,wBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,wBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,2BAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA;AAEA,mBANA,EAOA,IAPA,CAOA,OAPA,EAOA,iDAPA;AAQA,kBAAA,IAAA,IAAA,EAAA;AACA,kBAAA,QAAA,IAAA,CAAA;AACA;;AAEA,oBAAA,aAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,SAAA,CAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,YAAA;AACA,wBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AACA,wBAAA,EAAA,GAAA,IAAA,GAAA,CAAA;AAEA,2BAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,IADA,GACA,EADA;AAEA,mBAPA,EAQA,IARA,CAQA,OARA,EAQA,iDARA;AASA,kBAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EACA,IADA,CACA,IADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,IAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,GAHA,EAIA,IAJA,CAIA,OAJA,EAIA,iDAJA;AAMA,kBAAA,IAAA,IAAA,CAAA;AACA,kBAAA,QAAA,IAAA,CAAA;AACA;;AAEA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,oBADA,EAEA,IAFA,CAEA,IAFA,EAEA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,GAJA,EAIA,IAAA,GAAA,CAJA,EAKA,IALA,CAKA,OALA,EAKA,EALA,EAMA,IANA,CAMA,QANA,EAMA,EANA,EAOA,IAPA,CAOA,OAPA,EAOA,YAAA;AACA,sBAAA,MAAA,GAAA,aAAA,CAAA,iBAAA,EAAA;;AACA,sBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,wBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,0BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,KAAA,MAAA,MAAA,EAAA;AACA,+BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;;AACA,6BACA,iCACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAOA;AACA;;AACA,sBAAA,SAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,GAAA,KAAA,MAAA,EAAA;AACA,2BAAA,6BACA,mBADA,GAEA,wBAFA,GAGA,eAHA;AAIA;;AACA,yBACA,sBACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,iBAxCA,EAyCA,EAzCA,CAyCA,OAzCA,EAyCA,YAAA;AACA,kBAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,wBAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,0BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,+BACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;AACA;;AACA,2BACA,4BACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,mBAlBA;AAmBA,kBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,kBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA;AACA,kBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA;AACA,iBAhEA;;AAiEA,oBAAA,cAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,OADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,EAFA,EAGA,IAHA,CAGA,GAHA,EAGA,IAAA,GAAA,EAHA,EAIA,IAJA,CAIA,MAJA,EAIA,OAJA,EAKA,IALA,CAKA,WALA,EAKA,iBALA,EAMA,IANA,CAMA,aANA,EAMA,QANA,EAOA,IAPA,CAOA,oBAPA,EAOA,QAPA,EAQA,IARA,CAQA,OARA,EAQA,oBARA,EASA,IATA,CASA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,UAAA,CAAA;AAAA,mBATA,EAUA,EAVA,CAUA,OAVA,EAUA,YAAA;AACA,oBAAA,EAAA,CAAA,MAAA,CAAA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,YAAA;AACA,0BAAA,gBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA,EAAA;AACA,4BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA;AACA,iCACA,4BACA,QADA,GACA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,CADA,GACA,IADA,GAEA,yBAFA,GAGA,kBAJA;AAMA;AACA;;AACA,6BACA,4BACA,mBADA,GAEA,wBAFA,GAGA,eAJA;AAMA,qBAlBA;AAmBA,oBAAA,IAAA,CAAA,sBAAA,CAAA,KAAA;AACA,oBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,CAAA;AACA,oBAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA,EAAA,CAAA;AACA,mBAjCA;AAkCA;;AACA,gBAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,QAAA,IAAA,EAAA;;AACA,oBAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,kBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA;AAAA,2BAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,IAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,mBALA;AAMA,kBAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,kBAAA,QAAA,IAAA,EAAA;AACA;AA1LA;;AAwCA,mBAAA,IAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,aAAA,CAAA,EAAA;AAAA,uBAAA,CAAA;AAmJA;;AACA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,UAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,oBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,oBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AAEA,uBAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GACA,KADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA,GACA,GADA,GACA,EADA;AAEA,eAbA,EAcA,IAdA,CAcA,OAdA,EAcA,iDAdA;AAgBA,cAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,IADA,EAEA,IAFA,CAEA,QAFA,EAEA,IAFA,EAGA,IAHA,CAGA,WAHA,EAGA,YAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,GAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,EAAA;AACA,oBAAA,EAAA,GAAA,IAAA,GAAA,IAAA;AAEA,oBAAA,EAAA,GAAA,EAAA,GAAA,CAAA;AACA,oBAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACA,2CAAA,EAAA,eAAA,EAAA;AACA,eAZA,EAaA,IAbA,CAaA,SAbA,EAaA,GAbA,EAcA,EAdA,CAcA,OAdA,EAcA,YAAA;AACA,gBAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AACA,gBAAA,EAAA,CAAA,SAAA,CAAA,WAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EACA,IADA,CACA,OADA,EACA,6CADA;AAEA,eAlBA;AAoBA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,cAAA,QAAA,IAAA,EAAA;;AAEA,kBAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,gBAAA,CAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,GAAA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,IAAA,GAAA,CAFA,EAGA,IAHA,CAGA,WAHA,EAGA,MAHA,EAIA,IAJA,CAIA,oBAJA,EAIA,SAJA,EAKA,IALA,CAKA;AAAA,yBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,IAAA,IAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AAAA,iBALA;AAMA,gBAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,gBAAA,QAAA,IAAA,EAAA;AACA;;AAEA,cAAA,IAAA,CAAA,KAAA,GAAA,IAAA,QAAA;AAEA;AAjiBA;;AA8EA,eAAA,IAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,aAAA,CAAA,EAAA;AAAA,mBAAA,CAAA;AAqdA;;AAEA,UAAA,IAAA,CAAA,KAAA,GAAA,QAAA,GAAA,EAAA,GAAA,CAAA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,SAAA,GAAA,CAAA;AAtiBA;AA0iBA,OArgCA,CAwgCA;;;AACA,UAAA,UAAA,GAAA,EAAA;AACA,UAAA,iBAAA,GAAA,KAAA,oBAAA,CAAA,IAAA,CAAA;;AA1gCA,mCA2gCA,QA3gCA;AA4gCA,YAAA,eAAA,GAAA,iBAAA,CAAA,QAAA,CAAA;AACA,YAAA,SAAA,GAAA,CAAA,CACA,MADA,CACA,QADA,EAEA,IAFA,CAEA,IAFA,EAEA,eAAA,CAAA,CAFA,EAGA,IAHA,CAGA,IAHA,EAGA,eAAA,CAAA,CAHA,EAIA,IAJA,CAIA,GAJA,EAIA,CAJA,EAKA,IALA,CAKA,OALA,EAKA,WALA,CAAA;AAOA,QAAA,SAAA,CACA,EADA,CACA,WADA,EACA,YAAA;AACA,UAAA,EAAA,CAAA,KAAA,CAAA,eAAA;;AACA,cAAA,IAAA,CAAA,IAAA,KAAA,KAAA,IAAA,IAAA,CAAA,QAAA,EAAA;AACA;AACA;;AACA,UAAA,IAAA,CAAA,cAAA,CAAA,MAAA,GAAA,IAAA;AACA,UAAA,IAAA,CAAA,cAAA,CAAA,cAAA,GAAA,QAAA;AACA,SARA,EASA,EATA,CASA,SATA,EASA,YAAA;AACA,UAAA,EAAA,CAAA,KAAA,CAAA,eAAA;;AACA,cAAA,IAAA,CAAA,cAAA,CAAA,MAAA,EAAA;AACA,gBAAA,IAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA,EAAA;AACA;AACA,kBAAA,MAAA,GAAA,CAAA,IAAA,IAAA,EAAA;AACA,kBAAA,IAAA,GAAA;AACA,gBAAA,MAAA,EAAA;AACA,kBAAA,EAAA,EAAA,IAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EADA;AAEA,kBAAA,QAAA,EAAA,IAAA,CAAA,cAAA,CAAA;AAFA,iBADA;AAKA,gBAAA,WAAA,EAAA;AACA,kBAAA,EAAA,EAAA,IAAA,CAAA,EADA;AAEA,kBAAA,QAAA,EAAA;AAFA,iBALA;AASA,gBAAA,EAAA,EAAA,MATA;AAUA,gBAAA,IAAA,EAAA,MAVA;AAWA,gBAAA,IAAA,EAAA;AAXA,eAAA;AAaA,kBAAA,SAAA,GAAA,IAAA,CAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,uBAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA;AAAA,eAAA,EAAA,CAAA,CAAA;AACA,kBAAA,cAAA,GAAA,IAAA,CAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,uBAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,aAAA,CAAA,CAAA,IAAA,CAAA;AAAA,eAAA,EAAA,CAAA,CAAA;AACA,cAAA,aAAA,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,EAAA,cAAA,CAAA,YAAA,CAAA;AACA,cAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,IAAA;AAEA;;AACA,YAAA,IAAA,CAAA,cAAA,CAAA,MAAA,GAAA,IAAA;AACA,YAAA,IAAA,CAAA,cAAA,CAAA,cAAA,GAAA,IAAA;AACA;AACA,SArCA,EAsCA,EAtCA,CAsCA,WAtCA,EAsCA,YAAA;AACA,UAAA,SAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA;AACA,SAxCA,EAyCA,EAzCA,CAyCA,UAzCA,EAyCA,YAAA;AACA,UAAA,SAAA,CAAA,OAAA,CAAA,QAAA,EAAA,KAAA;AACA,SA3CA;AA4CA,QAAA,UAAA,CAAA,IAAA,CAAA,SAAA;AAhkCA;;AA2gCA,WAAA,IAAA,QAAA,IAAA,iBAAA,EAAA;AAAA,eAAA,QAAA;AAsDA;;AACA,MAAA,CAAA,CAAA,EAAA,CAAA,WAAA,EAAA,YAAA;AACA,QAAA,UAAA,CAAA,OAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,CAAA;AAAA,SAAA;AACA,OAFA,EAEA,EAFA,CAEA,UAFA,EAEA,YAAA;AACA,QAAA,UAAA,CAAA,OAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA,KAAA,CAAA;AAAA,SAAA;AACA,OAJA;AAKA,KAr6CA;AAs6CA,IAAA,mBAt6CA,iCAs6CA;AACA,UAAA,MAAA,GAAA,KAAA,YAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA;AACA,UAAA,CAAA,EAAA,IAAA,CAAA,CADA;AAEA,UAAA,CAAA,EAAA,IAAA,CAAA;AAFA,SAAA;AAAA,OAAA,CAAA;AAIA,MAAA,MAAA,CAAA,IAAA,OAAA,MAAA,qBACA,KAAA,YAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA;AACA,UAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,KADA;AAEA,UAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA;AAFA,SAAA;AAAA,OAAA,CADA,EAAA;AAMA,aAAA,eAAA,CAAA,MAAA,CAAA;AACA,KAl7CA;AAm7CA,IAAA,MAn7CA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAo7CA,KAAA,QAp7CA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,sBAu7CA,KAAA,kBAAA,CAAA,MAAA,GAAA,CAv7CA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAw7CA,kCAAA,KAAA,kBAAA,2HAAA;AAAA,kBAAA,IAAA;AACA,uBAAA,gBAAA,CAAA,IAAA;AACA;;AA17CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA27CA,qBAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,kBAAA,CAAA,MAAA;;AA37CA;AAAA,sBA67CA,KAAA,YAAA,CAAA,MAAA,GAAA,CA77CA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA87CA,kCAAA,KAAA,YAAA,2HAAA;AAAA,kBAAA,IAAA;AACA,uBAAA,UAAA,CAAA,IAAA;AACA;;AAh8CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAi8CA,qBAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,YAAA,CAAA,MAAA;;AAj8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAo8CA,IAAA,UAp8CA,sBAo8CA,IAp8CA,EAo8CA;AACA,UAAA,WAAA,GAAA,KAAA,mBAAA,CAAA,MAAA,CACA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,MAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA,IAAA,IAAA,CAAA,WAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AAAA,OADA,CAAA;AADA;AAAA;AAAA;;AAAA;AAIA,8BAAA,WAAA,mIAAA;AAAA,cAAA,UAAA;AACA,eAAA,mBAAA,CAAA,MAAA,CACA,KAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,CADA,EAEA,CAFA;AAIA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,MAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAA,YAAA,CAAA;AACA,WAAA,aAAA,CAAA,MAAA,CAAA,KAAA,aAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA,KAh9CA;AAi9CA,IAAA,gBAj9CA,4BAi9CA,IAj9CA,EAi9CA;AACA,UAAA,KAAA,GAAA,KAAA,mBAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,UAAA,SAAA,GAAA,KAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AACA,UAAA,cAAA,GAAA,KAAA,aAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,aAAA,CAAA,CAAA,IAAA,CAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AACA,MAAA,aAAA,CAAA,WAAA,CAAA,SAAA,CAAA,YAAA,CAAA,EAAA,cAAA,CAAA,YAAA,CAAA;AACA,WAAA,mBAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAv9CA;AAw9CA,IAAA,eAx9CA,2BAw9CA,CAx9CA,EAw9CA,CAx9CA,EAw9CA;AACA,UAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,KAAA,QAAA,EAAA;AAAA;AAAA;AAAA;;AAAA;AACA,gCAAA,KAAA,YAAA,mIAAA;AAAA,gBAAA,IAAA;AACA,YAAA,IAAA,CAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,CAAA,CAAA,IAAA,CAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA,KA/9CA;AAg+CA,IAAA,IAh+CA,kBAg+CA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,MAAA,IAAA,CAAA,aAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,aAAA,CAAA,MAAA;AACA,MAAA,IAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,mBAAA,CAAA,MAAA;AACA,MAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,OAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAA,CAAA;AACA,QAAA,OAAA,CAAA,KAAA,GAAA,OAAA,CAAA,KAAA,IAAA,GAAA;AACA,QAAA,OAAA,CAAA,MAAA,GAAA,OAAA,CAAA,MAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,OAAA;AACA,OALA;AAMA,MAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,UAAA,UAAA,EAAA;AACA,QAAA,IAAA,CAAA,mBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CAAA;AACA,OAFA;AAGA;AA7+CA,KA8+CA,YAAA,CAAA,CACA,oBADA,CAAA,CA9+CA,CApEA;AAsjDA,EAAA,OAtjDA,qBAsjDA;AACA,QAAA,IAAA,GAAA,IAAA;AACA,IAAA,IAAA,CAAA,IAAA;;AACA,IAAA,QAAA,CAAA,SAAA,GAAA,UAAA,KAAA,EAAA;AACA,cAAA,KAAA,CAAA,OAAA;AACA,aAAA,EAAA;AACA,UAAA,IAAA,CAAA,eAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA;;AACA,aAAA,EAAA;AACA,UAAA,IAAA,CAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA;;AACA,aAAA,EAAA;AACA,UAAA,IAAA,CAAA,eAAA,CAAA,EAAA,EAAA,CAAA;AACA;;AACA,aAAA,EAAA;AACA,UAAA,IAAA,CAAA,eAAA,CAAA,CAAA,EAAA,EAAA;AACA;;AACA,aAAA,EAAA;AACA,UAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,UAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,kBAAA,CAAA,MAAA;AACA;;AACA,aAAA,EAAA;AACA,cAAA,QAAA,CAAA,aAAA,KAAA,QAAA,CAAA,cAAA,CAAA,OAAA,CAAA,EAAA;AAAA;;AACA,YAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,YAAA,CAAA,MAAA;AACA,YAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,kBAAA,CAAA,MAAA;;AACA,kCAAA,IAAA,CAAA,YAAA,EAAA,IAAA,8CAAA,IAAA,CAAA,aAAA;;AACA,qCAAA,IAAA,CAAA,kBAAA,EAAA,IAAA,iDAAA,IAAA,CAAA,mBAAA;;AACA,YAAA,KAAA,CAAA,cAAA;AACA;;AACA;AACA;;AACA,aAAA,CAAA,CA3BA,CA4BA;AACA;AACA;;AACA;AACA;AAhCA;AAkCA,KAnCA;AAoCA,GA7lDA;AA8lDA,EAAA,OA9lDA,qBA8lDA,CAAA;AA9lDA,sDA+lDA;AACA;AACA;AACA;AACA,EAAA,gBAJA,8BAIA;AAAA;AAAA;AAAA;;AAAA;AACA,4BAAA,KAAA,aAAA,mIAAA;AAAA,YAAA,IAAA;AACA,YAAA,iBAAA,GAAA,KAAA,oBAAA,CAAA,IAAA,CAAA;;AACA,aAAA,IAAA,IAAA,IAAA,iBAAA,EAAA;AACA,cAAA,KAAA,GAAA,iBAAA,CAAA,IAAA,CAAA;;AACA,cACA,IAAA,CAAA,KAAA,CACA,KAAA,CAAA,CAAA,GAAA,KAAA,mBAAA,CAAA,CADA,EAEA,KAAA,CAAA,CAAA,GAAA,KAAA,mBAAA,CAAA,CAFA,IAGA,EAJA,EAKA;AACA,mBAAA;AAAA,cAAA,QAAA,EAAA,IAAA;AAAA,cAAA,IAAA,EAAA;AAAA,aAAA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,WAAA,IAAA;AACA,GApBA;AAqBA,EAAA,iBArBA,+BAqBA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,YACA,IADA;AAEA,YAAA,QAAA,GAAA,qBAAA,CACA,IAAA,CAAA,OADA,EAEA,IAAA,CAAA,OAFA,EAGA,IAAA,CAAA,YAHA,EAIA,IAAA,CAAA,YAJA,EAKA,KAAA,CAAA,mBAAA,CAAA,CALA,EAMA,KAAA,CAAA,mBAAA,CAAA,CANA,CAAA;;AAQA,YACA,QAAA,GAAA,CAAA,IACA,OAAA,CACA,IAAA,CAAA,OAAA,GAAA,CADA,EAEA,IAAA,CAAA,YAAA,GAAA,CAFA,EAGA,KAAA,CAAA,mBAAA,CAAA,CAHA,CADA,IAMA,OAAA,CACA,IAAA,CAAA,OAAA,GAAA,CADA,EAEA,IAAA,CAAA,YAAA,GAAA,CAFA,EAGA,KAAA,CAAA,mBAAA,CAAA,CAHA,CAPA,EAYA;AACA,cAAA,WAAA,GAAA,KAAA,CAAA,mBAAA,CAAA,MAAA,CACA,UAAA,IAAA;AAAA,mBAAA,IAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AAAA,WADA,CAAA;;AAGA;AAAA,eAAA,WAAA,CAAA,MAAA,GAAA,CAAA,GAAA,WAAA,CAAA,CAAA,CAAA,GAAA;AAAA;AACA;AA3BA;;AACA,6BAAA,KAAA,KAAA,wIAAA;AAAA;;AAAA;AA2BA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,WAAA,IAAA;AACA,GAnDA;AAoDA,EAAA,MApDA,oBAoDA;AACA,QAAA,KAAA,cAAA,CAAA,MAAA,IAAA,KAAA,gBAAA,EAAA;AACA,aAAA,WAAA;AACA;;AACA,QAAA,KAAA,iBAAA,IAAA,IAAA,EAAA;AACA,aAAA,SAAA;AACA;;AACA,WAAA,IAAA;AACA;AA5DA,CA/lDA,mDA6pDA;AAEA,EAAA,aAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,WAAA;AACA,WAAA,iBAAA;AACA;AANA,GAFA;AAUA,EAAA,mBAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,iBAAA;AACA;AALA,GAVA;AAiBA,EAAA,aAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,eAAA;AACA;AALA,GAjBA;AAwBA,EAAA,YAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,WAAA;AACA;AALA,GAxBA;AA+BA,EAAA,kBAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,iBAAA;AACA;AALA,GA/BA;AAsCA,EAAA,mBAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,UAAA,KAAA,aAAA,EAAA;AACA,aAAA,eAAA;AACA;AACA;AAPA,GAtCA;AA+CA,EAAA,cAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,iBAAA;AACA;AALA,GA/CA;AAsDA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,IAAA;AACA;AALA,GAtDA;AA6DA,EAAA,WAAA,EAAA;AACA,IAAA,SAAA,EAAA,IADA;AAEA,IAAA,IAAA,EAAA,IAFA;AAGA,IAAA,OAHA,qBAGA;AACA,WAAA,IAAA;AACA;AALA;AA7DA,CA7pDA","sourcesContent":["<template>\n  <div\n    id=\"chart\"\n    tabindex=\"0\"\n    :style=\"{ cursor: cursor }\"\n    @mousemove=\"handleChartMouseMove\"\n    @mouseup=\"handleChartMouseUp\"\n    @mousewheel=\"handleChartMouseWheel\"\n    @mousedown=\"handleChartMouseDown($event)\">\n    <svg id=\"svg\" ref=\"flowChartCanvas\">\n      <rect class=\"selection\" height=\"0\" width=\"0\"></rect>\n    </svg>\n    <el-button class=\"query-btn\" size=\"mini\" @click=\"query\">Query</el-button>\n  </div>\n\n</template>\n<style lang=\"less\" src=\"./index.less\"></style>\n<script>\nimport { line2, lineTo } from \"../../utils/svg\";\nimport { mapState, mapMutations } from 'vuex'\nimport * as d3 from \"d3\";\n\nimport {\n  roundTo20,\n  between,\n  distanceOfPointToLine, \n  getEdgeOfPoints,\n  pointRectangleIntersection,\n} from \"../../utils/math\";\nimport render from \"./render\";\n\nexport default {\n  name: \"flowchart\",\n  props: {\n    nodes: {\n      type: Array,\n      default: () => [],\n    },\n    connections: {\n      type: Array,\n      default: () => [],\n    },\n    width: {\n      type: [String, Number],\n      default: 800,\n    },\n    height: {\n      type: [String, Number],\n      default: 600,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    excludeShownAttrArray: {\n      type: Array,\n      default: [],\n    }\n  },\n  data() {\n    return {\n      internalNodes: [],\n      internalConnections: [],\n      connectingInfo: {\n        source: null,\n        sourcePosition: null,\n      },\n      selectionInfo: null,\n      currentNodes: [],\n      currentConnections: [],\n      /**\n       * Mouse position(relative to chart div)\n       */\n      cursorToChartOffset: { x: 0, y: 0 },\n      clickedOnce: false,\n      pathClickedOnce: false,\n      /**\n       * lines of all internalConnections\n       */\n      lines: [],\n      canvasId: \"svg\",\n      regexContent: \"\",\n      regexContentFlag: false,\n    };\n  },\n  watch: {\n    conditionState: function(){\n      console.log(\"conditionState\")\n    }\n  },\n  computed: {\n    ...mapState([\n      'regexContentState',\n      'curRegexIndex',\n      'selectedDomKey',\n      'selectedDom',\n      'visPanelState'\n    ]),\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_VISVIEW',\n      'UPDATE_CURRENT_REGEX',\n      'UPDATE_CONNECTION',\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_CONDITION_STATE',\n      'GET_SELECTEDKEY',\n      'DATA_QUERY_REGEX',\n      'UPDATE_NODE_DEFINITION_STATE'\n    ]),\n\n    query(){\n      var edgeInfo = sysDatasetObj.getEdgeInfo()\n      console.log(\"edgeInfo: \", edgeInfo)\n      var rootNode = {\n        'type': 'node',\n        'repeat': [1 ,1],\n        'data': {\n\n        },\n        'children':[\n\n        ]\n      }\n      for(let i=0; i<this.internalNodes.length; i++){\n        this.internalNodes[i]['regex']['children'] = []\n      }\n      for(let i=0; i<edgeInfo.length; i++){\n        var curI = null\n        var curJ = null\n        for(let i1=0; i1<this.internalNodes.length; i1++){\n          if(edgeInfo[i][0] == this.internalNodes[i1]['regexIndex']){\n            curI = this.internalNodes[i1]['regex']  \n          }\n          if(edgeInfo[i][1] == this.internalNodes[i1]['regexIndex']){\n            curJ = this.internalNodes[i1]['regex']  \n          }\n        }\n        curI['children'].push(curJ)\n      }\n      if(edgeInfo.length == 0 && this.internalNodes.length == 1){\n        rootNode = this.internalNodes[0]['regex']\n      }\n      for(let i=0; i<edgeInfo.length; i++){\n        var flag = 1\n        for(let j=0; j<edgeInfo.length; j++){\n          if(edgeInfo[i][0] == edgeInfo[j][1]){\n            flag = -1\n            break\n          }\n        }\n        if(flag != -1){\n          for(let k=0; k<this.internalNodes.length; k++){\n            if(this.internalNodes[k]['regexIndex'] == edgeInfo[i][0]){\n              rootNode = this.internalNodes[k]['regex']\n              break\n            }\n          }\n          break\n        }\n      }\n      sysDatasetObj.updateRegex(rootNode)\n      this.DATA_QUERY_REGEX()\n    },\n    add(node) {\n      if (this.readonly) {\n        return;\n      }\n      this.internalNodes.push(node);\n    },\n    editNode(node) {\n      if (this.readonly) {\n        return;\n      }\n      this.$emit(\"editnode\", node);\n    },\n    handleChartMouseWheel(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      if (event.ctrlKey) {\n        let svg = document.getElementById(\"svg\");\n        let zoom = parseFloat(svg.style.zoom || 1);\n        if (event.deltaY > 0 && zoom === 0.1) {\n          return;\n        }\n        zoom -= event.deltaY / 100 / 10;\n        svg.style.zoom = zoom;\n      }\n    },\n    async handleChartMouseUp() {\n      if (this.connectingInfo.source) {\n        if (this.hoveredConnector) {\n          if (this.connectingInfo.source.id !== this.hoveredConnector.node.id) {\n            // Node can't connect to itself\n            let tempId = +new Date();\n            let conn = {\n              source: {\n                id: this.connectingInfo.source.id,\n                position: this.connectingInfo.sourcePosition,\n              },\n              destination: {\n                id: this.hoveredConnector.node.id,\n                position: this.hoveredConnector.position,\n              },\n              id: tempId,\n              type: \"pass\",\n              name: \"Pass\",\n            };\n            let tmpSource = this.internalNodes.filter((item) => item.id === conn['source']['id'])[0]\n            let tmpDestination = this.internalNodes.filter((item) => item.id === conn['destination']['id'])[0]\n            sysDatasetObj.addEdge(tmpSource['regexIndex'], tmpDestination['regexIndex'])\n            \n            this.internalConnections.push(conn)\n          }\n        }\n        this.connectingInfo.source = null;\n        this.connectingInfo.sourcePosition = null;\n      }\n      if (this.selectionInfo) {\n        this.selectionInfo = null;\n      }\n      this.regexContentFlag = false\n      \n    },\n    async handleChartMouseMove(event) {\n      // calc offset of cursor to chart\n      let svg = document.getElementById(\"svg\");\n      let zoom = svg.style.zoom; // the size ratio of the whole canvas\n      if (zoom.length == 0) {\n        zoom = 1\n      }\n      zoom = parseFloat(zoom)\n      let boundingClientRect = event.currentTarget.getBoundingClientRect();\n      let actualX = event.pageX - boundingClientRect.left - window.scrollX;  \n      actualX = actualX / zoom\n      this.cursorToChartOffset.x = Math.trunc(actualX);\n      let actualY = event.pageY - boundingClientRect.top - window.scrollY;\n      actualY = actualY / zoom\n      this.cursorToChartOffset.y = Math.trunc(actualY);\n      if (this.connectingInfo.source) {\n        await this.renderConnections();\n\n        d3.selectAll(\"#svg .connector\").classed(\"active\", true);\n\n        let sourceOffset = this.getNodeConnectorOffset(\n          this.connectingInfo.source.id,\n          this.connectingInfo.sourcePosition\n        );\n        let destinationPosition = this.hoveredConnector\n          ? this.hoveredConnector.position\n          : null;\n        this.arrowTo(\n          sourceOffset.x,\n          sourceOffset.y,\n          this.cursorToChartOffset.x,\n          this.cursorToChartOffset.y,\n          this.connectingInfo.sourcePosition,\n          false,\n          destinationPosition\n        );\n      }\n    },\n    handleChartMouseDown(event) {\n      if (event.ctrlKey) {\n        return;\n      }\n      sysDatasetObj.updateSelectedDomKey(-1)\n      this.UPDATE_NODE_DEFINITION_STATE()\n      this.selectionInfo = { x: event.offsetX, y: event.offsetY };\n    },\n    getConnectorPosition(node) {\n      //const halfWidth = node.width / 2;\n      const halfWidth = 20 + 5;\n      const halfHeight = node.height / 2;\n      let top = { x: node.x + halfWidth, y: node.y };\n      let left = { x: node.x, y: node.y + halfHeight };\n      let bottom = { x: node.x + halfWidth, y: node.y + node.height };\n      let right = { x: node.x + node.width, y: node.y + halfHeight };\n      return { left, right, top, bottom };\n    },\n    renderSelection() {\n      let that = this;\n      // render selection rectangle\n      if (that.selectionInfo) {\n        that.currentNodes.splice(0, that.currentNodes.length);\n        that.currentConnections.splice(0, that.currentConnections.length);\n        let edge = getEdgeOfPoints([\n          { x: that.selectionInfo.x, y: that.selectionInfo.y },\n          { x: that.cursorToChartOffset.x, y: that.cursorToChartOffset.y },\n        ]);\n        let svg = d3.select(\"#svg\");\n        let rect = svg.select(\".selection\").classed(\"active\", true);\n        rect\n          .attr(\"x\", edge.start.x)\n          .attr(\"y\", edge.start.y)\n          .attr(\"width\", edge.end.x - edge.start.x)\n          .attr(\"height\", edge.end.y - edge.start.y);\n\n        that.internalNodes.forEach((item) => {\n          let points = [\n            { x: item.x, y: item.y },\n            { x: item.x, y: item.y + item.height },\n            { x: item.x + item.width, y: item.y },\n            { x: item.x + item.width, y: item.y + item.height },\n          ];\n          if (\n            points.every((point) => pointRectangleIntersection(point, edge))\n          ) {\n            that.currentNodes.push(item);\n          }\n        });\n        that.lines.forEach((line) => {\n          let points = [\n            { x: line.sourceX, y: line.sourceY },\n            { x: line.destinationX, y: line.destinationY },\n          ];\n          if (\n            points.every((point) => pointRectangleIntersection(point, edge)) &&\n            that.currentConnections.every((item) => item.id !== line.id)\n          ) {\n            let connection = that.internalConnections.filter(\n              (conn) => conn.id === line.id\n            )[0];\n            that.currentConnections.push(connection);\n          }\n        });\n      } else {\n        d3.selectAll(\"#svg > .selection\").classed(\"active\", false);\n      }\n    },\n    renderConnections() {\n      let that = this;\n      return new Promise(function (resolve) {\n        that.$nextTick(function () {\n          d3.selectAll(\"#svg > g.connection\").remove();\n          // render lines\n          that.lines = [];\n          that.internalConnections.forEach((conn) => {\n            let sourcePosition = that.getNodeConnectorOffset(\n              conn.source.id,\n              conn.source.position\n            );\n            let destinationPosition = that.getNodeConnectorOffset(\n              conn.destination.id,\n              conn.destination.position\n            );\n            let colors = {\n              pass: \"#888888\",\n              reject: \"red\",\n            };\n            let connectionSelected = that.currentConnections.filter((item) => item === conn).length > 0\n            if (connectionSelected) {\n              colors = {\n                pass: \"#888888\",\n                reject: \"darkred\",\n              };\n            }\n            let result = that.arrowTo(\n              sourcePosition.x,\n              sourcePosition.y,\n              destinationPosition.x,\n              destinationPosition.y,\n              conn.source.position,\n              conn.destination.position,\n              connectionSelected,\n              colors[conn.type]\n            );\n            for (const path of result.paths) {\n              path.on(\"mousedown\", function () {\n                d3.event.stopPropagation();\n                if (that.pathClickedOnce) {\n                  that.editConnection(conn);\n                } else {\n                  let timer = setTimeout(function () {\n                    that.pathClickedOnce = false;\n                    clearTimeout(timer);\n                  }, 300);\n                  that.pathClickedOnce = true;\n                }\n                that.currentNodes.splice(0, that.currentNodes.length);\n                that.currentConnections.splice(0, that.currentConnections.length);\n                that.currentConnections.push(conn);\n              });\n            }\n            for (const line of result.lines) {\n              that.lines.push({\n                sourceX: line.sourceX,\n                sourceY: line.sourceY,\n                destinationX: line.destinationX,\n                destinationY: line.destinationY,\n                id: conn.id,\n              });\n            }\n          });\n          resolve();\n        });\n      });\n    },\n    renderNodes() {\n      let that = this;\n      return new Promise(function (resolve) {\n        d3.selectAll(\"#svg > g.node\").remove();\n\n        // render nodes\n        that.internalNodes.forEach((node) => {\n          that.renderNode(\n            node,\n            that.currentNodes.filter((item) => item === node).length > 0\n          );\n        });\n\n        resolve();\n      });\n    },\n    getNodeConnectorOffset(nodeId, connectorPosition) {\n      let node = this.internalNodes.filter((item) => item.id === nodeId)[0];\n      return this.getConnectorPosition(node)[connectorPosition];\n    },\n    append(element) {\n      let svg = d3.select(\"#svg\");\n      return svg.insert(element, \".selection\");\n    },\n    guideLineTo(x1, y1, x2, y2) {\n      let g = this.append(\"g\");\n      g.classed(\"guideline\", true);\n      lineTo(g, x1, y1, x2, y2, 1, \"#a3a3a3\", [5, 3]);\n    },\n    arrowTo(x1, y1, x2, y2, startPosition, endPosition, connectionSelected, color) {\n      let g = this.append(\"g\");\n      g.classed(\"connection\", true);\n      if (connectionSelected) {\n        line2(g, x1, y1, x2, y2, startPosition, endPosition, 2.5, color || \"#a3a3a3\", true);\n      } else {\n        line2(g, x1, y1, x2, y2, startPosition, endPosition, 1, color || \"#a3a3a3\", true);\n      } \n      // a 5px cover to make mouse operation conveniently\n      return line2(\n        g,\n        x1,\n        y1,\n        x2,\n        y2,\n        startPosition,\n        endPosition,\n        5,\n        \"transparent\",\n        false\n      );\n    },\n    renderNode(node, isSelected) {\n      let that = this;\n      let g = that.append(\"g\").attr(\"cursor\", \"move\").classed(\"node\", true);\n\n      node.render = render;\n      node.render(g, node, isSelected, this.excludeShownAttrArray);\n\n      let drag = d3\n        .drag()\n        .on(\"start\", function () {\n          // handle mousedown\n          let isNotCurrentNode =\n            that.currentNodes.filter((item) => item === node).length === 0;\n          if (isNotCurrentNode) {\n            that.currentConnections.splice(0, that.currentConnections.length);\n            that.currentNodes.splice(0, that.currentNodes.length);\n            that.currentNodes.push(node);\n          }\n          // the drag event and click event is conflicted, \n          // so handle the drag start function of the selected nodes is equal to the double click event\n          if (that.clickedOnce) {\n            that.currentNodes.splice(0, that.currentNodes.length);\n            that.editNode(node);\n          } else {\n\n            let timer = setTimeout(function () {\n              that.clickedOnce = false;\n              clearTimeout(timer);\n            }, 300);\n            that.clickedOnce = true;\n          }\n        })\n        .on(\"drag\", async function () {\n          if (that.readonly) {\n            return;\n          }\n\n          let zoom = parseFloat(document.getElementById(\"svg\").style.zoom || 1);\n          for (let currentNode of that.currentNodes) {\n            currentNode.x += d3.event.dx / zoom;\n            currentNode.y += d3.event.dy / zoom;\n          }\n\n          d3.selectAll(\"#svg > g.guideline\").remove();\n          let edge = that.getCurrentNodesEdge();\n          let expectX = Math.round(Math.round(edge.start.x) / 10) * 10;\n          let expectY = Math.round(Math.round(edge.start.y) / 10) * 10;\n          that.internalNodes.forEach((item) => {\n            if (\n              that.currentNodes.filter((currentNode) => currentNode === item)\n                .length === 0\n            ) {\n              if (item.x === expectX) {\n                // vertical guideline\n                if (item.y < expectY) {\n                  that.guideLineTo(\n                    item.x,\n                    item.y + item.height,\n                    expectX,\n                    expectY\n                  );\n                } else {\n                  that.guideLineTo(\n                    expectX,\n                    expectY + item.height,\n                    item.x,\n                    item.y\n                  );\n                }\n              }\n              if (item.y === expectY) {\n                // horizontal guideline\n                if (item.x < expectX) {\n                  that.guideLineTo(\n                    item.x + item.width,\n                    item.y,\n                    expectX,\n                    expectY\n                  );\n                } else {\n                  that.guideLineTo(\n                    expectX + item.width,\n                    expectY,\n                    item.x,\n                    item.y\n                  );\n                }\n              }\n            }\n          });\n        })\n        .on(\"end\", function () {\n          d3.selectAll(\"#svg > g.guideline\").remove();\n          for (let currentNode of that.currentNodes) {\n            currentNode.x = Math.round(Math.round(currentNode.x) / 10) * 10;\n            currentNode.y = Math.round(Math.round(currentNode.y) / 10) * 10;\n          }\n        });\n      g.call(drag);\n      g.on(\"mousedown\", function () {\n        // handle ctrl+mousedown\n        if (!d3.event.ctrlKey) {\n          return;\n        }\n        let isNotCurrentNode =\n          that.currentNodes.filter((item) => item === node).length === 0;\n        if (isNotCurrentNode) {\n          that.currentNodes.push(node);\n        } else {\n          that.currentNodes.splice(that.currentNodes.indexOf(node), 1);\n        }\n      });\n      if(node['regex']['type'] == 'node'){\n        var curX = node.x + 5\n        var curY = node.y + 5\n        var eleWidth = 5\n        var eleHeight = 5\n        if('notFlag' in node['regex'] && node['regex']['notFlag']){\n          g.append('path')\n          .attr('d', function(){\n            var x1 = curX-3\n            var y1 = curY+5\n        \n            return ( \"M \" + x1 + \" \" + y1 +\n                    \"v \" + 23);\n          })\n          .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n          g.append('circle')\n          .attr('cx', curX-3)\n          .attr('cy', curY+33)\n          .attr('r', '0.7')\n           .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n        \n        }\n\n        g.append('rect')\n        .attr('class', 'unselectable title')\n        .attr('id', 'rect'+node['regex']['key'])\n        .attr('x', curX)\n        .attr('y', curY)\n        .attr('width', 40)\n        .attr('height', 40)\n        .attr('style', function(){\n            let tmpKey = sysDatasetObj.getSelectedDomKey()\n            if(node['regex']['key'] === tmpKey){\n                return ( \n                        \"stroke: red !important;\" + \n                        \"fill: \" + node['regex']['nodeColor'] + \"; \"+\n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                )\n            }\n            return (\n              \"stroke: #c4bbbb; !important;\" + \n              \"fill: \" + node['regex']['nodeColor'] + \"; \" + \n                \"stroke-dasharray: 0 0; \" + \n                \"stroke-width: 1;\"\n            )\n        })\n        .on('click', function(){\n          d3.select(this)\n          .attr('style', function(){\n                                 return (     \n                      \"stroke: red !important;\" + \n                      \"fill: \" + node['regex']['nodeColor'] + \"; \"+\n                      \"stroke-dasharray: 0 0; \" + \n                      \"stroke-width: 1;\"\n                    )\n          })\n          sysDatasetObj.updateSelectedDomKey(node['regex']['key'])\n          sysDatasetObj.updateSelectedOr(node['regex'], -1)\n          that.UPDATE_CONDITION_STATE(false)\n          that.UPDATE_SELECTED_DOM(node['regex'])\n        })\n        if('nodeName' in node['regex']){\n          if(node['regex']['nodeName'] == '.'){\n            g.append('text')\n            .attr('class', 'new11')\n            .attr('x', curX + 20)\n            .attr('y', curY + 12)\n            .attr('fill', 'white')\n            .attr('font-size', '50px')\n            .attr('text-anchor', \"middle\")\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr('class', 'unselectable title')\n            .text(() => node['regex']['nodeName'])\n            .on('click', function(){\n              d3.select('#rect'+node['regex']['key'])\n                .attr('style', function(){\n                                      return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                })\n              sysDatasetObj.updateSelectedDomKey(node['regex']['key'])\n              sysDatasetObj.updateSelectedOr(node['regex'], -1)\n              that.UPDATE_CONDITION_STATE(false)\n              that.UPDATE_SELECTED_DOM(node['regex'])\n            })\n          }\n          else{\n            g.append('text')\n            .attr('class', 'new11')\n            .attr('x', curX + 20)\n            .attr('y', curY + 20 + 2.5)\n            .attr('fill', 'white')\n            .attr('font-size', '20px')\n            .attr('text-anchor', \"middle\")\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr('class', 'unselectable title')\n            .text(() => node['regex']['nodeName'])\n            .on('click', function(){\n              d3.select('#rect'+node['regex']['key'])\n                .attr('style', function(){\n                                      return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                })\n              sysDatasetObj.updateSelectedDomKey(node['regex']['key'])\n              sysDatasetObj.updateSelectedOr(node['regex'], -1)\n              that.UPDATE_CONDITION_STATE(false)\n              that.UPDATE_SELECTED_DOM(node['regex'])\n            })\n          }\n          \n        }\n        node.width = eleWidth + 40 + 5\n        node.height = eleHeight + 40 + 5\n      }\n      else if(node['regex']['type'] == 'or'){\n        let eleWidth = 0\n        let curX = node.x\n        let curY = node.y\n        g.append('path')\n        .attr('class', 'path-'+node['regex']['key'])\n        .attr('d', function(){\n          var x1 = curX + 15\n          var y1 = curY + 2.5\n          var x2 = curX + 15\n          var y2 = curY + 44.5\n\n          var qx = x1-(y2-y1)/3\n          var qy = (y2+y1)/2\n\n          return ( \"M \" +  x1 + \" \" +  y1 +\n                \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n        })\n        .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n\n        g.append('rect')\n        .attr('width', '18')\n        .attr('height', '42')\n        .attr('transform', function(){\n          var x1 = curX + 15\n          var y1 = curY + 2.5\n          var x2 = curX + 15\n          var y2 = curY + 44.5\n\n          var qx = x1-(y2-y1)/3 + 5\n          var qy = (y2+y1)/2\n          return `translate(${qx}, ${y1})`\n        })\n        .attr('opacity', '0')\n        .on('click', function(){\n           that.UPDATE_SELECTED_DOM(node['regex'])\n            d3.selectAll('.path-'+node['regex']['key'])\n              .attr('style', 'stroke: red; stroke-width: 2px; fill: none;')\n            })\n        curX = curX + 15\n        eleWidth += 15\n\n        for(let i in node['regex']['composition']){\n          if(i!=0){\n            g.append('path')\n            .attr('d', function(){\n              var x1 = curX+10\n              var y1 = curY+3\n    \t        return ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t      \" v \" + 42);\n            })\n            .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            curX += 10\n            eleWidth += 5\n          }\n            if('notFlag' in node['regex']['composition'][i] && node['regex']['composition'][i]['notFlag']){\n              g.append('path')\n              .attr('d', function(){\n                var x1 = curX+7\n                var y1 = curY+5\n            \n                return ( \"M \" + x1 + \" \" + y1 +\n                        \"v \" + 32);\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              g.append('circle')\n              .attr('cx', curX+7)\n              .attr('cy', curY+40)\n              .attr('r', '1')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n              curX += 3\n              eleWidth += 3\n            }\n            g.append('rect')\n              .attr('class', 'unselectable title')\n              .attr('id', 'rect'+node['regex']['composition'][i]['key'])\n              .attr('x', curX+10)\n              .attr('y', curY+3)\n              .attr('width', 42)\n              .attr('height', 42)\n              .attr('style', function(){\n                  let tmpKey = sysDatasetObj.getSelectedDomKey()\n                  if('definition' in node['regex']['composition'][i]){\n                      if(node['regex']['composition'][i]['definition']){\n                          if(node['regex']['composition'][i]['key'] === tmpKey){\n                              return ( \n                                      \"stroke: red !important;\" + \n                                      \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                                      \"stroke-dasharray: 0 0; \" + \n                                      \"stroke-width: 1;\"\n                              )\n                          }\n                          return (\n                            \"stroke: #c4bbbb; !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \n                              \"stroke-dasharray: 0 0; \" + \n                              \"stroke-width: 1;\"\n                          )\n\n                      }\n                  }\n                  if('key' in node['regex']['composition'][i] && node['regex']['composition'][i].key === tmpKey){\n                        return ( \"stroke: red !important; \"+                \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \");\n                  }\n                  return (\n                      \"stroke: #c4bbbb; \" + \n                      \"stroke-width: 2; \" + \n                      \"stroke-dasharray: 4 2;\" + \n                      \"fill: white; \"\n                  )\n              })\n              .on('click', function(){\n                d3.select(this)\n                .attr('style', function(){\n                    if('definition' in node['regex']['composition'][i]){\n                        if(node['regex']['composition'][i]['definition']){\n                          return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                        }\n                    }\n                    return (\n                          \"stroke: red !important;\" + \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \"\n                      )\n                })\n                that.UPDATE_CONDITION_STATE(false)\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                sysDatasetObj.updateSelectedOr(node['regex'], i)\n              })\n            if('nodeName' in node['regex']['composition'][i]){\n              g.append('text')\n              .attr('class', 'new11')\n              .attr('x', curX + 31)\n              .attr('y', curY + 24)\n              .attr('fill', 'white')\n              .attr('font-size', '18px !important')\n              .attr('text-anchor', \"middle\")\n              .attr(\"alignment-baseline\", \"middle\")\n              .attr('class', 'unselectable title')\n              .text(() => node['regex']['composition'][i]['nodeName'])\n              .on('click', function(){\n                  d3.select('#rect'+node['regex']['composition'][i]['key'])\n                  .attr('style', function(){\n                  if('definition' in node['regex']['composition'][i]){\n                      if(node['regex']['composition'][i]['definition']){\n                        return (     \n                          \"stroke: red !important;\" + \n                          \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                          \"stroke-dasharray: 0 0; \" + \n                          \"stroke-width: 1;\"\n                        )\n                      }\n                  }\n                  return (\n                      \"stroke: red !important;\" + \n                      \"stroke-width: 2; \" + \n                      \"stroke-dasharray: 4 2;\" + \n                      \"fill: white; \"\n                  )\n              })\n                that.UPDATE_CONDITION_STATE(false)\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                sysDatasetObj.updateSelectedOr(node['regex'], i)\n              })\n            }\n            curX = curX + 52\n            eleWidth += 52\n            if(!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)){\n              g.append('text')\n              .attr('x', curX + 5)\n              .attr('y', curY + 2)\n              .attr('font-size', '15px')\n              .attr('alignment-baseline', 'hanging')\n              .text(() => node['regex']['composition'][i]['repeat'][0] + '..' + node['regex']['composition'][i]['repeat'][1])\n              curX = curX + 30\n              eleWidth += 30\n            }\n        }\n        g.append('path')\n          .attr('class', 'path-'+node['regex']['key'])\n          .attr('d', function(){\n            var x1 = curX + 10\n            var y1 = curY + 2.5\n            var x2 = curX + 10\n            var y2 = curY + 44.5\n\n            var qx = x1+(y2-y1)/3\n            var qy = (y2+y1)/2\n\n            return ( \"M \" +  x1 + \" \" +  y1 +\n                  \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n          })\n          .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n          \n          g.append('rect')\n            .attr('width', '18')\n            .attr('height', '42')\n            .attr('transform', function(){\n              var x1 = curX + 10\n              var y1 = curY + 2.5\n              var x2 = curX + 10\n              var y2 = curY + 44.5\n\n              var qx = x1-5\n              var qy = (y2+y1)/2\n              return `translate(${qx}, ${y1})`\n            })\n            .attr('opacity', '0')\n            .on('click', function(){\n              that.UPDATE_SELECTED_DOM(node['regex'])\n                d3.selectAll('.path-'+node['regex']['key'])\n                  .attr('style', 'stroke: red; stroke-width: 2px; fill: none;')\n                })\n\n        curX = curX + 15\n        eleWidth += 15\n\n        if(!(node['regex']['repeat'][0] == 1 && node['regex']['repeat'][1] == 1)){\n              g.append('text')\n              .attr('x', curX + 5)\n              .attr('y', curY + 2)\n              .attr('font-size', '15px')\n              .attr('alignment-baseline', 'hanging')\n              .text(() => node['regex']['repeat'][0] + '..' + node['regex']['repeat'][1])\n              curX = curX + 30\n              eleWidth += 30\n        }\n\n        node.width = 15 + eleWidth\n\n      }\n      else if(node['regex']['type'] == 'branch'){\n        let eleWidth = 5\n        let eleHeight = 5\n        let curX = node.x + 5\n        let curY = node.y + 5\n\n        g.append('path')\n        .attr('class', 'bPath-'+node['regex']['key'])\n        .attr('d', function(){\n          var x0 = curX\n          var y0 = curY + 10\n          var x1 = curX + 20\n          var y1 = curY\n          var x2 = curX + 40\n          var y2 = curY + 10\n\n          return \"M \" +  x0 + \" \" +  y0 +\n                \" L \" + x1+ \" \" + y1 + \n                \" L \" + x2+ \" \" + y2\n        })\n        .attr('style','stroke: #c4bbbb; stroke-width: 2px; fill: none;')\n\n\n        g.append('text')\n          .attr('x', curX+1)\n          .attr('y', curY-4)\n          .attr('font-size', '14px')\n          .attr('alignment-baseline', 'hanging')\n          .attr('text-anchor', 'middle')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#2c2c2c')\n          .text(() => node['regex']['repeat'][0])\n        \n        if(node['regex']['repeat'][1] == '*'){\n          g.append('text')\n            .attr('x', curX+38)\n            .attr('y', curY-2)\n            .attr('font-size', '18px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['regex']['repeat'][1])\n        }\n        else{\n          g.append('text')\n          .attr('x', curX+38)\n          .attr('y', curY-4)\n          .attr('font-size', '14px')\n          .attr('alignment-baseline', 'hanging')\n          .attr('text-anchor', 'middle')\n          .attr('font-weight', 'bold')\n          .attr('fill', '#2c2c2c')\n          .text(() => node['regex']['repeat'][1])\n        }\n\n\n\n        g.append('rect')\n          .attr('width', '40')\n          .attr('height', '10')\n          .attr('transform', function(){\n          var x = curX\n          var y = curY\n          return `translate(${x}, ${y})`\n          })\n          .attr('opacity', '0')\n          .on('click', function(){\n            that.UPDATE_SELECTED_DOM(node['regex'])\n              d3.selectAll('.bPath-'+node['regex']['key'])\n                .attr('style', 'stroke: red; stroke-width: 2px; fill: none;')\n              })\n\n        curY += 15\n        eleHeight += 15\n\n\n        \n        for(let i in node['regex']['composition']){\n          if(node['regex']['composition'][i]['type'] == 'node'){\n            if('notFlag' in node['regex']['composition'][i] && node['regex']['composition'][i]['notFlag']){\n              g.append('path')\n                .attr('d', function(){\n                  var x1 = curX-3\n                  var y1 = curY+5\n              \n                  return ( \"M \" + x1 + \" \" + y1 +\n                          \"v \" + 23);\n                })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              g.append('circle')\n              .attr('cx', curX-3)\n              .attr('cy', curY+33)\n              .attr('r', '0.7')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n            }\n\n            g.append('rect')\n              .attr('class', 'unselectable title')\n              .attr('id', 'rect'+node['regex']['composition'][i]['key'])\n              .attr('x', curX)\n              .attr('y', curY)\n              .attr('width', 40)\n              .attr('height', 40)\n              .attr('style', function(){\n                  let tmpKey = sysDatasetObj.getSelectedDomKey()\n                    if(node['regex']['composition'][i]['key'] === tmpKey){\n                        return ( \n                                \"stroke: red !important;\" + \n                                \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                                \"stroke-dasharray: 0 0; \" + \n                                \"stroke-width: 1;\"\n                        )\n                    }\n                    return (\n                      \"stroke: #c4bbbb; !important;\" + \n                      \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                    )\n                  if('definition' in node['regex']['composition'][i]){\n                      if(node['regex']['composition'][i]['definition']){\n                          if(node['regex']['composition'][i]['key'] === tmpKey){\n                              return ( \n                                      \"stroke: red !important;\" + \n                                      \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                                      \"stroke-dasharray: 0 0; \" + \n                                      \"stroke-width: 1;\"\n                              )\n                          }\n                          return (\n                            \"stroke: #c4bbbb; !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \" + \n                              \"stroke-dasharray: 0 0; \" + \n                              \"stroke-width: 1;\"\n                          )\n\n                      }\n                  }\n                  if('key' in node['regex']['composition'][i] && node['regex']['composition'][i].key === tmpKey){\n                        return ( \"stroke: red !important; \"+                \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \");\n                  }\n                  return (\n                      \"stroke: #c4bbbb; \" + \n                      \"stroke-width: 2; \" + \n                      \"stroke-dasharray: 4 2;\" + \n                      \"fill: white; \"\n                  )\n              })\n              .on('click', function(){\n                d3.select(this)\n                .attr('style', function(){\n                                            return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                    if('definition' in node['regex']['composition'][i]){\n                        if(node['regex']['composition'][i]['definition']){\n                          return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                        }\n                    }\n                    return (\n                          \"stroke: red !important;\" + \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \"\n                      )\n                })\n                that.UPDATE_CONDITION_STATE(false)\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                sysDatasetObj.updateSelectedBranch(node['regex'], i)\n                sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1)\n              })\n            if('nodeName' in node['regex']['composition'][i]){\n              if(node['regex']['composition'][i]['nodeName'] == '.'){\n                g.append('text')\n                .attr('class', 'new11')\n                .attr('x', curX + 20)\n                .attr('y', curY + 12)\n                .attr('fill', 'white')\n                .attr('font-size', '50px')\n                .attr('text-anchor', \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr('class', 'unselectable title')\n                .text(() => node['regex']['composition'][i]['nodeName'])\n                .on('click', function(){\n                    d3.select('#rect'+node['regex']['composition'][i]['key'])\n                    .attr('style', function(){\n                                          return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                })\n                  that.UPDATE_CONDITION_STATE(false)\n                  that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                  sysDatasetObj.updateSelectedBranch(node['regex'], i)\n                  sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1)\n                })\n              }\n              else{\n                g.append('text')\n                .attr('class', 'new11')\n                .attr('x', curX + 20)\n                .attr('y', curY + 20 + 2.5)\n                .attr('fill', 'white')\n                .attr('font-size', '20px')\n                .attr('text-anchor', \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr('class', 'unselectable title')\n                .text(() => node['regex']['composition'][i]['nodeName'])\n                .on('click', function(){\n                    d3.select('#rect'+node['regex']['composition'][i]['key'])\n                    .attr('style', function(){\n                                          return (     \n                            \"stroke: red !important;\" + \n                            \"fill: \" + node['regex']['composition'][i]['nodeColor'] + \"; \"+\n                            \"stroke-dasharray: 0 0; \" + \n                            \"stroke-width: 1;\"\n                          )\n                })\n                  that.UPDATE_CONDITION_STATE(false)\n                  that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                  sysDatasetObj.updateSelectedBranch(node['regex'], i)\n                  sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], -1)\n                })\n              }\n            }\n\n\n            if(!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)){\n              g.append('path')\n              .attr('class', '1bPath-'+node['regex']['key'])\n              .attr('d', function(){\n                var x1 = curX + 40 + 3;\n                var y1 = curY + 16;\n                var x2 = curX + 40 + 3;\n                var y2 = curY + 24;\n                var r = 7;\n                eleWidth = 5 + 15;\n                return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n              })\n              .attr('style','stroke: #000000; stroke-width: 1.5px; fill: none;')\n\n              g.append('path')\n              .attr('class', '1bPath-'+node['regex']['key'])\n              .attr('d', function(){\n                var x0 = curX + 40 + 3\n                var y0 = curY + 24\n                var x1 = x0 + 4\n                var y1 = y0 + 6\n\n                return \"M \" +  x1 + \",\" +  y1 +\n                  \" L \" + x0 + \",\" + y0 ;\n              })\n              .attr('style','stroke: #000000; stroke-width: 1.5px; fill: none;')\n\n              g.append('text')\n              .attr('x', curX + 40 + 5)\n              .attr('y', curY )\n              .attr('font-size', '12px')\n              .attr('alignment-baseline', 'hanging')\n              .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n              .text(() => node['regex']['composition'][i]['repeat'][0])\n\n              if(node['regex']['composition'][i]['repeat'][1] == '*'){\n                g.append('text')\n                  .attr('x', curX + 40 + 5)\n                  .attr('y', curY + 30)\n                  .attr('font-size', '20px')\n                  .attr('alignment-baseline', 'hanging')\n                  .attr('font-weight', 'bold')\n                  .attr('fill', '#2c2c2c')\n                  .text(() => node['regex']['composition'][i]['repeat'][1])\n              }\n              else{\n                g.append('text')\n                .attr('x', curX + 40 + 5)\n                .attr('y', curY + 30)\n                .attr('font-size', '12px')\n                .attr('alignment-baseline', 'hanging')\n                .attr('font-weight', 'bold')\n                .attr('fill', '#2c2c2c')\n                .text(() => node['regex']['composition'][i]['repeat'][1])\n              }\n            }\n\n            curY = curY + 40 + 10\n            eleHeight = eleHeight + 40 + 10\n\n\n          }\n          else if(node['regex']['composition'][i]['type'] == 'or'){\n            g.append('path')\n            .attr('class', 'path-'+node['regex']['composition'][i]['key'])\n            .attr('d', function(){\n              var x1 = curX + 15\n              var y1 = curY + 2.5\n              var x2 = curX + 15\n              var y2 = curY + 44.5\n\n              var qx = x1-(y2-y1)/3\n              var qy = (y2+y1)/2\n\n              return ( \"M \" +  x1 + \" \" +  y1 +\n                    \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n            })\n            .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n\n            g.append('rect')\n              .attr('width', '18')\n              .attr('height', '42')\n              .attr('transform', function(){\n                var x1 = curX + 15\n                var y1 = curY + 2.5\n                var x2 = curX + 15\n                var y2 = curY + 44.5\n\n                var qx = x1-(y2-y1)/3 + 5\n                var qy = (y2+y1)/2\n                return `translate(${qx}, ${y1})`\n              })\n              .attr('opacity', '0')\n              .on('click', function(){\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                  d3.selectAll('.path-'+node['regex']['composition'][i]['key'])\n                    .attr('style', 'stroke: red; stroke-width: 2px; fill: none;')\n                  })\n\n            curX = curX + 15\n            eleWidth += 15\n\n            for(let j in node['regex']['composition'][i]['composition']){\n              if(j!=0){\n                g.append('path')\n                .attr('d', function(){\n                  var x1 = curX+10\n                  var y1 = curY+3\n                  return ( \"M \" +  x1 + \" \" +  y1 +\n                      \" v \" + 42);\n                })\n                .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n                curX += 10\n                eleWidth += 5\n              }\n              \n              if('notFlag' in node['regex']['composition'][i]['composition'][j] && node['regex']['composition'][i]['composition'][j]['notFlag']){\n              g.append('path')\n              .attr('d', function(){\n                var x1 = curX+7\n                var y1 = curY+5\n            \n                return ( \"M \" + x1 + \" \" + y1 +\n                        \"v \" + 32);\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              g.append('circle')\n              .attr('cx', curX+7)\n              .attr('cy', curY+40)\n              .attr('r', '1')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n              curX += 3\n              eleWidth += 3\n            }\n\n                g.append('rect')\n                  .attr('class', 'unselectable title')\n                  .attr('id', 'rect'+node['regex']['composition'][i]['composition'][j]['key'])\n                  .attr('x', curX+10)\n                  .attr('y', curY+3)\n                  .attr('width', 42)\n                  .attr('height', 42)\n                  .attr('style', function(){\n                      let tmpKey = sysDatasetObj.getSelectedDomKey()\n                      if('definition' in node['regex']['composition'][i]['composition'][j]){\n                          if(node['regex']['composition'][i]['composition'][j]['definition']){\n                              if(node['regex']['composition'][i]['composition'][j]['key'] === tmpKey){\n                                  return ( \n                                          \"stroke: red !important;\" + \n                                          \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \"+\n                                          \"stroke-dasharray: 0 0; \" + \n                                          \"stroke-width: 1;\"\n                                  )\n                              }\n                              return (\n                                \"stroke: #c4bbbb; !important;\" + \n                                \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \" + \n                                  \"stroke-dasharray: 0 0; \" + \n                                  \"stroke-width: 1;\"\n                              )\n\n                          }\n                      }\n                      if('key' in node['regex']['composition'][i]['composition'][j] && node['regex']['composition'][i]['composition'][j].key === tmpKey){\n                            return ( \"stroke: red !important; \"+                \n                              \"stroke-width: 2; \" + \n                              \"stroke-dasharray: 4 2;\" + \n                              \"fill: white; \");\n                      }\n                      return (\n                          \"stroke: #c4bbbb; \" + \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \"\n                      )\n                  })\n                  .on('click', function(){\n                    d3.select(this)\n                    .attr('style', function(){\n                        if('definition' in node['regex']['composition'][i]['composition'][j]){\n                            if(node['regex']['composition'][i]['composition'][j]['definition']){\n                              return (     \n                                \"stroke: red !important;\" + \n                                \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \"+\n                                \"stroke-dasharray: 0 0; \" + \n                                \"stroke-width: 1;\"\n                              )\n                            }\n                        }\n                        return (\n                              \"stroke: red !important;\" + \n                              \"stroke-width: 2; \" + \n                              \"stroke-dasharray: 4 2;\" + \n                              \"fill: white; \"\n                          )\n                    })\n                    that.UPDATE_CONDITION_STATE(false)\n                    that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]['composition'][j])\n                    sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], j)\n                  })\n                if('nodeName' in node['regex']['composition'][i]['composition'][j]){\n                  g.append('text')\n                  .attr('class', 'new11')\n                  .attr('x', curX + 31)\n                  .attr('y', curY + 24)\n                  .attr('fill', 'white')\n                  .attr('font-size', '18px !important')\n                  .attr('text-anchor', \"middle\")\n                  .attr(\"alignment-baseline\", \"middle\")\n                  .attr('class', 'unselectable title')\n                  .text(() =>node['regex']['composition'][i]['composition'][j]['nodeName'])\n                  .on('click', function(){\n                      d3.select('#rect'+node['regex']['composition'][i]['key'])\n                      .attr('style', function(){\n                      if('definition' in node['regex']['composition'][i]['composition'][j]){\n                          if(node['regex']['composition'][i]['composition'][j]['definition']){\n                            return (     \n                              \"stroke: red !important;\" + \n                              \"fill: \" + node['regex']['composition'][i]['composition'][j]['nodeColor'] + \"; \"+\n                              \"stroke-dasharray: 0 0; \" + \n                              \"stroke-width: 1;\"\n                            )\n                          }\n                      }\n                      return (\n                          \"stroke: red !important;\" + \n                          \"stroke-width: 2; \" + \n                          \"stroke-dasharray: 4 2;\" + \n                          \"fill: white; \"\n                      )\n                  })\n                    that.UPDATE_CONDITION_STATE(false)\n                    that.UPDATE_SELECTED_DOM(node['regex']['composition'][i]['composition'][j])\n                    sysDatasetObj.updateSelectedOr(node['regex']['composition'][i], j)\n                  })\n                }\n                curX = curX + 52\n                eleWidth += 52\n                if(!(node['regex']['composition'][i]['composition'][j]['repeat'][0] == 1 && node['regex']['composition'][i]['composition'][j]['repeat'][1] == 1)){\n                  g.append('text')\n                  .attr('x', curX + 5)\n                  .attr('y', curY + 2)\n                  .attr('font-size', '15px')\n                  .attr('alignment-baseline', 'hanging')\n                  .text(() => node['regex']['composition'][i]['composition'][j]['repeat'][0] + '..' + node['regex']['composition'][i]['composition'][j]['repeat'][1])\n                  curX = curX + 30\n                  eleWidth += 30\n                }\n            }\n            g.append('path')\n              .attr('class', 'path-'+node['regex']['composition'][i]['key'])\n              .attr('d', function(){\n                var x1 = curX + 10\n                var y1 = curY + 2.5\n                var x2 = curX + 10\n                var y2 = curY + 44.5\n\n                var qx = x1+(y2-y1)/3\n                var qy = (y2+y1)/2\n\n                return ( \"M \" +  x1 + \" \" +  y1 +\n                      \" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n\n              g.append('rect')\n                .attr('width', '18')\n                .attr('height', '42')\n                .attr('transform', function(){\n                  var x1 = curX + 10\n                  var y1 = curY + 2.5\n                  var x2 = curX + 10\n                  var y2 = curY + 44.5\n\n                  var qx = x1-5\n                  var qy = (y2+y1)/2\n                  return `translate(${qx}, ${y1})`\n                })\n              .attr('opacity', '0')\n              .on('click', function(){\n                that.UPDATE_SELECTED_DOM(node['regex']['composition'][i])\n                  d3.selectAll('.path-'+node['regex']['composition'][i]['key'])\n                    .attr('style', 'stroke: red; stroke-width: 2px; fill: none;')\n                  })\n\n              curX = curX + 15\n              eleWidth += 15\n\n            if(!(node['regex']['composition'][i]['repeat'][0] == 1 && node['regex']['composition'][i]['repeat'][1] == 1)){\n              g.append('text')\n              .attr('x', curX + 5)\n              .attr('y', curY + 2)\n              .attr('font-size', '15px')\n              .attr('alignment-baseline', 'hanging')\n              .text(() => node['regex']['composition'][i]['repeat'][0] + '..' + node['regex']['composition'][i]['repeat'][1])\n              curX = curX + 30\n              eleWidth += 30\n            }\n\n            node.width = 8 + eleWidth\n\n          }\n\n        }\n        \n        node.width = eleWidth + 40 + 5\n        node.height = eleHeight - 5\n\n\n        \n      }\n\n\n          // .attr(\"class\", \"connector\");\n      let connectors = [];\n      let connectorPosition = this.getConnectorPosition(node);\n      for (let position in connectorPosition) {\n        let positionElement = connectorPosition[position];\n        let connector = g\n          .append(\"circle\")\n          .attr(\"cx\", positionElement.x)\n          .attr(\"cy\", positionElement.y)\n          .attr(\"r\", 4)\n          .attr(\"class\", \"connector\");\n\n        connector\n          .on(\"mousedown\", function () {\n            d3.event.stopPropagation();\n            if (node.type === \"end\" || that.readonly) {\n              return;\n            }\n            that.connectingInfo.source = node;\n            that.connectingInfo.sourcePosition = position;\n          })\n          .on(\"mouseup\", function () {\n            d3.event.stopPropagation();\n            if (that.connectingInfo.source) {\n              if (that.connectingInfo.source.id !== node.id) {\n                // Node can't connect to itself\n                let tempId = +new Date();\n                let conn = {\n                  source: {\n                    id: that.connectingInfo.source.id,\n                    position: that.connectingInfo.sourcePosition,\n                  },\n                  destination: {\n                    id: node.id,\n                    position: position,\n                  },\n                  id: tempId,\n                  type: \"pass\",\n                  name: \"Pass\",\n                };\n                let tmpSource = that.internalNodes.filter((item) => item.id === conn['source']['id'])[0]\n                let tmpDestination = that.internalNodes.filter((item) => item.id === conn['destination']['id'])[0]\n                sysDatasetObj.addEdge(tmpSource['regexIndex'], tmpDestination['regexIndex'])\n                that.internalConnections.push(conn);\n\n              }\n              that.connectingInfo.source = null;\n              that.connectingInfo.sourcePosition = null;\n            }\n          })\n          .on(\"mouseover\", function () {\n            connector.classed(\"active\", true);\n          })\n          .on(\"mouseout\", function () {\n            connector.classed(\"active\", false);\n          });\n        connectors.push(connector);\n      }\n      g.on(\"mouseover\", function () {\n        connectors.forEach((conn) => conn.classed(\"active\", true));\n      }).on(\"mouseout\", function () {\n        connectors.forEach((conn) => conn.classed(\"active\", false));\n      });\n    },\n    getCurrentNodesEdge() {\n      let points = this.currentNodes.map((node) => ({\n        x: node.x,\n        y: node.y,\n      }));\n      points.push(\n        ...this.currentNodes.map((node) => ({\n          x: node.x + node.width,\n          y: node.y + node.height,\n        }))\n      );\n      return getEdgeOfPoints(points);\n    },\n    async remove() {\n      if (this.readonly) {\n        return;\n      }\n      if (this.currentConnections.length > 0) {\n        for (let conn of this.currentConnections) {\n          this.removeConnection(conn);\n        }\n        this.currentConnections.splice(0, this.currentConnections.length);\n      }\n      if (this.currentNodes.length > 0) {\n        for (let node of this.currentNodes) {\n          this.removeNode(node);\n        }\n        this.currentNodes.splice(0, this.currentNodes.length);\n      }\n    },\n    removeNode(node) {\n      let connections = this.internalConnections.filter(\n        (item) => item.source.id === node.id || item.destination.id === node.id\n      );\n      for (let connection of connections) {\n        this.internalConnections.splice(\n          this.internalConnections.indexOf(connection),\n          1\n        );\n      }\n      sysDatasetObj.deleteEdge(node['regexIndex'])\n      this.internalNodes.splice(this.internalNodes.indexOf(node), 1);\n    },\n    removeConnection(conn) {\n      let index = this.internalConnections.indexOf(conn);\n      let tmpSource = this.internalNodes.filter((item) => item.id === conn['source']['id'])[0]\n      let tmpDestination = this.internalNodes.filter((item) => item.id === conn['destination']['id'])[0]\n      sysDatasetObj.deleteEdge1(tmpSource['regexIndex'], tmpDestination['regexIndex'])\n      this.internalConnections.splice(index, 1);\n    },\n    moveCurrentNode(x, y) {\n      if (this.currentNodes.length > 0 && !this.readonly) {\n        for (let node of this.currentNodes) {\n          node.x += x;\n          node.y += y;\n        }\n      }\n    },\n    init() {\n      let that = this;\n      that.internalNodes.splice(0, that.internalNodes.length);\n      that.internalConnections.splice(0, that.internalConnections.length);\n      that.nodes.forEach((node) => {\n        let newNode = Object.assign({}, node);\n        newNode.width = newNode.width || 120;\n        newNode.height = newNode.height || 60;\n        that.internalNodes.push(newNode);\n      });\n      that.connections.forEach((connection) => {\n        that.internalConnections.push(JSON.parse(JSON.stringify(connection)));\n      });\n    },\n    ...mapMutations([\n      'UPDATE_HOVERING_ID'\n    ])\n  },\n  mounted() {\n    let that = this;\n    that.init();\n    document.onkeydown = function (event) {\n      switch (event.keyCode) {\n        case 37:\n          that.moveCurrentNode(-10, 0);\n          break;\n        case 38:\n          that.moveCurrentNode(0, -10);\n          break;\n        case 39:\n          that.moveCurrentNode(10, 0);\n          break;\n        case 40:\n          that.moveCurrentNode(0, 10);\n          break;\n        case 27:\n          that.currentNodes.splice(0, that.currentNodes.length);\n          that.currentConnections.splice(0, that.currentConnections.length);\n          break;\n        case 65:\n          if (document.activeElement === document.getElementById(\"chart\")) {\n            that.currentNodes.splice(0, that.currentNodes.length);\n            that.currentConnections.splice(0, that.currentConnections.length);\n            that.currentNodes.push(...that.internalNodes);\n            that.currentConnections.push(...that.internalConnections);\n            event.preventDefault();\n          }\n          break;\n        // delete the selected item\n        case 8:\n        // case 46:\n        //   that.remove();\n        //   break;\n        default:\n          break;\n      }\n    };\n  },\n  created() {},\n  computed: {\n    // ...mapState([\n    //   'hoveringId'\n    // ]),\n    hoveredConnector() {\n      for (const node of this.internalNodes) {\n        let connectorPosition = this.getConnectorPosition(node);\n        for (let prop in connectorPosition) {\n          let entry = connectorPosition[prop];\n          if (\n            Math.hypot(\n              entry.x - this.cursorToChartOffset.x,\n              entry.y - this.cursorToChartOffset.y\n            ) < 10\n          ) {\n            return { position: prop, node: node };\n          }\n        }\n      }\n      return null;\n    },\n    hoveredConnection() {\n      for (const line of this.lines) {\n        let distance = distanceOfPointToLine(\n          line.sourceX,\n          line.sourceY,\n          line.destinationX,\n          line.destinationY,\n          this.cursorToChartOffset.x,\n          this.cursorToChartOffset.y\n        );\n        if (\n          distance < 5 &&\n          between(\n            line.sourceX - 2,\n            line.destinationX + 2,\n            this.cursorToChartOffset.x\n          ) &&\n          between(\n            line.sourceY - 2,\n            line.destinationY + 2,\n            this.cursorToChartOffset.y\n          )\n        ) {\n          let connections = this.internalConnections.filter(\n            (item) => item.id === line.id\n          );\n          return connections.length > 0 ? connections[0] : null;\n        }\n      }\n      return null;\n    },\n    cursor() {\n      if (this.connectingInfo.source || this.hoveredConnector) {\n        return \"crosshair\";\n      }\n      if (this.hoveredConnection != null) {\n        return \"pointer\";\n      }\n      return null;\n    },\n  },\n  watch: {\n\n    internalNodes: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderNodes();\n        this.renderConnections();\n      },\n    },\n    internalConnections: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderConnections();\n      },\n    },\n    selectionInfo: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderSelection();\n      },\n    },\n    currentNodes: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderNodes();\n      },\n    },\n    currentConnections: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderConnections();\n      },\n    },\n    cursorToChartOffset: {\n      immediate: true,\n      deep: true,\n      handler() {\n        if (this.selectionInfo) {\n          this.renderSelection();\n        }\n      },\n    },\n    connectingInfo: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.renderConnections();\n      },\n    },\n    nodes: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.init();\n      },\n    },\n    connections: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.init();\n      },\n    },\n  },\n};\n</script>\n<style lang=\"less\" scoped>\n.query-btn{\n    position: absolute;\n    left: 5px;\n    bottom: 5px;\n    font-size: 0.8rem;\n    font-weight: bolder;\n    color: #808080;\n    line-height: 10px;\n    // background: #fff;\n    // border: 1px solid #dcdfe6;\n    // cursor: pointer;\n    // border-radius: 4px;\n    // &.selected {\n    // color: #409eff;\n    // border-color: #c6e2ff;\n    // background-color: #ecf5ff;\n    // }\n    //  &.hover {\n    // color: #409eff;\n    // border-color: #c6e2ff;\n    // background-color: #ecf5ff;\n    // }\n  \n}\npath {\n    &.highlighted {\n        stroke: red;\n    }\n}\n\n</style>\n"],"sourceRoot":"src/components/flowchart"}]}
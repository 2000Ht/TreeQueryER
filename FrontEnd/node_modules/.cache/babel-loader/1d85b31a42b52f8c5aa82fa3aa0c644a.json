{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/store.js","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/store.js","mtime":1670489761733},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/eslint-loader/index.js","mtime":1660192275000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _mutations;\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    displayMode: 'vis',\n    selectedDom: {\n      repeat: [1, 1]\n    },\n    selectedDomKey: -1,\n    reTreeDataState: 0,\n    nodeDefinitionState: 0,\n    nodeDefinitionState2: 0,\n    selectedListNode: null,\n    regexCommitState: 0,\n    selectedRepeatDom: null,\n    selectedRepeatDomState: 0,\n    lastDom: null,\n    regexList: [],\n    regexListState: 0,\n    attributeList: {\n      'depth': 'number',\n      'height': 'number',\n      'degree': 'number'\n    },\n    selectedPartState: 0,\n    regexViewState: false,\n    visViewState: 0,\n    curRegexIndex: 0,\n    reViewDataState: 0,\n    treeViewState: 0,\n    nodeListState: 0,\n    connectionState: 0,\n    curConnectionNode: null,\n    regexContentState: 0,\n    visTreeDataState: 0,\n    queryType: 0,\n    queryStateIndex: 0,\n    queryIndex: 0,\n    queryStateRegex: 0,\n    queryPage: 0,\n    queryStatePage: 0,\n    queryCoding: '',\n    queryStateCoding: 0,\n    overviewPanelState: 0,\n    visPanelState: 0,\n    treeListState: 0,\n    regPanelState: 0,\n    conditionState: true,\n    repeatState: false\n  },\n  mutations: (_mutations = {}, _defineProperty(_mutations, 'UPDATE_DISPLAY_MODE', function UPDATE_DISPLAY_MODE(state, displayMode) {\n    state.displayMode = displayMode;\n  }), _defineProperty(_mutations, 'UPDATE_SELECTED_DOM', function UPDATE_SELECTED_DOM(state, selectedDom) {\n    //console.log('================UPDATE_SELECTED_DOM================', selectedDom['type'], selectedDom['parent']['type'])\n    state.selectedDom = selectedDom;\n\n    if (selectedDom != null && typeof selectedDom.key !== 'undefined') {\n      state.selectedDomKey = selectedDom.key;\n    }\n  }), _defineProperty(_mutations, 'GET_SELECTEDKEY', function GET_SELECTEDKEY(state) {\n    return state.selectedDomKey;\n  }), _defineProperty(_mutations, 'UPDATE_RETREE_DATA_STATE', function UPDATE_RETREE_DATA_STATE(state) {\n    console.log('UPDATE_RETREE_DATA_STATE');\n    state.reTreeDataState = (state.reTreeDataState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_NODE_DEFINITION_STATE', function UPDATE_NODE_DEFINITION_STATE(state) {\n    state.nodeDefinitionState = (state.nodeDefinitionState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_SELECTED_LIST_DOM', function UPDATE_SELECTED_LIST_DOM(state, selectedNode) {\n    state.selectedListNode = selectedNode;\n  }), _defineProperty(_mutations, 'UPDATE_NODE_DEFINITION_STATE2', function UPDATE_NODE_DEFINITION_STATE2(state) {\n    state.nodeDefinitionState2 = (state.nodeDefinitionState2 + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_REGEX_COMMIT_STATE', function UPDATE_REGEX_COMMIT_STATE(state) {\n    state.regexCommitState = (state.regexCommitState + 1) % 2;\n  }), _defineProperty(_mutations, 'RESET_DOM_KEY_STATE', function RESET_DOM_KEY_STATE(state) {\n    state.selectedDomKey = -1;\n    state.selectedDom = null;\n  }), _defineProperty(_mutations, 'UPDATE_REPEAT_DOM', function UPDATE_REPEAT_DOM(state, curRepeatDom) {\n    state.selectedRepeatDom = curRepeatDom;\n    state.selectedRepeatDomState = (state.selectedRepeatDomState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_LAST_DOM', function UPDATE_LAST_DOM(state, lastDom) {\n    state.lastDom = lastDom;\n  }), _defineProperty(_mutations, 'ADD_REGEX_LIST', function ADD_REGEX_LIST(state, regex) {\n    if (!('regexIndex' in regex)) {\n      regex['regexIndex'] = state.regexList.length;\n      state.regexList.push(regex);\n    }\n\n    state.regexListState = (state.regexListState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_CURRENT_REGEX', function UPDATE_CURRENT_REGEX(state, regexIndex) {\n    state.curRegexIndex = regexIndex;\n  }), _defineProperty(_mutations, 'DELETE_REGEX_LIST', function DELETE_REGEX_LIST(state, regex) {\n    state.regexList.splice(regex['regexIndex'], 1);\n  }), _defineProperty(_mutations, 'UPDATE_ATTRIBUTE_LIST_NUMBER', function UPDATE_ATTRIBUTE_LIST_NUMBER(state, key) {\n    state.attributeList[key] = 'number';\n  }), _defineProperty(_mutations, 'UPDATE_ATTRIBUTE_LIST_STRING', function UPDATE_ATTRIBUTE_LIST_STRING(state, key) {\n    state.attributeList[key] = 'string';\n  }), _defineProperty(_mutations, 'UPDATE_ATTRIBUTE_LIST_BOOLEAN', function UPDATE_ATTRIBUTE_LIST_BOOLEAN(state, key) {\n    state.attributeList[key] = 'boolean';\n  }), _defineProperty(_mutations, 'UPDATE_SELECTED_PART', function UPDATE_SELECTED_PART(state) {\n    state.selectedPartState = (state.selectedPartState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_HOVERING_ID', function UPDATE_HOVERING_ID(state, hoveringId) {\n    state.hoveringId = hoveringId;\n  }), _defineProperty(_mutations, 'SHOW_REVIEW', function SHOW_REVIEW(state) {\n    state.regexViewState = true;\n  }), _defineProperty(_mutations, 'UN_SHOW_REVIEW', function UN_SHOW_REVIEW(state) {\n    state.regexViewState = false;\n  }), _defineProperty(_mutations, 'UPDATE_VISVIEW', function UPDATE_VISVIEW(state) {\n    state.visViewState = (state.visViewState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_REVIEW_DATA', function UPDATE_REVIEW_DATA(state) {\n    state.reViewDataState = (state.reViewDataState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_TREEVIEW', function UPDATE_TREEVIEW(state) {\n    state.treeViewState = (state.treeViewState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_NODE_LIST', function UPDATE_NODE_LIST(state) {\n    state.nodeListState = (state.nodeListState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_CONNECTION', function UPDATE_CONNECTION(state, index) {\n    state.curConnectionNode = index;\n    state.connectionState = (state.connectionState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_REGEX_CONTENT', function UPDATE_REGEX_CONTENT(state) {\n    state.regexContentState = (state.regexContentState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_VIS_TREE', function UPDATE_VIS_TREE(state) {\n    state.visTreeDataState = (state.visTreeDataState + 1) % 2;\n  }), _defineProperty(_mutations, 'DATA_QUERY_INDEX', function DATA_QUERY_INDEX(state, index) {\n    state.queryIndex = index;\n    state.queryStateIndex = (state.queryStateIndex + 1) % 2;\n  }), _defineProperty(_mutations, 'DATA_QUERY_REGEX', function DATA_QUERY_REGEX(state) {\n    state.queryStateRegex = (state.queryStateRegex + 1) % 2;\n  }), _defineProperty(_mutations, 'DATA_QUERY_PAGE', function DATA_QUERY_PAGE(state, index) {\n    state.queryPage = index;\n    state.queryStatePage = (state.queryStatePage + 1) % 2;\n  }), _defineProperty(_mutations, 'DATA_QUERY_CODING', function DATA_QUERY_CODING(state, reg_coding) {\n    state.queryCoding = reg_coding;\n    state.queryStateCoding = (state.queryStateCoding + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_VIS_PANEL', function UPDATE_VIS_PANEL(state) {\n    state.visPanelState = (state.visPanelState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_TREE_LIST', function UPDATE_TREE_LIST(state) {\n    state.treeListState = (state.treeListState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_REG_PANEL', function UPDATE_REG_PANEL(state) {\n    state.regPanelState = (state.regPanelState + 1) % 2;\n  }), _defineProperty(_mutations, 'UPDATE_CONDITION_STATE', function UPDATE_CONDITION_STATE(state, flag) {\n    state.conditionState = flag;\n  }), _defineProperty(_mutations, 'UPDATE_REPEAT_STATE', function UPDATE_REPEAT_STATE(state, flag) {\n    state.repeatState = flag;\n  }), _mutations),\n  actions: {}\n});",{"version":3,"sources":["/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/store.js"],"names":["Vue","Vuex","use","Store","state","displayMode","selectedDom","repeat","selectedDomKey","reTreeDataState","nodeDefinitionState","nodeDefinitionState2","selectedListNode","regexCommitState","selectedRepeatDom","selectedRepeatDomState","lastDom","regexList","regexListState","attributeList","selectedPartState","regexViewState","visViewState","curRegexIndex","reViewDataState","treeViewState","nodeListState","connectionState","curConnectionNode","regexContentState","visTreeDataState","queryType","queryStateIndex","queryIndex","queryStateRegex","queryPage","queryStatePage","queryCoding","queryStateCoding","overviewPanelState","visPanelState","treeListState","regPanelState","conditionState","repeatState","mutations","key","console","log","selectedNode","curRepeatDom","regex","length","push","regexIndex","splice","hoveringId","index","reg_coding","flag","actions"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n  \tdisplayMode: 'vis',\n    selectedDom: {\n      repeat:[1 ,1]\n    },\n    selectedDomKey: -1,\n    reTreeDataState: 0,\n    nodeDefinitionState: 0,\n    nodeDefinitionState2: 0,\n    selectedListNode: null,\n    regexCommitState: 0,\n    selectedRepeatDom: null,\n    selectedRepeatDomState: 0,\n    lastDom: null,\n    regexList: [],\n    regexListState: 0,\n    attributeList: {'depth':'number', 'height': 'number','degree':'number'},\n    selectedPartState: 0,\n    regexViewState: false,\n    visViewState: 0,\n    curRegexIndex: 0,\n    reViewDataState: 0, \n    treeViewState: 0,\n    nodeListState: 0,\n    connectionState: 0,\n    curConnectionNode: null,\n    regexContentState: 0,\n\n    visTreeDataState: 0,\n    queryType: 0,\n    queryStateIndex: 0,\n    queryIndex: 0,\n    queryStateRegex: 0,\n    queryPage: 0,\n    queryStatePage: 0,\n    queryCoding: '',\n    queryStateCoding: 0,\n\n    overviewPanelState: 0,\n    visPanelState: 0,\n    treeListState: 0,\n    regPanelState: 0,\n    conditionState: true,\n    repeatState: false,\n\n  },\n  mutations: {\n    ['UPDATE_DISPLAY_MODE'] (state, displayMode) {\n      state.displayMode = displayMode\n    },\n    ['UPDATE_SELECTED_DOM'] (state, selectedDom) {\n      //console.log('================UPDATE_SELECTED_DOM================', selectedDom['type'], selectedDom['parent']['type'])\n      \n      state.selectedDom = selectedDom\n      if ((selectedDom != null) && (typeof(selectedDom.key) !== 'undefined')) {\n        state.selectedDomKey = selectedDom.key\n      }\n    },\n    ['GET_SELECTEDKEY'](state){\n      return state.selectedDomKey\n    },\n    ['UPDATE_RETREE_DATA_STATE'] (state) {\n      console.log('UPDATE_RETREE_DATA_STATE')\n      state.reTreeDataState = (state.reTreeDataState + 1) % 2\n    },\n    ['UPDATE_NODE_DEFINITION_STATE'] (state){\n      state.nodeDefinitionState = (state.nodeDefinitionState + 1) % 2\n    },\n    ['UPDATE_SELECTED_LIST_DOM'] (state, selectedNode){\n      state.selectedListNode = selectedNode\n    },\n    ['UPDATE_NODE_DEFINITION_STATE2'] (state){\n      state.nodeDefinitionState2 = (state.nodeDefinitionState2 + 1)%2\n    },\n    ['UPDATE_REGEX_COMMIT_STATE'] (state){\n      state.regexCommitState = (state.regexCommitState + 1) % 2\n    },\n    ['RESET_DOM_KEY_STATE'] (state){\n      state.selectedDomKey = -1\n      state.selectedDom = null\n    },\n    ['UPDATE_REPEAT_DOM'](state, curRepeatDom) {\n      state.selectedRepeatDom = curRepeatDom\n      state.selectedRepeatDomState = (state.selectedRepeatDomState + 1) % 2\n    },\n    ['UPDATE_LAST_DOM'](state, lastDom){\n      state.lastDom = lastDom\n    },\n    ['ADD_REGEX_LIST'](state, regex){\n      if(!('regexIndex' in regex)){\n        regex['regexIndex'] = state.regexList.length\n        state.regexList.push(regex)\n      }\n      state.regexListState = (state.regexListState + 1) % 2\n    },\n    ['UPDATE_CURRENT_REGEX'](state, regexIndex){\n      state.curRegexIndex = regexIndex\n    },\n    ['DELETE_REGEX_LIST'](state, regex){\n      state.regexList.splice(regex['regexIndex'],1)\n    },\n    ['UPDATE_ATTRIBUTE_LIST_NUMBER'](state, key){\n      state.attributeList[key] = 'number'\n    },\n    ['UPDATE_ATTRIBUTE_LIST_STRING'](state, key){\n      state.attributeList[key] = 'string'\n    },\n    ['UPDATE_ATTRIBUTE_LIST_BOOLEAN'](state, key){\n      state.attributeList[key] = 'boolean'\n    },\n    ['UPDATE_SELECTED_PART'](state){\n      state.selectedPartState = (state.selectedPartState + 1) % 2\n    },\n    ['UPDATE_HOVERING_ID'] (state, hoveringId) {\n      state.hoveringId = hoveringId\n    },\n    ['SHOW_REVIEW'] (state){\n      state.regexViewState = true\n    },\n    ['UN_SHOW_REVIEW'] (state){\n      state.regexViewState = false\n    },\n    ['UPDATE_VISVIEW'] (state){\n      state.visViewState = (state.visViewState + 1) % 2\n    },\n    ['UPDATE_REVIEW_DATA'] (state){\n      state.reViewDataState = (state.reViewDataState+1)%2\n    },\n    ['UPDATE_TREEVIEW'] (state){\n      state.treeViewState = (state.treeViewState + 1)%2\n    },\n    ['UPDATE_NODE_LIST'] (state){\n      state.nodeListState = (state.nodeListState + 1)%2\n    },\n    ['UPDATE_CONNECTION'] (state, index){\n      state.curConnectionNode = index\n      state.connectionState = (state.connectionState + 1)%2\n    },\n    ['UPDATE_REGEX_CONTENT'](state){\n      state.regexContentState = (state.regexContentState + 1)%2\n    },\n\n    ['UPDATE_VIS_TREE'](state){\n      state.visTreeDataState = (state.visTreeDataState + 1)%2\n    },\n    ['DATA_QUERY_INDEX'](state, index){\n      state.queryIndex = index\n      state.queryStateIndex = (state.queryStateIndex + 1)%2\n    },\n    ['DATA_QUERY_REGEX'](state){\n      state.queryStateRegex = (state.queryStateRegex + 1)%2\n    },\n    ['DATA_QUERY_PAGE'](state, index){\n      state.queryPage = index\n      state.queryStatePage = (state.queryStatePage + 1)%2\n    },\n    ['DATA_QUERY_CODING'](state, reg_coding){\n      state.queryCoding = reg_coding\n      state.queryStateCoding = (state.queryStateCoding + 1) % 2\n    },\n    \n    ['UPDATE_VIS_PANEL'](state){\n      state.visPanelState = (state.visPanelState + 1)%2\n    },\n    ['UPDATE_TREE_LIST'](state){\n      state.treeListState = (state.treeListState + 1)%2\n    },\n    ['UPDATE_REG_PANEL'](state){\n      state.regPanelState = (state.regPanelState + 1)%2\n    },\n    ['UPDATE_CONDITION_STATE'](state, flag){\n      state.conditionState = flag\n    },\n    ['UPDATE_REPEAT_STATE'](state, flag){\n      state.repeatState = flag\n    }\n\n\n  },\n  actions: {\n\n  }\n})\n"]}]}
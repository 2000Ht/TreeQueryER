{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/SunBurst.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/components/SunBurst.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport _slicedToArray from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport bus from \"../brushed\";\nexport default {\n  name: 'SunBurst',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsonDataIn: Object,\n    jsonDataOut: Array\n  },\n  watch: {\n    width: function width() {\n      this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n    },\n    height: function height() {\n      this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n    },\n    jsonDataIn: function jsonDataIn() {\n      this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n    },\n    jsonDataOut: function jsonDataOut() {\n      this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n    },\n    treeViewState: function treeViewState() {\n      this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'treeViewState'])),\n  data: function data() {\n    return {\n      counter: 0,\n      scale: 400,\n      brushed_data: null\n    };\n  },\n  mounted: function mounted() {\n    this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n  },\n  methods: {\n    draw_sunburst: function draw_sunburst(jsonpath, jsondata, width, height) {\n      var needlable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      d3.select('#sunburst').selectAll('*').remove();\n      var data = jsondata; // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n      var min_width_height = Math.min(width, height);\n      var padding_r = min_width_height * (1 + min_width_height / this.scale) / this.scale;\n      var trbl = min_width_height * 20 / this.scale;\n      var margin = {\n        top: trbl,\n        trbl: trbl,\n        bottom: trbl,\n        left: trbl\n      };\n      var innerWidth = width - margin.left;\n      var innerHeight = height - margin.top;\n      var radius = Math.min(innerWidth, innerHeight) / 2;\n      var fillOpacity = 0.9;\n      var root = d3.partition().size([2 * Math.PI, radius])(d3.hierarchy(data).eachBefore(function (d) {\n        d.data.data.depth = d.depth;\n        d.data.data.height = d.height;\n        d.data.data.degree = d.children ? d.children.length : 0;\n      }) //.sum(d=>d.value)暂时按照是否有孩子加1的值当作value\n      .sum(function (d) {\n        return d.children ? 1 : 2;\n      }));\n      var RootDes = root.descendants();\n      var DimGray = d3.rgb(105, 105, 105);\n      var LightGray = d3.rgb(211, 211, 211);\n      var linear = d3.scaleLinear().domain([0, root.height]).range([0, 1]);\n      var color = d3.interpolate(DimGray, LightGray);\n      var arc = d3.arc().startAngle(function (d) {\n        return d.x0;\n      }).endAngle(function (d) {\n        return d.x1;\n      }).padAngle(function (d) {\n        return Math.min((d.x1 - d.x0) / 2, 2 * padding_r / radius);\n      }).padRadius(radius / 2).innerRadius(function (d) {\n        return d.y0;\n      }).outerRadius(function (d) {\n        return d.y1 - padding_r;\n      });\n      var svg = d3.select(this.$el).select('#sunburst').attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\").attr(\"font-family\", \"sans-serif\");\n      var g = svg.append('g').attr('transform', \"translate(\".concat(width / 2, \", \").concat(height / 2, \")\"));\n      g.append('style').text(\"\\n            .highlight-sub-active {\\n              stroke: steelblue;\\n              stroke-opacity: 1;\\n              stroke-width: 1.5px;\\n            }\\n          \");\n      var cell = g.selectAll('a').data(RootDes).join('a');\n      cell.append('path').attr('class', function (d) {\n        return d.data.name + \"sub\";\n      }).attr('d', arc).attr('fill-opacity', fillOpacity).attr('fill', function (d) {\n        return color(linear(d.depth));\n      }); // brush\n\n      g.call(brush, cell); //高亮jsonDataOut\n\n      processJsonDataOut = processJsonDataOut(this.jsonDataOut);\n      processJsonDataOut.forEach(function (ele) {\n        d3.select(\".\" + ele + \"sub\").classed(\"highlight-sub-active\", true);\n      });\n      processJsonDataOutToAttr = processJsonDataOutToAttr(this.jsonDataOut);\n      this.brushed_data = processJsonDataOutToAttr;\n      bus.$emit('brushed_data', this.brushed_data);\n\n      function mouseovered(active) {\n        return function (d, i) {\n          d3.select(this).classed(\"highlight-sub-active\", active);\n\n          for (var j = 0; j < Object.values(d.ancestors().map(function (d) {\n            return \".\" + d.data.name;\n          })).length; j++) {\n            d3.select(Object.values(d.ancestors().map(function (d) {\n              return \".\" + d.data.name + \"sub\";\n            }))[j]).classed(\"highlight-sub-active\", active);\n          }\n        };\n      } //jsonDataOut的数据格式为列表,每个元素是一个字典,每个字典代表一棵树或者一个节点\n      //统计所有节点的name并作处理,生成需要高亮的节点列表\n\n\n      function processJsonDataOut(tmpJsonDataOut) {\n        var need_hightlight_node = [];\n\n        if (tmpJsonDataOut != null && tmpJsonDataOut.length > 0) {\n          tmpJsonDataOut.forEach(function (ele) {\n            var tmpele = JSON.parse(JSON.stringify(ele));\n            need_hightlight_node = need_hightlight_node.concat(d3.hierarchy(tmpele).descendants().map(function (d) {\n              return d.data.name;\n            }));\n          });\n        }\n\n        return need_hightlight_node;\n      } //显示输出节点的属性\n\n\n      function processJsonDataOutToAttr(tmpJsonDataOut) {\n        var need_hightlight_node = [];\n\n        if (tmpJsonDataOut != null && tmpJsonDataOut.length > 0) {\n          var need_hightlight_node_name = processJsonDataOut;\n          console.log(need_hightlight_node_name);\n          console.log(root);\n          need_hightlight_node = RootDes.filter(function (d) {\n            return need_hightlight_node_name.includes(d.data.name);\n          }).map(function (d) {\n            return d.data;\n          });\n          console.log(need_hightlight_node);\n          return need_hightlight_node;\n        }\n\n        return need_hightlight_node;\n      }\n\n      function brush(cell) {\n        var brush = d3.brush().extent([[-width / 2, -height / 2], [width / 2, height / 2]]).on(\"start\", brushstarted).on(\"brush\", brushed).on(\"end\", brushended);\n        cell.call(brush);\n        var brushCell;\n        var selected = []; // Clear the previously-active brush, if any.\n\n        function brushstarted() {\n          if (brushCell !== this) {\n            d3.select(brushCell).call(brush.move, null);\n            brushCell = this;\n          }\n        } // Highlight the selected circles.\n\n\n        function brushed() {\n          if (d3.event.selection == null) return;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = selected[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var item = _step.value;\n              d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          this.brushed_data = null;\n\n          var _d3$event$selection = _slicedToArray(d3.event.selection, 2),\n              _d3$event$selection$ = _slicedToArray(_d3$event$selection[0], 2),\n              x0 = _d3$event$selection$[0],\n              y0 = _d3$event$selection$[1],\n              _d3$event$selection$2 = _slicedToArray(_d3$event$selection[1], 2),\n              x1 = _d3$event$selection$2[0],\n              y1 = _d3$event$selection$2[1];\n\n          selected = RootDes.filter(function (d) {\n            return x0 <= d.x0 && x1 >= d.x1 && y0 <= d.y0 && y1 >= d.y1;\n          }); //变暗jsonDataOut\n\n          processJsonDataOut.forEach(function (ele) {\n            d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", false);\n          });\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = selected[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _item = _step2.value;\n              d3.select('.' + _item.data.name + 'sub').classed(\"highlight-sub-active\", true);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } // If the brush is empty, select all circles.\n\n\n        function brushended() {\n          if (d3.event.selection != null) {\n            this.brushed_data = selected.map(function (d) {\n              return d.data;\n            });\n            bus.$emit('brushed_data', this.brushed_data);\n            return;\n          } else {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = selected[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var item = _step3.value;\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            this.brushed_data = null;\n            bus.$emit('brushed_data', this.brushed_data); //高亮jsonDataOut\n\n            processJsonDataOut.forEach(function (ele) {\n              d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", true);\n            });\n            this.brushed_data = processJsonDataOutToAttr;\n            bus.$emit('brushed_data', this.brushed_data);\n            return;\n          }\n        }\n      } // });\n\n    }\n  }\n};",{"version":3,"sources":["SunBurst.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"canvas\">\n    <svg id=\"sunburst\" :width=\"width\" :height=\"height\"></svg>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport bus from '../brushed'\nexport default {\n  name: 'SunBurst',\n  props: {\n    msg: String,\n    width: Number,\n    height: Number,\n    jsonpath: String,\n    jsonDataIn: Object,\n    jsonDataOut: Array,\n  },\n  watch: {\n      width: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      height: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataIn: function(){\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      jsonDataOut: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      },\n      treeViewState: function() {\n        this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n      }\n  },\n  computed: {\n    ...mapState([\n        'displayMode',\n        'treeViewState'\n      ])\n  },\n  data(){\n    return{\n      counter: 0,\n      scale: 400,\n      brushed_data: null,\n    }\n  },\n  mounted() {\n    this.draw_sunburst(this.jsonpath, this.jsonDataIn, this.width, this.height, 0);\n  },\n  methods:{\n    draw_sunburst: function(jsonpath, jsondata, width, height, needlable=false) {\n\n      d3.select('#sunburst').selectAll('*').remove();\n\n      let data = jsondata\n\n      // d3.json(jsonpath)\n      //   .then( (data) =>{\n\n          let min_width_height = Math.min(width, height);\n          let padding_r = (min_width_height *(1+min_width_height/this.scale)) / this.scale;\n\n          let trbl = (min_width_height * 20) / this.scale;\n          let margin = { top: trbl, trbl: trbl, bottom: trbl, left: trbl };\n          let innerWidth = width - margin.left;\n          let innerHeight = height - margin.top;\n\n          let radius = Math.min(innerWidth, innerHeight)/2;\n          let fillOpacity = 0.9;\n\n          let root = d3.partition().size([2*Math.PI, radius]) (\n            d3.hierarchy(data)\n              .eachBefore(d=>{\n                d.data.data.depth = d.depth; \n                d.data.data.height = d.height;\n                d.data.data.degree = d.children ? d.children.length : 0\n              })\n              //.sum(d=>d.value)暂时按照是否有孩子加1的值当作value\n              .sum( d=> d.children ? 1 : 2 )\n          );\n          let RootDes = root.descendants()\n\n          let DimGray = d3.rgb(105,105,105)\n          let LightGray = d3.rgb(211,211,211)\n          let linear = d3.scaleLinear().domain([0, root.height]).range([0, 1])\n          let color = d3.interpolate(DimGray, LightGray)\n\n          const arc = d3.arc()\n            .startAngle(d=>d.x0)\n            .endAngle(d=>d.x1)\n            .padAngle(d=>Math.min((d.x1 - d.x0)/2, 2 * padding_r / radius))\n            .padRadius(radius / 2)\n            .innerRadius(d=>d.y0)\n            .outerRadius(d=>d.y1 - padding_r);\n\n          const svg = d3.select(this.$el)\n            .select('#sunburst')\n            .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\")\n            .attr(\"font-family\", \"sans-serif\")\n\n          const g = svg.append('g')\n            .attr('transform', `translate(${width/2}, ${height/2})`);\n\n          g.append('style').text(`\n            .highlight-sub-active {\n              stroke: steelblue;\n              stroke-opacity: 1;\n              stroke-width: 1.5px;\n            }\n          `);\n\n          let cell = g\n            .selectAll('a')\n            .data(RootDes)\n            .join('a');\n\n          cell.append('path')\n            .attr('class', d=>d.data.name+\"sub\")\n            .attr('d', arc)\n            .attr('fill-opacity', fillOpacity)\n            .attr('fill',d=>color(linear(d.depth)));\n          \n          // brush\n          g.call(brush, cell);\n\n          //高亮jsonDataOut\n          processJsonDataOut = processJsonDataOut(this.jsonDataOut)\n          processJsonDataOut.forEach(ele=>{\n            d3.select(\".\" + ele + \"sub\").classed(\"highlight-sub-active\", true);\n          })\n          \n          processJsonDataOutToAttr = processJsonDataOutToAttr(this.jsonDataOut)\n          this.brushed_data = processJsonDataOutToAttr\n          bus.$emit('brushed_data', this.brushed_data)\n\n\n          function mouseovered(active){\n            return function(d, i){\n              d3.select(this).classed(\"highlight-sub-active\", active);\n              for(let j=0; j< Object.values(d.ancestors().map(d=>\".\"+d.data.name)).length; j++){\n                d3.select(Object.values(d.ancestors().map(d=>\".\"+d.data.name+\"sub\"))[j]).classed(\"highlight-sub-active\", active);\n              }\n            }\n          }\n          //jsonDataOut的数据格式为列表,每个元素是一个字典,每个字典代表一棵树或者一个节点\n          //统计所有节点的name并作处理,生成需要高亮的节点列表\n          function processJsonDataOut(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              tmpJsonDataOut.forEach(ele => {\n                let tmpele = JSON.parse(JSON.stringify(ele))\n                need_hightlight_node = need_hightlight_node.concat(d3.hierarchy(tmpele).descendants().map(d=>d.data.name))\n              })\n            }\n            return need_hightlight_node\n          }\n          //显示输出节点的属性\n          function processJsonDataOutToAttr(tmpJsonDataOut){\n            let need_hightlight_node = []\n            if(tmpJsonDataOut!=null && tmpJsonDataOut.length > 0){\n              let need_hightlight_node_name = processJsonDataOut\n              console.log(need_hightlight_node_name)\n              console.log(root)\n              need_hightlight_node = RootDes.filter(d=>need_hightlight_node_name.includes(d.data.name)).map(d=>d.data)\n              console.log(need_hightlight_node)\n              return need_hightlight_node\n            }\n            return need_hightlight_node\n          }\n\n          function brush(cell) {\n            const brush = d3.brush()\n              .extent([[-width/2, -height/2], [width/2, height/2]])\n              .on(\"start\", brushstarted)\n              .on(\"brush\", brushed)\n              .on(\"end\", brushended);\n            cell.call(brush);\n            let brushCell;\n            let selected = []\n            // Clear the previously-active brush, if any.\n            function brushstarted() {\n              if (brushCell !== this) {\n                d3.select(brushCell).call(brush.move, null);\n                brushCell = this;\n              }\n            }\n            // Highlight the selected circles.\n            function brushed() {\n              if (d3.event.selection == null) return;\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n              }\n              this.brushed_data = null;\n              const [[x0, y0], [x1, y1]] = d3.event.selection;\n              selected = RootDes.filter(\n                d => x0 <= d.x0\n                  && x1 >= d.x1\n                  && y0 <= d.y0\n                  && y1 >= d.y1);\n\n              //变暗jsonDataOut\n              processJsonDataOut.forEach(ele=>{\n                d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", false);\n              })\n              for(let item of selected) {\n                d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", true);\n              }\n            }\n            // If the brush is empty, select all circles.\n            function brushended() {\n              if (d3.event.selection != null){\n                this.brushed_data = selected.map(d=>d.data)\n                bus.$emit('brushed_data', this.brushed_data)\n                return;\n              }\n              else{\n                for(let item of selected) {\n                  d3.select('.' + item.data.name + 'sub').classed(\"highlight-sub-active\", false);\n                }\n                this.brushed_data = null\n                bus.$emit('brushed_data', this.brushed_data)\n\n                //高亮jsonDataOut\n                processJsonDataOut.forEach(ele=>{\n                  d3.select(\".\" + ele + 'sub').classed(\"highlight-sub-active\", true);\n                })\n                this.brushed_data = processJsonDataOutToAttr\n                bus.$emit('brushed_data', this.brushed_data)\n\n                return;\n              }\n              \n            }\n          }\n\n      // });\n\n    }\n  }\n}\n</script>"],"sourceRoot":"src/components"}]}
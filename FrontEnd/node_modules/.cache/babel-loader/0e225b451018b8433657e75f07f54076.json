{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/VisView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/VisView.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport RadialDendrogramTree from '@/components/RadialDendrogramTree.vue';\nimport RadialTree from '@/components/RadialTree.vue';\nimport NodeLinkTree from '@/components/NodelinkTree.vue';\nimport NodeLinkDendrogramTree from '@/components/NodeLinkDendrogramTree.vue';\nimport CirclePacking from '@/components/CirclePacking.vue';\nimport SunBurst from '@/components/SunBurst.vue';\nimport IciclePlot from '@/components/IciclePlot.vue';\nimport SliceDiceTreemap from '@/components/SliceDiceTreemap.vue';\nimport SquarifyTreemap from '@/components/SquarifyTreemap.vue';\nimport IPTP from '@/components/IndentedPixelTreePlots.vue';\nimport VoronoiTreemap from '@/components/VoronoiTreemap.vue';\nimport IndentationTree from '@/components/IndentationTree.vue';\nimport golbalVariable from '@/global';\nimport AttributeView from '@/views/AttributeView.vue';\nimport { getComponentKey } from '@/utils/componentkey.js';\nexport default {\n  name: 'VisView',\n  components: {\n    RadialTree: RadialTree,\n    RadialDendrogramTree: RadialDendrogramTree,\n    NodeLinkTree: NodeLinkTree,\n    NodeLinkDendrogramTree: NodeLinkDendrogramTree,\n    CirclePacking: CirclePacking,\n    SunBurst: SunBurst,\n    IciclePlot: IciclePlot,\n    SliceDiceTreemap: SliceDiceTreemap,\n    SquarifyTreemap: SquarifyTreemap,\n    IPTP: IPTP,\n    VoronoiTreemap: VoronoiTreemap,\n    IndentationTree: IndentationTree,\n    AttributeView: AttributeView\n  },\n  props: {},\n  data: function data() {\n    return {\n      // appName: \"Tree Recommendation\",\n      // operationArray: ['submit selection'],\n      // activeIndex: '',\n      // scaleWidthHeight: 250,\n      // loadingData: true,\n      width: null,\n      height: null,\n      jsonpath: null,\n      jsondata: null,\n      // loadingSelect: false,\n      // loadingSelectInfo: 'submit',\n      // treeList: ['CirclePacking'],\n      treeList: ['IPTP', 'IndentationTree', 'RadialTree', 'RadialDendrogramTree', 'NodeLinkTree', 'VoronoiTreemap', 'NodeLinkDendrogramTree', 'CirclePacking', 'SunBurst', 'IciclePlot', 'SliceDiceTreemap', 'SquarifyTreemap'],\n      //'IndentedTree'\n      styleObject: {\n        'width': this.width,\n        'height': this.height\n      },\n      selectedTreeVis: 'NodeLinkTree',\n      dropDownInList: [],\n      dropDownInTitle: \"null\",\n      treeDataInList: [],\n      // dropDownOutList: [],\n      // dropDownOutTitle: \"null\",\n      treeDataOutList: [],\n      treeDataOutAll: [],\n      jsonDataIn: null,\n      jsonDataOut: null,\n      dataInIndex: 0,\n      dataOutIndex: 0,\n      highLightFlag: false,\n      switchDisabled: true,\n      //临时的需要画出的全部数据\n      attr_tmp_path: 'hierarchicalData/draw.json',\n      //全部可视化属性的选项列表\n      options: null,\n      //选择的可视化属性的选项列表,初始默认为depth与height\n      vis_attrList: ['height', 'depth', 'degree'],\n      treeDataOutListOptions: [],\n      outListValue: [],\n      casderKey: 0,\n      hightLightIn: null,\n      hightLightOut: null,\n      unhightLightIn: null,\n      unhightLightOut: null,\n      backgroundFlag: null,\n      wholeTreeFlag: false,\n      treeInFlag: false,\n      treeOutFlag: false,\n      dataWholeTree: {},\n      dataTreeIn: [],\n      dataTreeOut: [],\n      dataBackGround: {\n        'data': null,\n        'type': null\n      },\n      dataHighLight: []\n    };\n  },\n  beforeMount: function beforeMount() {\n    // golbalVariable.highlight_2leaves = false\n    // this.width = golbalVariable.width\n    // this.height = golbalVariable.height\n    this.dataWholeTree = sysDatasetObj.returnInitData();\n  },\n  mounted: function mounted() {\n    this.width = this.$refs.visualization_static_container_ref.clientWidth - 20;\n    this.height = this.$refs.visualization_static_container_ref.clientHeight - 20; //生成全部可视化属性的选项列表\n    // this.options = this.getOptions(this.attr_tmp_path)\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    visViewState: function visViewState() {\n      this.dataWholeTree = sysDatasetObj.returnInitData(); //视图的默认状态为：In：all，out：null,wholeTree, 将所有的dataIn在dataInit中高亮\n\n      this.dropDownInList = [\"all\"];\n      this.dropDownInTitle = \"all\";\n      this.treeDataInList = sysDatasetObj.returnHierarchyDataIn(this.curRegexIndex);\n      this.treeDataOutListOptions = [{\n        value: 'null',\n        label: 'null'\n      }];\n      this.treeDataOutAll = sysDatasetObj.returnHierarchyDataOut(this.curRegexIndex);\n\n      for (var i = 0; i < this.treeDataInList.length; i++) {\n        if ('name' in this.treeDataInList[i]) this.dropDownInList.push('treeIn ' + (i + 1));\n      } //this.jsonDataIn = sysDatasetObj.returnInitData()\n      // this.jsonDataOut = this.treeDataInList\n      // this.dataBackGround = {\n      //   'data': this.dataWholeTree,\n      //   'type': 'wholeTree',\n      // }\n      // this.dataHighLight = [{\n      //     'data': this.treeDataInList,\n      //     'type': 'treeIn',\n      //   }\n      // ]\n      // this.dataTreeIn = this.treeDataInList\n      // this.dataTreeOut = []\n\n\n      this.options = this.getOptions(sysDatasetObj.returnInitData());\n      this.casderKey = (this.casderKey + 1) % 2;\n      this.backgroundFlag = 'wholeTree';\n      this.wholeTreeFlag = true;\n      this.treeInFlag = true;\n      this.treeOutFlag = true;\n      this.handleCommandIn(0); //this.UPDATE_TREEVIEW()\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'curRegex', 'regexCommitState', 'regexListState', 'curRegexIndex', 'visViewState'])),\n  methods: _objectSpread({}, mapMutations(['UPDATE_TREEVIEW']), {\n    RadialDendrogramTreeClick: function RadialDendrogramTreeClick() {\n      console.log(\"test\");\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'RadialDendrogramTree';\n    },\n    RadialTreeClick: function RadialTreeClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'RadialTree';\n    },\n    NodeLinkTreeClick: function NodeLinkTreeClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'NodeLinkTree';\n    },\n    NodeLinkDendrogramTreeClick: function NodeLinkDendrogramTreeClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'NodeLinkDendrogramTree';\n    },\n    CirclePackingClick: function CirclePackingClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'CirclePacking';\n    },\n    IciclePlotClick: function IciclePlotClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'IciclePlot';\n    },\n    SunBurstClick: function SunBurstClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'SunBurst';\n    },\n    SliceDiceTreemapClick: function SliceDiceTreemapClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'SliceDiceTreemap';\n    },\n    SquarifyTreemapClick: function SquarifyTreemapClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'SquarifyTreemap';\n    },\n    VoronoiTreemapClick: function VoronoiTreemapClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'VoronoiTreemap';\n    },\n    IndentationTreeClick: function IndentationTreeClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'IndentationTree';\n    },\n    IPTPClick: function IPTPClick() {\n      this.jsondata = this.curData;\n      this.selectedTreeVis = 'IPTP';\n    },\n    checkData: function checkData() {\n      if (this.curData) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    getOptions: function getOptions(DataIn) {\n      //仅仅获取最初数据中data属性值中的键值\n      var ans = [];\n      var data = Object.keys(d3.hierarchy(DataIn).eachBefore(function (d) {\n        d.data.data.depth = d.depth;\n        d.data.data.height = d.height;\n        d.data.data.degree = d.children ? d.children.length : 0;\n      }).descendants()[0].data.data);\n      data.forEach(function (ele) {\n        ans.push({\n          value: ele,\n          label: ele\n        });\n      });\n      return ans.sort(function (a, b) {\n        return a.value.localeCompare(b.value);\n      });\n    },\n    handleCommandIn: function handleCommandIn(command) {\n      this.dataInIndex = command;\n\n      if (command != 0) {\n        //当前dataIn不是all时,默认显示out：null，backgroud：wholeTree\n        this.dropDownInTitle = 'treeIn ' + command;\n        this.treeDataOutListOptions = [{\n          value: 'null',\n          label: 'null'\n        }];\n        this.treeDataOutList = this.treeDataOutAll[command - 1];\n\n        if (this.treeDataOutList && this.treeDataOutList.length >= 1) {\n          //如果dataOut中有值\n          var tmpItem = {\n            value: 'all',\n            label: 'all'\n          };\n          this.treeDataOutListOptions.push(tmpItem);\n\n          for (var i = 0; i < this.treeDataOutList.length; i++) {\n            if ('name' in this.treeDataOutList[i]) {\n              var _tmpItem = {\n                value: i,\n                label: 'treeOut ' + (i + 1)\n              };\n              this.treeDataOutListOptions.push(_tmpItem);\n            }\n          }\n        } else {// 如果dataOut中无值\n        }\n\n        if (this.treeDataOutListOptions.length > 1) {\n          this.outListValue = ['all'];\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = this.treeDataOutList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': [this.treeDataInList[command - 1]],\n            'type': 'treeIn'\n          }, {\n            'data': this.treeDataOutList,\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = [this.treeDataInList[command - 1]];\n          this.dataTreeOut = this.treeDataOutList;\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = true;\n          this.treeInFlag = true;\n          this.treeOutFlag = true;\n        } else {\n          this.outListValue = ['null'];\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = [this.treeDataInList[command - 1]];\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': [this.treeDataInList[command - 1]],\n            'type': 'treeIn'\n          }];\n          this.dataTreeIn = [this.treeDataInList[command - 1]];\n          this.dataTreeOut = [];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = false;\n          this.treeInFlag = false;\n          this.treeOutFlag = true;\n        }\n      } else {\n        //当前dataIn为all时，out：null, background:wholeTree\n        this.dropDownInTitle = 'all';\n        this.treeDataOutList = [];\n        this.treeDataOutListOptions = [{\n          value: 'null',\n          label: 'null'\n        }];\n        var flag = false; //用来标记treeOut中是否有值\n\n        var tmpIndex = 0;\n\n        for (var _i = 0; _i < this.treeDataOutAll.length; _i++) {\n          var _tmpItem2 = {\n            value: _i,\n            label: 'treeIn ' + (_i + 1),\n            children: []\n          };\n          var flag2 = false; //用来标记当前treeIn是否有treeOut\n\n          for (var j = 0; j < this.treeDataOutAll[_i].length; j++) {\n            flag2 = true;\n\n            if (!flag) {\n              flag = true;\n              var _tmpItem3 = {\n                value: 'all',\n                label: 'all'\n              };\n              this.treeDataOutListOptions.push(_tmpItem3);\n            }\n\n            this.treeDataOutList.push(this.treeDataOutAll[_i][j]);\n            var tmpItem2 = {\n              value: tmpIndex,\n              label: 'treeOut ' + (j + 1)\n            };\n\n            _tmpItem2['children'].push(tmpItem2);\n\n            tmpIndex = tmpIndex + 1;\n          }\n\n          if (flag2) {\n            this.treeDataOutListOptions.push(_tmpItem2);\n          }\n        }\n\n        if (!flag) {}\n\n        if (this.treeDataOutListOptions.length > 1) {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = this.treeDataOutList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': this.treeDataInList,\n            'type': 'treeIn'\n          }, {\n            'data': this.treeDataOutList,\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = this.treeDataInList;\n          this.dataTreeOut = this.treeDataOutList;\n          this.outListValue = ['all'];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = true;\n          this.treeInFlag = true;\n          this.treeOutFlag = true;\n        } else {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = this.treeDataInList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': this.treeDataInList,\n            'type': 'treeIn'\n          }];\n          this.dataTreeIn = this.treeDataInList;\n          this.dataTreeOut = [];\n          this.outListValue = ['null'];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = true;\n          this.treeInFlag = true;\n          this.treeOutFlag = true;\n        }\n      }\n\n      this.casderKey = (this.casderKey + 1) % 2;\n      this.UPDATE_TREEVIEW();\n    },\n    handleCommandOut: function handleCommandOut(command) {\n      this.dataOutIndex = command;\n\n      if (this.dataInIndex == 0) {\n        // In为all\n        if (this.outListValue[0] == 'null') {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = this.treeDataInList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': this.treeDataInList,\n            'type': 'treeIn'\n          }];\n          this.dataTreeIn = this.treeDataInList;\n          this.dataTreeOut = [];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = true;\n          this.treeInFlag = true;\n          this.treeOutFlag = true;\n        } else if (this.outListValue[0] == 'all') {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = this.treeDataOutList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': this.treeDataInList,\n            'type': 'treeIn'\n          }, {\n            'data': this.treeDataOutList,\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = this.treeDataInList;\n          this.dataTreeOut = this.treeDataOutList;\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = true;\n          this.treeInFlag = true;\n          this.treeOutFlag = true;\n        } else {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          var tmpIndex = this.outListValue[1];\n          this.jsonDataOut = [this.treeDataOutList[tmpIndex]];\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': this.treeDataInList,\n            'type': 'treeIn'\n          }, {\n            'data': [this.treeDataOutList[tmpIndex]],\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = this.treeDataInList;\n          this.dataTreeOut = [this.treeDataOutList[tmpIndex]];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = false;\n          this.treeInFlag = true;\n          this.treeOutFlag = false;\n        }\n      } else {\n        if (this.outListValue[0] == 'null') {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          this.jsonDataOut = [this.treeDataInList[this.dataInIndex - 1]];\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': [this.treeDataInList[this.dataInIndex - 1]],\n            'type': 'treeIn'\n          }];\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex - 1]];\n          this.dataTreeOut = [];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = false;\n          this.treeInFlag = false;\n          this.treeOutFlag = true;\n        } else if (this.outListValue[0] == 'all') {\n          this.jsonDataIn = this.treeDataInList[this.dataInIndex - 1];\n          this.jsonDataOut = this.treeDataOutList;\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': [this.treeDataInList[this.dataInIndex - 1]],\n            'type': 'treeIn'\n          }, {\n            'data': this.treeDataOutList,\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex - 1]];\n          this.dataTreeOut = this.treeDataOutList;\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = false;\n          this.treeInFlag = false;\n          this.treeOutFlag = true;\n        } else {\n          this.jsonDataIn = sysDatasetObj.returnInitData();\n          var _tmpIndex = this.outListValue[0];\n          this.jsonDataOut = [this.treeDataOutList[_tmpIndex]];\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree'\n          };\n          this.dataHighLight = [{\n            'data': [this.treeDataInList[this.dataInIndex - 1]],\n            'type': 'treeIn'\n          }, {\n            'data': [this.treeDataOutList[_tmpIndex]],\n            'type': 'treeOut'\n          }];\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex - 1]];\n          this.dataTreeOut = [this.treeDataOutList[_tmpIndex]];\n          this.backgroundFlag = 'wholeTree';\n          this.wholeTreeFlag = false;\n          this.treeInFlag = false;\n          this.treeOutFlag = false;\n        }\n      }\n\n      this.UPDATE_TREEVIEW();\n    },\n    backgroundChange: function backgroundChange() {\n      if (this.backgroundFlag == 'wholeTree') {\n        this.jsonDataIn = sysDatasetObj.returnInitData();\n        this.jsonDataOut = this.dataTreeOut;\n        this.dataBackGround = {\n          'data': sysDatasetObj.returnInitData(),\n          'type': 'wholeTree'\n        };\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeIn)),\n          'type': 'treeIn'\n        }, {\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }];\n      } else if (this.backgroundFlag == 'treeIn') {\n        this.jsonDataIn = this.dataTreeIn[0];\n        this.jsonDataOut = this.dataTreeOut;\n        this.dataBackGround = {\n          'data': JSON.parse(JSON.stringify(this.dataTreeIn[0])),\n          'type': 'treeIn'\n        };\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }];\n        console.log(\"\\dataBackGround\\n\", this.dataBackGround);\n        console.log(\"\\ndataHighLight\\n\", this.dataHighLight);\n      } else if (this.backgroundFlag == 'treeOut') {\n        this.jsonDataIn = this.dataTreeOut[0];\n        this.jsonDataOut = this.dataTreeOut;\n        this.dataBackGround = {\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut[0])),\n          'type': 'treeOut'\n        };\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }];\n      } // console.log(\"\\ndataBackGround\\n\", this.dataBackGround)\n      // console.log(\"dataHighLight\\n\", this.dataHighLight)\n\n\n      this.UPDATE_TREEVIEW();\n    }\n  })\n};",{"version":3,"sources":["VisView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"vis-view\">\n      <div class = \"vis-content-container\">\n        <div class = \"visualization-component\" >\n            <!-- <el-button class=\"RadialDendrogramTree-image\" @click=\"RadialDendrogramTreeClick()\">RadialDend-Tree</el-button>\n            <el-button class=\"RadialTree-image\" @click=\"RadialTreeClick()\">RadialTree</el-button>\n            \n            <el-button class=\"NodeLinkTree-image\" icon=\"myicon el-icon-nodelinktree\" @click=\"NodeLinkTreeClick()\"></el-button>\n\n            <el-button class=\"NodeLinkDendrogramTree-image\" @click=\"NodeLinkDendrogramTreeClick()\">NodeLinkDend-Tree</el-button>\n            <el-button class=\"IciclePlot-image\" @click=\"IciclePlotClick()\">IciclePlot</el-button>\n            <el-button class=\"IndentationTree-image\" @click=\"IndentationTreeClick()\">IndentationTree</el-button>\n            <el-button class=\"IPTP-image\" @click=\"IPTPClick()\">IPTP</el-button> -->\n            <div class=\"hierarchy-visualizations\">\n              <div class=\"hierarchy-visualizations-container\">\n                <span class=\"hierarchy-panel-header\">\n                  Tree Vis\n                </span>\n              </div>\n            </div>\n            <div class=\"hierarchy-visualizations-buttons\">\n              <div class=\"quarter-div el-icon-nodelinktree\" @click=\"NodeLinkTreeClick()\"></div>\n              <div class=\"quarter-div el-icon-nodelinkdendrogramtree\" @click=\"NodeLinkDendrogramTreeClick()\"></div>\n              <div class=\"quarter-div el-icon-radialtree\" @click=\"RadialTreeClick()\"></div>\n              <div class=\"quarter-div el-icon-radialdendrogramtree\" @click=\"RadialDendrogramTreeClick()\"></div>\n              <div class=\"quarter-div el-icon-icicleplot\" @click=\"IciclePlotClick()\"></div>\n              <div class=\"quarter-div el-icon-indentationtree\" @click=\"IndentationTreeClick()\"></div>\n              <div class=\"quarter-div el-icon-iptp\" @click=\"IPTPClick()\"></div>\n            </div>\n        </div>\n        <div class=\"visualization-static-container\" ref=\"visualization_static_container_ref\">\n          <div class=\"vis-view-btns\">\n            <div class=\"vis-view-btns-container\">\n                <span class=\"panel-header\">\n                  Visualization Panel\n                </span>\n                <el-divider direction=\"vertical\"></el-divider>\n                <span class=\"configuration-container\">\n                  <span class=\"dataInText\">In:</span>\n                  <!-- <span class=\"highLightText\">HighLight:</span> -->\n                  <el-dropdown size=\"mini\" split-button type=\"primary\" @command=\"handleCommandIn\" class=\"dropDownBtnIn\">\n                    {{dropDownInTitle}}\n                    <el-dropdown-menu slot=\"dropdown\">\n                      <el-dropdown-item v-for=\"(item, index) in dropDownInList\" :key=\"item\" :command=\"index\">{{item}}</el-dropdown-item>\n                    </el-dropdown-menu>\n                  </el-dropdown>\n                </span>\n                <!-- <el-dropdown size=\"mini\" split-button type=\"primary\" @command=\"handleCommandOut\" class=\"dropDownBtnOut\">\n                  {{dropDownOutTitle}}\n                  <el-dropdown-menu slot=\"dropdown\">\n                    <el-dropdown-item v-for=\"(item, index) in dropDownOutList\" :key=\"item\" :command=\"index\">{{item}}</el-dropdown-item>\n                  </el-dropdown-menu>\n                </el-dropdown> -->\n                <span class=\"configuration-container\">\n                  <span class=\"dataOutText\">Out:</span>\n                  <el-cascader\n                      class=\"dropDownBtnOut\"\n                      v-model=\"outListValue\"\n                      :options=\"treeDataOutListOptions\"\n                      @change=\"handleCommandOut\"\n                      placeholder = \"\"\n                      :key = \"casderKey\">\n                  </el-cascader>\n                </span>\n                <span class=\"configuration-container\">\n                  <span class=\"dataOutText\">Underlying Data:</span>\n                  <el-radio-group v-model=\"backgroundFlag\" class=\"highLightChoose\" @change=\"backgroundChange()\">\n                    <el-radio :label=\"'wholeTree'\" :disabled=\"wholeTreeFlag\">wholeTree</el-radio>\n                    <el-radio :label=\"'treeIn'\" :disabled=\"treeInFlag\">treeIn</el-radio>\n                    <el-radio :label=\"'treeOut'\" :disabled=\"treeOutFlag\">treeOut</el-radio>\n                  </el-radio-group>\n                </span>\n                <!-- <el-switch\n                  class=\"switchBtn\"\n                  :disabled=\"switchDisabled\"\n                  @change=\"switchCallBack()\"\n                  v-model=\"highLightFlag\"\n                  active-color=\"#409eff\"\n                  inactive-color=\"#dcdfe6\">\n                </el-switch> -->\n            </div>\n          </div>\n          <div class=\"visualization-container\">\n\n            <div class=\"grid-content bg-purple\">\n\n                <NodeLinkTree v-if=\"selectedTreeVis === 'NodeLinkTree'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></NodeLinkTree>\n                \n                <RadialDendrogramTree v-if=\"selectedTreeVis === 'RadialDendrogramTree'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></RadialDendrogramTree>\n\n                <RadialTree v-if=\"selectedTreeVis === 'RadialTree'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></RadialTree>\n\n                <!-- <div  v-if=\"selectedTreeVis === 'NodeLinkTree'\">\n                <NodeLinkTree :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></NodeLinkTree>\n                </div> -->\n\n                <NodeLinkDendrogramTree v-if=\"selectedTreeVis === 'NodeLinkDendrogramTree'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></NodeLinkDendrogramTree>\n\n                <!-- <CirclePacking v-if=\"selectedTreeVis === 'CirclePacking'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></CirclePacking> -->\n                <!-- CirclePacking -->\n\n                <IciclePlot v-if=\"selectedTreeVis === 'IciclePlot'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></IciclePlot>\n\n                <!-- <SunBurst v-if=\"selectedTreeVis === 'SunBurst'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></SunBurst> -->\n\n                <!-- <SliceDiceTreemap v-if=\"selectedTreeVis === 'SliceDiceTreemap'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></SliceDiceTreemap> -->\n                <!-- SliceDiceTreemap -->\n\n                <!-- <SquarifyTreemap v-if=\"selectedTreeVis === 'SquarifyTreemap'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></SquarifyTreemap> -->\n\n                <!-- <VoronoiTreemap v-if=\"selectedTreeVis === 'VoronoiTreemap'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></VoronoiTreemap> -->\n                <!-- VoronoiTreemap -->\n\n                <IndentationTree v-if=\"selectedTreeVis === 'IndentationTree'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></IndentationTree>\n\n                <IPTP v-if=\"selectedTreeVis === 'IPTP'\" :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :width=\"width\" :height=\"height\"></IPTP>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"vis-attribute-view\">\n          <div class=\"select-attrs-vis\">\n            <div class=\"select-attrs-vis-container\">\n              <span class=\"attrs-vis-panel-header\">Attributes:</span>\n              <el-select size=\"mini\" v-model=\"vis_attrList\" multiple collapse-tags style=\"margin-left: 20px;\" placeholder=\"select\">\n                <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n                </el-option>\n              </el-select>\n            </div>\n          </div>\n          \n          <div class=\"select-attr-show\">\n            <AttributeView :dataBackGround=\"dataBackGround\" :dataHighLight=\"dataHighLight\" :vis_attrList=\"vis_attrList\"></AttributeView>\n          </div>\n        </div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\nimport RadialDendrogramTree from '@/components/RadialDendrogramTree.vue'\nimport RadialTree from '@/components/RadialTree.vue'\nimport NodeLinkTree from '@/components/NodelinkTree.vue'\nimport NodeLinkDendrogramTree from '@/components/NodeLinkDendrogramTree.vue'\nimport CirclePacking from '@/components/CirclePacking.vue'\nimport SunBurst from '@/components/SunBurst.vue'\nimport IciclePlot from '@/components/IciclePlot.vue'\nimport SliceDiceTreemap from '@/components/SliceDiceTreemap.vue'\nimport SquarifyTreemap from '@/components/SquarifyTreemap.vue'\nimport IPTP from '@/components/IndentedPixelTreePlots.vue'\nimport VoronoiTreemap from '@/components/VoronoiTreemap.vue'\nimport IndentationTree from '@/components/IndentationTree.vue'\nimport golbalVariable from '@/global'\nimport AttributeView from '@/views/AttributeView.vue'\nimport { getComponentKey } from '@/utils/componentkey.js'\n\nexport default {\n  name: 'VisView',\n  components: {\n    RadialTree,\n    RadialDendrogramTree,\n    NodeLinkTree,\n    NodeLinkDendrogramTree,\n    CirclePacking,\n    SunBurst,\n    IciclePlot,\n    SliceDiceTreemap,\n    SquarifyTreemap,\n    IPTP,\n    VoronoiTreemap,\n    IndentationTree,\n    AttributeView\n  },\n  props: {\n  },\n  data() {\n    return {\n      // appName: \"Tree Recommendation\",\n      // operationArray: ['submit selection'],\n      // activeIndex: '',\n      // scaleWidthHeight: 250,\n      // loadingData: true,\n      width: null,\n      height: null,\n      jsonpath: null,\n      jsondata: null,\n      // loadingSelect: false,\n      // loadingSelectInfo: 'submit',\n      // treeList: ['CirclePacking'],\n      treeList: ['IPTP','IndentationTree', 'RadialTree', 'RadialDendrogramTree', 'NodeLinkTree', 'VoronoiTreemap', 'NodeLinkDendrogramTree', 'CirclePacking', 'SunBurst', 'IciclePlot', 'SliceDiceTreemap', 'SquarifyTreemap'], //'IndentedTree'\n      styleObject: {'width': this.width, 'height': this.height},\n      selectedTreeVis: 'NodeLinkTree',\n      dropDownInList: [],\n      dropDownInTitle: \"null\",\n      treeDataInList: [],\n      \n      // dropDownOutList: [],\n      // dropDownOutTitle: \"null\",\n      \n      treeDataOutList: [],\n\n      treeDataOutAll: [],\n\n      jsonDataIn: null,\n      jsonDataOut: null,\n\n      dataInIndex: 0,\n      dataOutIndex: 0,\n      highLightFlag: false,\n      switchDisabled: true,\n\n      //临时的需要画出的全部数据\n      attr_tmp_path: 'hierarchicalData/draw.json',\n      //全部可视化属性的选项列表\n      options: null,\n      //选择的可视化属性的选项列表,初始默认为depth与height\n      vis_attrList:['height','depth','degree'],\n\n      treeDataOutListOptions:[],\n      outListValue: [],\n      casderKey: 0,\n\n      hightLightIn: null,\n      hightLightOut: null,\n      unhightLightIn: null,\n      unhightLightOut: null,\n\n      backgroundFlag: null,\n\n      wholeTreeFlag: false,\n      treeInFlag: false,\n      treeOutFlag: false,\n\n      dataWholeTree: {},\n      dataTreeIn: [],\n      dataTreeOut: [],\n\n      dataBackGround: {'data':null, 'type':null},\n      dataHighLight:[]\n    }\n  },\nbeforeMount: function() {\n    // golbalVariable.highlight_2leaves = false\n    // this.width = golbalVariable.width\n    // this.height = golbalVariable.height\n    this.dataWholeTree = sysDatasetObj.returnInitData()\n\n  },\n  mounted() {\n    this.width = this.$refs.visualization_static_container_ref.clientWidth - 20\n    this.height = this.$refs.visualization_static_container_ref.clientHeight - 20\n    //生成全部可视化属性的选项列表\n    // this.options = this.getOptions(this.attr_tmp_path)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visViewState: function() {\n        this.dataWholeTree = sysDatasetObj.returnInitData()\n        //视图的默认状态为：In：all，out：null,wholeTree, 将所有的dataIn在dataInit中高亮\n        this.dropDownInList = [\"all\"]\n        this.dropDownInTitle = \"all\"\n        this.treeDataInList = sysDatasetObj.returnHierarchyDataIn(this.curRegexIndex)\n        \n        this.treeDataOutListOptions = [{\n            value: 'null',\n            label: 'null',\n          },\n        ]\n        this.treeDataOutAll = sysDatasetObj.returnHierarchyDataOut(this.curRegexIndex)\n\n        for(let i=0; i<this.treeDataInList.length; i++){\n          if('name' in this.treeDataInList[i])\n            this.dropDownInList.push('treeIn ' + (i+1))\n        }\n\n        //this.jsonDataIn = sysDatasetObj.returnInitData()\n        // this.jsonDataOut = this.treeDataInList\n\n        // this.dataBackGround = {\n        //   'data': this.dataWholeTree,\n        //   'type': 'wholeTree',\n        // }\n        // this.dataHighLight = [{\n        //     'data': this.treeDataInList,\n        //     'type': 'treeIn',\n        //   }\n        // ]\n        // this.dataTreeIn = this.treeDataInList\n        // this.dataTreeOut = []\n\n        this.options = this.getOptions(sysDatasetObj.returnInitData())\n        \n\n        this.casderKey = (this.casderKey + 1)%2\n        this.backgroundFlag = 'wholeTree'\n        this.wholeTreeFlag = true\n        this.treeInFlag = true\n        this.treeOutFlag = true\n        this.handleCommandIn(0)\n        //this.UPDATE_TREEVIEW()\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'curRegex',\n      'regexCommitState',\n      'regexListState',\n      'curRegexIndex',\n      'visViewState',\n    ]),\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_TREEVIEW'\n    ]),\n    RadialDendrogramTreeClick(){\n      console.log(\"test\")\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'RadialDendrogramTree'\n    },\n    RadialTreeClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'RadialTree'\n    },\n    NodeLinkTreeClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'NodeLinkTree'\n    },\n    NodeLinkDendrogramTreeClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'NodeLinkDendrogramTree'\n    },\n    CirclePackingClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'CirclePacking'\n    },\n    IciclePlotClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'IciclePlot'\n    },\n    SunBurstClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'SunBurst'\n    },\n    SliceDiceTreemapClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'SliceDiceTreemap'\n    },\n    SquarifyTreemapClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'SquarifyTreemap'\n    },\n    VoronoiTreemapClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'VoronoiTreemap'\n    },\n    IndentationTreeClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'IndentationTree'\n    },\n    IPTPClick(){\n        this.jsondata = this.curData\n        this.selectedTreeVis = 'IPTP'\n    },\n    checkData(){\n        if(this.curData){\n            return true\n        }\n        else{\n            return false\n        }\n    },\n    getOptions: function(DataIn){\n      //仅仅获取最初数据中data属性值中的键值\n      let ans = []\n      let data = Object.keys(d3.hierarchy(DataIn)\n        .eachBefore(d=>{\n          d.data.data.depth = d.depth; \n          d.data.data.height = d.height;\n          d.data.data.degree = d.children ? d.children.length : 0\n        })\n        .descendants()[0].data.data)\n      data.forEach(ele=>{\n        ans.push({value:ele, label:ele})\n      })\n      return ans.sort((a,b)=>{return a.value.localeCompare(b.value);})\n    },\n    handleCommandIn(command) {\n      this.dataInIndex = command\n      if(command != 0){ //当前dataIn不是all时,默认显示out：null，backgroud：wholeTree\n        this.dropDownInTitle = 'treeIn ' + command\n        this.treeDataOutListOptions = [{\n            value: 'null',\n            label: 'null',\n          },\n        ]\n        this.treeDataOutList = this.treeDataOutAll[command-1]\n        if(this.treeDataOutList && this.treeDataOutList.length >= 1){ //如果dataOut中有值\n          let tmpItem = {\n            value: 'all',\n            label: 'all',\n          }\n          this.treeDataOutListOptions.push(tmpItem)\n\n          for(let i=0; i<this.treeDataOutList.length; i++){\n            if('name' in this.treeDataOutList[i]){\n              let tmpItem = {\n                value: i,\n                label: 'treeOut ' + (i+1),\n              }\n              this.treeDataOutListOptions.push(tmpItem)\n            }\n          }\n        }\n        else{ // 如果dataOut中无值\n\n        }\n\n        if(this.treeDataOutListOptions.length > 1){\n          \n          this.outListValue = ['all']\n\n          this.jsonDataIn =  sysDatasetObj.returnInitData()\n          this.jsonDataOut = this.treeDataOutList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': [this.treeDataInList[command-1]],\n              'type': 'treeIn',\n            },{\n              'data': this.treeDataOutList,\n              'type': 'treeOut',\n            }\n          ]\n          this.dataTreeIn = [this.treeDataInList[command-1]]\n          this.dataTreeOut = this.treeDataOutList       \n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = true\n          this.treeInFlag = true\n          this.treeOutFlag = true \n        }\n        else{\n          this.outListValue = ['null']\n\n          this.jsonDataIn =  sysDatasetObj.returnInitData()\n          this.jsonDataOut = [this.treeDataInList[command-1]]\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': [this.treeDataInList[command-1]],\n              'type': 'treeIn',\n            }\n          ]\n          this.dataTreeIn = [this.treeDataInList[command-1]]\n          this.dataTreeOut = []       \n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = false\n          this.treeInFlag = false\n          this.treeOutFlag = true \n        }\n      }\n      else{ //当前dataIn为all时，out：null, background:wholeTree\n        this.dropDownInTitle = 'all'\n        this.treeDataOutList = []\n        this.treeDataOutListOptions = [{\n            value: 'null',\n            label: 'null',\n          },\n        ]\n        let flag = false //用来标记treeOut中是否有值\n        let tmpIndex = 0\n        for(let i=0; i<this.treeDataOutAll.length; i++){\n          let tmpItem={\n            value: i,\n            label: 'treeIn ' + (i+1),\n            children: []\n          }\n          let flag2 = false //用来标记当前treeIn是否有treeOut\n          for(let j=0; j<this.treeDataOutAll[i].length; j++){\n            flag2 = true\n            if(!flag){\n              flag = true\n              let tmpItem = {\n                value: 'all',\n                label: 'all',\n              }\n              this.treeDataOutListOptions.push(tmpItem)\n            }\n            this.treeDataOutList.push(this.treeDataOutAll[i][j])\n            let tmpItem2 = {\n              value: tmpIndex,\n              label: 'treeOut ' + (j+1),\n            }\n            tmpItem['children'].push(tmpItem2)\n            tmpIndex = tmpIndex+1\n          }\n          if(flag2){\n            this.treeDataOutListOptions.push(tmpItem)\n          }\n        }\n        if(!flag){\n\n        }\n        if(this.treeDataOutListOptions.length > 1){\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          this.jsonDataOut = this.treeDataOutList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': this.treeDataInList,\n              'type': 'treeIn',\n            },{\n              'data': this.treeDataOutList,\n              'type': 'treeOut',\n            }\n          ]\n          this.dataTreeIn = this.treeDataInList\n          this.dataTreeOut = this.treeDataOutList\n\n          this.outListValue = ['all']\n\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = true\n          this.treeInFlag = true\n          this.treeOutFlag = true\n        }\n        else{\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          this.jsonDataOut = this.treeDataInList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': this.treeDataInList,\n              'type': 'treeIn',\n            }\n          ]\n          this.dataTreeIn = this.treeDataInList\n          this.dataTreeOut = [] \n\n          this.outListValue = ['null']\n\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = true\n          this.treeInFlag = true\n          this.treeOutFlag = true\n        }\n      }\n      this.casderKey = (this.casderKey + 1)%2\n      this.UPDATE_TREEVIEW()\n    },\n    handleCommandOut(command) {\n      this.dataOutIndex = command\n      if(this.dataInIndex == 0){ // In为all\n        if(this.outListValue[0] == 'null'){\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          this.jsonDataOut = this.treeDataInList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': this.treeDataInList,\n              'type': 'treeIn',\n            }\n          ]\n          this.dataTreeIn = this.treeDataInList\n          this.dataTreeOut = [] \n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = true\n          this.treeInFlag = true\n          this.treeOutFlag = true\n        }\n        else if(this.outListValue[0] == 'all'){\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          this.jsonDataOut = this.treeDataOutList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': this.treeDataInList,\n              'type': 'treeIn',\n            },{\n              'data': this.treeDataOutList,\n              'type': 'treeOut',\n            },\n          ]\n          this.dataTreeIn = this.treeDataInList\n          this.dataTreeOut = this.treeDataOutList\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = true\n          this.treeInFlag = true\n          this.treeOutFlag = true\n\n        }\n        else{\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          let tmpIndex = this.outListValue[1]\n          this.jsonDataOut = [this.treeDataOutList[tmpIndex]]\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': this.treeDataInList,\n              'type': 'treeIn',\n            },{\n              'data': [this.treeDataOutList[tmpIndex]],\n              'type': 'treeOut',\n            },\n          ]\n          this.dataTreeIn = this.treeDataInList\n          this.dataTreeOut = [this.treeDataOutList[tmpIndex]]\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = false\n          this.treeInFlag = true\n          this.treeOutFlag = false\n        }\n      }\n      else{\n        if(this.outListValue[0] == 'null'){\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          this.jsonDataOut = [this.treeDataInList[this.dataInIndex-1]]      \n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': [this.treeDataInList[this.dataInIndex-1]],\n              'type': 'treeIn',\n            }\n          ]\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex-1]]\n          this.dataTreeOut = []\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = false\n          this.treeInFlag = false\n          this.treeOutFlag = true\n        }\n        else if(this.outListValue[0] == 'all'){\n          this.jsonDataIn = this.treeDataInList[this.dataInIndex-1]\n          this.jsonDataOut = this.treeDataOutList\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': [this.treeDataInList[this.dataInIndex-1]],\n              'type': 'treeIn',\n            },{\n              'data': this.treeDataOutList,\n              'type': 'treeOut',\n            }\n          ]\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex-1]]\n          this.dataTreeOut = this.treeDataOutList\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = false\n          this.treeInFlag = false\n          this.treeOutFlag = true\n        }\n        else{\n          this.jsonDataIn = sysDatasetObj.returnInitData()\n          let tmpIndex = this.outListValue[0]\n          this.jsonDataOut = [this.treeDataOutList[tmpIndex]]\n          this.dataBackGround = {\n            'data': sysDatasetObj.returnInitData(),\n            'type': 'wholeTree',\n          }\n          this.dataHighLight = [{\n              'data': [this.treeDataInList[this.dataInIndex-1]],\n              'type': 'treeIn',\n            },{\n              'data': [this.treeDataOutList[tmpIndex]],\n              'type': 'treeOut',\n            }\n          ]\n          this.dataTreeIn = [this.treeDataInList[this.dataInIndex-1]]\n          this.dataTreeOut = [this.treeDataOutList[tmpIndex]]\n          this.backgroundFlag = 'wholeTree'\n          this.wholeTreeFlag = false\n          this.treeInFlag = false\n          this.treeOutFlag = false\n        }\n      }\n      this.UPDATE_TREEVIEW()\n    },\n    backgroundChange(){\n      if(this.backgroundFlag == 'wholeTree'){\n        this.jsonDataIn = sysDatasetObj.returnInitData()\n        this.jsonDataOut = this.dataTreeOut\n        this.dataBackGround = {\n          'data': sysDatasetObj.returnInitData(),\n          'type': 'wholeTree',\n        }\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeIn)),\n          'type': 'treeIn'\n        },{\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }\n        ]\n      }\n      else if(this.backgroundFlag == 'treeIn'){\n        this.jsonDataIn = this.dataTreeIn[0]\n        this.jsonDataOut = this.dataTreeOut\n        this.dataBackGround = {\n          'data': JSON.parse(JSON.stringify(this.dataTreeIn[0])),\n          'type': 'treeIn'\n        }\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }]\n        console.log(\"\\dataBackGround\\n\", this.dataBackGround)\n        console.log(\"\\ndataHighLight\\n\", this.dataHighLight)\n      }\n      else if(this.backgroundFlag == 'treeOut'){\n        this.jsonDataIn = this.dataTreeOut[0]\n        this.jsonDataOut = this.dataTreeOut\n        this.dataBackGround = {\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut[0])),\n          'type': 'treeOut'\n        }\n        this.dataHighLight = [{\n          'data': JSON.parse(JSON.stringify(this.dataTreeOut)),\n          'type': 'treeOut'\n        }]\n      }\n      // console.log(\"\\ndataBackGround\\n\", this.dataBackGround)\n      // console.log(\"dataHighLight\\n\", this.dataHighLight)\n      this.UPDATE_TREEVIEW()\n    },\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n@vis-view-btns-height: 2rem;\n@vis-view-btns-lineheight: 1.8rem;\n\nhtml {\n  font-size: 100%;\n}\n.vis-view {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  position: absolute;\n  top: 0%;\n  bottom: 0%;\n  left: 0%;\n  right: 0%;\n  .vis-content-container {\n    position: absolute;\n    top: 0%;\n    left: 0%;\n    bottom: 0%;\n    right: 0%;\n    .visualization-component {\n      position: absolute;\n      top: 0%;\n      left: 0%;\n      right: 93%;\n      bottom: 0%;\n      justify-content: center;\n      // display: flex;\n      flex-direction: column;\n      border-right: 1px #ddd solid;\n      .hierarchy-visualizations{\n        position: absolute;\n        left: 0%;\n        right: 0%;\n        height: 2rem;\n        width: 100%;\n        border-bottom: 1px solid rgb(211, 210, 210);\n        .hierarchy-visualizations-container {\n          // display: flex;\n          flex-direction: row;\n          justify-content: center;\n          // padding-left: 1rem;\n          align-items: center;\n          padding-top: 6.6px;\n          .hierarchy-panel-header {\n            font-weight: bold;\n          }\n        }\n      }\n      .hierarchy-visualizations-buttons{\n        position: absolute;\n        top: @vis-view-btns-height;\n        width: 100%;\n        bottom: 0%;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        .quarter-div{\n          height: 45px;\n          width: 80px;\n          margin-top: 8px;\n          border: 1.4px dashed gray;\n        }\n      }\n    }\n    .visualization-static-container {\n      position: absolute;\n      top: 0%;\n      bottom: 0%;\n      left: 7%;\n      right: 20%;\n      // overflow-y: auto;\n      .vis-view-btns{\n        position: absolute;\n        left: 0%;\n        right: 0%;\n        height: @vis-view-btns-height;\n        width: 100%;\n        border-bottom: 1px solid gray;\n        .vis-view-btns-container {\n          display: flex;\n          flex-direction: row;\n          // justify-content: center;\n          padding-left: 1rem;\n          align-items: center;\n          // padding-top: 2px;\n          .panel-header {\n            font-weight: bold;\n          }\n          .configuration-container {\n            margin: 0px 10px;\n          }\n          .dataInText{\n            line-height: @vis-view-btns-lineheight;\n            // vertical-align: middle;\n            text-align: center;\n            font-size: 0.8rem;\n            font-weight: bold !important;\n            font-family: 'Avenir', Helvetica, Arial, sans-serif;\n            margin: 0px 15px;\n          }\n          .dropDownBtnIn{\n            /deep/.el-button--primary {\n              border-color: #DCDFE6 !important;\n              width: 60px !important;\n            }\n          }\n          .dataOutText{\n            line-height: @vis-view-btns-lineheight;\n            // vertical-align: middle;\n            text-align: center;\n            font-size: 0.8rem;\n            font-weight: bold !important;\n            font-family: 'Avenir', Helvetica, Arial, sans-serif;\n            margin: 0px 15px;\n          }\n          .dropDownBtnOut{\n            /deep/.el-input__inner{\n              height: 29px;\n              width: 130px;\n            }\n          }\n          .highLightChoose{\n            // padding-top: 0.5rem;\n            // line-height: @vis-view-btns-lineheight;\n            // vertical-align: middle;\n          }\n          .highLightText{\n            line-height: @vis-view-btns-lineheight;\n            vertical-align: middle;\n            text-align: center;\n            font-size: 0.8rem;\n            font-weight: bold !important;\n            font-family: 'Avenir', Helvetica, Arial, sans-serif;\n          }\n        }\n      }\n      .visualization-container {\n        position: absolute;\n        top: @vis-view-btns-height;\n        width: 100%;\n        bottom: 0%;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        .grid-content {\n          width: 100%;\n          height: 100%;\n          border-top: #cccccc 1px solid;\n          background: white;\n          position: relative;\n        }\n      }\n    }\n    .vis-attribute-view{\n      position: absolute;\n      top: 0%;\n      bottom: 0%;\n      left: 80%;\n      right: 0%;\n      border-left: 1px #ddd solid;\n      .select-attrs-vis {\n        position: absolute;\n        left: 0%;\n        right: 0%;\n        height: 2rem;\n        width: 100%;\n        border-bottom: 1px solid rgb(211, 210, 210);\n        .select-attrs-vis-container{\n          // display: flex;\n          flex-direction: row;\n          justify-content: center;\n          // padding-left: 1rem;\n          align-items: center;\n          padding-top: 2.5px;\n          .attrs-vis-panel-header {\n            font-weight: bold;\n          }\n\n        }\n      }\n    }\n  }\n}\n  .el-select {\n    display: inline-block;\n    position: relative;\n    top: 8%;\n    left: 0%;\n    // height: 2rem;\n  }\n  .el-header, .el-footer {\n    background-color: rgb(238, 241, 246);\n    color: #333;\n    text-align: center;\n    line-height: 60px;\n  }\n  \n  .el-aside {\n    background-color: rgb(238, 241, 246);\n    color: #333;\n    text-align: center;\n    line-height: 400px;\n    margin: 5px 0;\n    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  }\n  \n  .el-main {\n    background-color: #ffffff;\n    color: #333;\n    text-align: center;\n    line-height: 160px;\n    margin: 5px 0;\n    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  }\n  .el-button+.el-button {\n    margin-left: 0px;\n  }\n  .el-row {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n  .el-col {\n    border-radius: 4px;\n  }\n  .bg-purple-dark {\n    background: #99a9bf;\n  }\n  .bg-purple {\n    background: white;\n  }\n  .bg-purple-light {\n    background: #e5e9f2;\n  }\n  .grid-content-1 {\n    border-radius: 4px;\n    font-size: 45px;\n    // color: #FF7F50;\n    // color: black;\n    color: rgb(94, 94, 94);\n    // color: #5F9EA0;\n  }\n  .grid-content-2 {\n    border-radius: 4px;\n    font-size: 45px;\n    color: #4b78a5;\n  }\n  .row-bg {\n    padding: 10px 0;\n    background-color: #f9fafc;\n  }\n\n  /deep/.el-icon-nodelinktree{\n    background: url(../assets/treevis/nodelinktree.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-nodelinkdendrogramtree{\n    background: url(../assets/treevis/nodelinkdendrogramtree.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-radialtree{\n    background: url(../assets/treevis/radialtree.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-radialdendrogramtree{\n    background: url(../assets/treevis/radialdendrogramtree.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-icicleplot{\n    background: url(../assets/treevis/icicleplot.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-indentationtree{\n    background: url(../assets/treevis/indentationtree.png) center no-repeat;\n    background-size: cover;\n  }\n  /deep/.el-icon-iptp{\n    background: url(../assets/treevis/iptp.png) center no-repeat;\n    background-size: cover;\n  }\n\n</style>\n<style lang=\"less\">\n    @vis-view-btns-lineheight: 2rem;\n    .el-button--primary {\n      color: rgb(53, 51, 51) !important;\n      background-color: #ffffff !important;\n      border-color: #858484 !important;\n    }\n    .el-dropdown {\n      line-height: @vis-view-btns-lineheight !important;\n    }\n    .el-cascader {\n      line-height: @vis-view-btns-lineheight !important;\n    }\n    .el-input__icon {\n      line-height: @vis-view-btns-lineheight !important;\n    }\n    .el-radio {\n      margin-right: 10px;\n    }\n</style>\n\n\n"],"sourceRoot":"src/views"}]}
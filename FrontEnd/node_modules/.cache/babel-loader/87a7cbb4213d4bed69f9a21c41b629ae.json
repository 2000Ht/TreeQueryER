{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/RegRecommendationPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/views/RegRecommendationPanel.vue","mtime":1668606377110},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  name: 'RegRecommendPanel',\n  components: {},\n  props: {},\n  data: function data() {\n    return {\n      tmp_list: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      recommend_list: [],\n      reg_list: [],\n      key_list: [],\n      num: 10,\n      marks: {\n        0: '0',\n        5: '5',\n        10: '10',\n        15: '15',\n        20: '20'\n      },\n      similarity: true,\n      max_height: 0\n    };\n  },\n  beforeMount: function beforeMount() {},\n  mounted: function mounted() {},\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    regPanelState: function regPanelState() {\n      d3.select(this.$el).selectAll(\"svg\").remove();\n      var tmp_dict = sysDatasetObj.getRegDict();\n      console.log(\"tmp_dict\", tmp_dict);\n      this.reg_list = [];\n      this.key_list = [];\n      this.tmp_list = [];\n      var tmp_index = 0;\n\n      for (var key in tmp_dict) {\n        this.reg_list.push(tmp_dict[key]);\n        this.key_list.push(key);\n        this.tmp_list.push(tmp_index);\n        d3.select(this.$el).select(\".reg-list\").append(\"svg\").attr(\"id\", 'svg-' + tmp_index).attr(\"style\", 'position: relative; width: 100%; height: 100%;');\n        tmp_index += 1;\n      }\n\n      this.draw_reg_list();\n    },\n    visPanelState: function visPanelState() {}\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'visPanelState', 'regPanelState'])),\n  created: function created() {},\n  methods: _objectSpread({}, mapMutations(['DATA_QUERY_INDEX', 'DATA_QUERY_CODING']), {\n    compute_node_position1: function compute_node_position1(root) {\n      root['width'] = 25;\n      if (root['type'] == 'node') root['height'] = 25;else root['height'] = root['composition'].length * (25 + 5); // for(let comp of root['composition']){\n      //     if(comp['repeat'][0]!=1 || comp['repeat'][1]!=1){\n      //         root['width'] = 25 + 5\n      //     }\n      // }\n\n      if (root['children'].length == 0) {\n        root['box_width'] = root['width'];\n        return;\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = root['children'][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child_node = _step.value;\n          this.compute_node_position1(child_node);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var children_width = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = root['children'][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _child_node = _step2.value;\n          children_width += _child_node['box_width'] + 18;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      children_width -= 18;\n      root['box_width'] = children_width > root['width'] ? children_width : root['width'];\n      var relative_x = root['width'] / 2 - children_width / 2;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = root['children'][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _child_node2 = _step3.value;\n          _child_node2['relative_x'] = relative_x + _child_node2['box_width'] / 2 - _child_node2['width'] / 2;\n          relative_x += _child_node2['box_width'] + 18;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    },\n    compute_node_position2: function compute_node_position2(root) {\n      if (root['y'] + root['height'] > this.max_height) {\n        this.max_height = root['y'] + root['height'];\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = root['children'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var child_node = _step4.value;\n          child_node['x'] = root['x'] + child_node['relative_x'];\n          child_node['y'] = root['y'] + root['height'] + 15;\n          this.compute_node_position2(child_node);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    },\n    draw_reg_list: function draw_reg_list() {\n      var self = this;\n      self.max_height = 0;\n\n      for (var i = 0; i < self.reg_list.length; i++) {\n        var width = document.getElementById(\"svg-\" + i).clientWidth;\n        var reg = self.reg_list[i]['reg'];\n        var node_width = 25;\n        var node_margin = {\n          height: 10,\n          width: 10\n        };\n        reg['composition'] = [];\n        reg['x'] = width / 2 - node_width / 2;\n        reg['y'] = 10;\n        self.compute_node_position1(reg);\n        self.compute_node_position2(reg, width / 2 - node_width / 2);\n      }\n\n      var _loop = function _loop() {\n        var width = document.getElementById(\"svg-\" + i).clientWidth;\n        var height = self.max_height + 20;\n        console.log(\"height: \", height);\n        var reg = self.reg_list[i]['reg'];\n        d3.select(self.$el).select('#svg-' + i).selectAll('*').remove();\n        var svg = d3.select(self.$el).select('#svg-' + i).attr(\"style\", function () {\n          return \"width: \" + width + \" !important;\" + \"height: \" + height + \" !important;\";\n        });\n        self.draw_node(reg, svg);\n        svg.append(\"path\").attr('d', function () {\n          var x0 = width;\n          var y0 = 0;\n          var x1 = width;\n          var y1 = height;\n          return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1;\n        }).attr('style', 'stroke: #c4bbbb; stroke-width: 2px; fill: none;');\n        svg.append(\"text\").attr('x', width / 2).attr('y', height - 5).attr('font-size', '12px').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").text(function () {\n          return \"Num: \" + self.reg_list[i]['num'];\n        });\n        svg.append(\"rect\").attr(\"class\", \"rect-none\").attr(\"width\", width - 8).attr(\"height\", height - 1).attr(\"transform\", \"translate(4,1)\").attr(\"fill-opacity\", '0').attr(\"reg_coding\", self.key_list[i]).attr(\"style\", \"cursor: pointer;\").attr('stroke', '#f4606c').attr('stroke-opacity', '0').attr('stroke-dasharray', '4 2').attr('stroke-width', '1.5').on(\"click\", function () {\n          self.DATA_QUERY_CODING(this.getAttribute(\"reg_coding\"));\n          d3.selectAll('.rect-none').attr('fill-opacity', '0'); // this.setAttribute('stroke-opacity', '1')\n\n          this.setAttribute('fill-opacity', '0.1');\n        });\n      };\n\n      for (var i = 0; i < self.reg_list.length; i++) {\n        _loop();\n      }\n    },\n    draw_node: function draw_node(node, svg) {\n      var _this = this;\n\n      if (node['type'] == 'node') {\n        svg.append('rect').attr('class', 'unselectable title').attr('x', node['x']).attr('y', node['y']).attr('width', 25).attr('height', 25).attr('style', function () {\n          return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n        });\n\n        if ('nodeName' in node) {\n          if (node['nodeName'] == '.') {\n            svg.append('text').attr('class', 'new11').attr('x', node['x'] + 12.5).attr('y', node['y'] + 7.5).attr('fill', 'white').attr('font-size', '30').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n              return node['nodeName'];\n            });\n          } else {\n            svg.append('text').attr('class', 'new11').attr('x', node['x'] + 12.5).attr('y', node['y'] + 12.5 + 2).attr('fill', 'white').attr('font-size', '16').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n              return node['nodeName'];\n            });\n          }\n        }\n\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = node['children'][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var child_node = _step5.value;\n            this.draw_node(child_node, svg);\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      } else if (node['type'] == 'branch') {\n        (function () {\n          var curX = node['x'];\n          var curY = node['y'];\n          svg.append('path').attr('class', 'bPath').attr('d', function () {\n            var x0 = curX;\n            var y0 = curY + 5;\n            var x1 = curX + 12.5;\n            var y1 = curY;\n            var x2 = curX + 25;\n            var y2 = curY + 5;\n            return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1 + \" L \" + x2 + \" \" + y2;\n          }).attr('style', 'stroke: #c4bbbb; stroke-width: 1px; fill: none;');\n          svg.append('text').attr('x', curX).attr('y', curY - 4).attr('font-size', '9px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n            return node['repeat'][0];\n          });\n\n          if (node['repeat'][1] == '*') {\n            svg.append('text').attr('x', curX + 23).attr('y', curY - 4).attr('font-size', '12px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n              return node['repeat'][1];\n            });\n          } else {\n            svg.append('text').attr('x', curX + 23).attr('y', curY - 4).attr('font-size', '9px').attr('alignment-baseline', 'hanging').attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n              return node['repeat'][1];\n            });\n          }\n\n          curY += 5;\n\n          var _loop2 = function _loop2(i) {\n            if (node['composition'][i]['type'] == 'node') {\n              if ('notFlag' in node['composition'][i] && node['composition'][i]['notFlag']) {\n                svg.append('path').attr('d', function () {\n                  var x1 = curX - 4;\n                  var y1 = curY + 5;\n                  return \"M \" + x1 + \" \" + y1 + \"v \" + 27;\n                }).attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n                svg.append('circle').attr('cx', curX - 4).attr('cy', curY + 37).attr('r', '1').attr('style', 'stroke: #000000; stroke-width: 2px; fill: none;');\n              }\n\n              svg.append('rect').attr('class', 'unselectable title').attr('x', curX).attr('y', curY).attr('width', 25).attr('height', 25).attr('style', function () {\n                return \"stroke: #c4bbbb; !important;\" + \"fill: \" + node['composition'][i]['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n              });\n\n              if ('nodeName' in node['composition'][i]) {\n                if (node['composition'][i]['nodeName'] == '.') {\n                  svg.append('text').attr('class', 'new11').attr('x', curX + 12.5).attr('y', curY + 7.5).attr('fill', 'white').attr('font-size', '30').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                    return node['composition'][i]['nodeName'];\n                  });\n                } else {\n                  svg.append('text').attr('class', 'new11').attr('x', curX + 12.5).attr('y', curY + 12.5 + 2).attr('fill', 'white').attr('font-size', '16').attr('text-anchor', \"middle\").attr(\"alignment-baseline\", \"middle\").attr('class', 'unselectable title').text(function () {\n                    return node['composition'][i]['nodeName'];\n                  });\n                }\n              }\n\n              if (!(node['composition'][i]['repeat'][0] == 1 && node['composition'][i]['repeat'][1] == 1)) {\n                svg.append('path').attr('class', 'bPath').attr('d', function () {\n                  var x1 = curX + 25 + 2;\n                  var y1 = curY + 9;\n                  var x2 = curX + 25 + 2;\n                  var y2 = curY + 16;\n                  var r = 5;\n                  return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n                }).attr('style', 'stroke: #2c2c2c; stroke-width: 1px; fill: none;');\n                svg.append('path').attr('class', 'bPath').attr('d', function () {\n                  var x0 = curX + 25 + 2;\n                  var y0 = curY + 16;\n                  var x1 = x0 + 2.5;\n                  var y1 = y0 + 3;\n                  return \"M \" + x1 + \",\" + y1 + \" L \" + x0 + \",\" + y0;\n                }).attr('style', 'stroke: #2c2c2c; stroke-width: 1px; fill: none;');\n                svg.append('text').attr('x', curX + 25 + 4).attr('y', curY).attr('font-size', '7px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                  return node['composition'][i]['repeat'][0];\n                });\n\n                if (node['composition'][i]['repeat'][1] == '*') {\n                  svg.append('text').attr('x', curX + 25 + 4).attr('y', curY + 19).attr('font-size', '10px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                    return node['composition'][i]['repeat'][1];\n                  });\n                } else {\n                  svg.append('text').attr('x', curX + 25 + 4).attr('y', curY + 19).attr('font-size', '7px').attr('alignment-baseline', 'hanging').attr('font-weight', 'bold').attr('fill', '#2c2c2c').text(function () {\n                    return node['composition'][i]['repeat'][1];\n                  });\n                }\n              }\n\n              curY = curY + 20 + 5;\n            }\n          };\n\n          for (var i in node['composition']) {\n            _loop2(i);\n          }\n\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = node['children'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var _child_node3 = _step6.value;\n\n              _this.draw_node(_child_node3, svg);\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        })();\n      }\n\n      if (node['children'].length > 0) {\n        (function () {\n          var node_bottom_x = node['x'] + 12.5;\n          var node_bottom_y = node['y'] + node['height'];\n          svg.append('path').attr('d', function () {\n            var x0 = node_bottom_x;\n            var y0 = node_bottom_y;\n            var x1 = node_bottom_x;\n            var y1 = node_bottom_y + 7.5;\n            return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1;\n          }).attr('style', 'stroke: #c4bbbb; stroke-width: 1px; fill: none;');\n          var x_left = 10000;\n          var x_right = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            var _loop3 = function _loop3() {\n              var child_node = _step7.value;\n              svg.append('path').attr('d', function () {\n                var x0 = child_node['x'] + 12.5;\n                var y0 = node_bottom_y + 7.5;\n                var x1 = child_node['x'] + 12.5;\n                var y1 = node_bottom_y + 15;\n                x_left = x0 < x_left ? x0 : x_left;\n                x_right = x0 > x_right ? x0 : x_right;\n                return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1;\n              }).attr('style', 'stroke: #c4bbbb; stroke-width: 1px; fill: none;');\n            };\n\n            for (var _iterator7 = node['children'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              _loop3();\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          svg.append('path').attr('d', function () {\n            var x0 = x_left;\n            var y0 = node_bottom_y + 7.5;\n            var x1 = x_right;\n            var y1 = node_bottom_y + 7.5;\n            return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1;\n          }).attr('style', 'stroke: #c4bbbb; stroke-width: 1px; fill: none;');\n        })();\n      }\n    }\n  })\n};",{"version":3,"sources":["RegRecommendationPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"reg-recommend-panel-view\">\n    <span class=\"recommend-title\">Recommendation</span>\n    <!-- <span class=\"num-text\">Num</span>\n    <div class=\"num-slider\">\n        <el-slider v-model=\"num\" :step=\"5\" :min=\"0\" :max=\"20\"  :marks=\"marks\" show-stops></el-slider>\n    </div> -->\n    <div class=\"reg-list\">\n        <!-- <div v-for=\"reg in tmp_list\" :key=\"reg\" class=\"reg-item\"> -->\n            <!-- <svg v-bind:id=\"'svg-' + reg\" style=\"position: relative; width: 100%; height: 100%;\">\n            </svg> -->\n        <!-- </div> -->\n    \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RegRecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        reg_list: [],\n        key_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n        max_height: 0,\n      \n    }\n  },\n  beforeMount(){\n\n  },\n  mounted() {\n\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      regPanelState: function(){\n        d3.select(this.$el).selectAll(\"svg\").remove()\n        let tmp_dict = sysDatasetObj.getRegDict()\n        console.log(\"tmp_dict\", tmp_dict)\n        this.reg_list = []\n        this.key_list = []\n        this.tmp_list = []\n        let tmp_index = 0\n        for(let key in tmp_dict){\n            this.reg_list.push(tmp_dict[key])\n            this.key_list.push(key)\n            this.tmp_list.push(tmp_index)\n            d3.select(this.$el).select(\".reg-list\")\n                .append(\"svg\")\n                .attr(\"id\", 'svg-'+tmp_index)\n                .attr(\"style\", 'position: relative; width: 100%; height: 100%;')\n            tmp_index += 1\n        }\n\n        this.draw_reg_list()\n      },\n      visPanelState: function(){\n\n        \n      },\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'regPanelState'\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'DATA_QUERY_INDEX',\n        'DATA_QUERY_CODING'\n    ]),\n\n    compute_node_position1: function(root){\n        \n        root['width'] = 25\n        if(root['type'] == 'node')\n            root['height'] = 25\n        else\n            root['height'] = root['composition'].length * (25+5)\n        // for(let comp of root['composition']){\n        //     if(comp['repeat'][0]!=1 || comp['repeat'][1]!=1){\n        //         root['width'] = 25 + 5\n        //     }\n        // }\n        if(root['children'].length==0){\n            root['box_width'] = root['width']\n            return\n        }\n        for(let child_node of root['children']){\n            this.compute_node_position1(child_node)\n        } \n        let children_width = 0\n        for(let child_node of root['children']){\n            children_width += child_node['box_width'] + 18\n        }\n        children_width -= 18\n        root['box_width'] = children_width>root['width'] ? children_width : root['width']\n        let relative_x = root['width']/2 - children_width/2\n        for(let child_node of root['children']){\n            child_node['relative_x'] = relative_x + child_node['box_width']/2 - child_node['width']/2\n            relative_x += child_node['box_width'] + 18\n        }\n    },\n\n    compute_node_position2: function(root){\n        if(root['y'] + root['height'] > this.max_height){\n            this. max_height = root['y'] + root['height']\n        }\n        for(let child_node of root['children']){\n            child_node['x'] = root['x'] + child_node['relative_x']\n            child_node['y'] = root['y'] + root['height'] + 15\n            this.compute_node_position2(child_node)\n        }\n    },\n    draw_reg_list: function(){\n            let self = this\n            self.max_height = 0\n            for(var i = 0; i < self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let reg = self.reg_list[i]['reg']\n                let node_width = 25\n                let node_margin = {height: 10, width: 10}\n                reg['composition'] = []\n                reg['x'] = width/2 - node_width/2\n                reg['y'] = 10\n                self.compute_node_position1(reg)\n                self.compute_node_position2(reg, width/2 - node_width/2)\n\n            }\n            for(var i=0; i<self.reg_list.length; i++){\n                let width = document.getElementById(\"svg-\"+i).clientWidth\n                let height = self.max_height + 20\n                console.log(\"height: \",height)\n                let reg = self.reg_list[i]['reg']\n                d3.select(self.$el).select('#svg-'+i).selectAll('*').remove();\n                const svg = d3.select(self.$el).select('#svg-'+i)\n                    .attr(\"style\", function(){\n                        return \"width: \" + width + \" !important;\" +\n                            \"height: \" + height + \" !important;\"\n                    })\n                self.draw_node(reg, svg)\n                svg.append(\"path\")\n                    .attr('d', function(){\n                    var x0 = width\n                    var y0 = 0\n                    var x1 = width\n                    var y1 = height\n\n\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                    })\n                    .attr('style','stroke: #c4bbbb; stroke-width: 2px; fill: none;')\n                svg.append(\"text\")\n                    .attr('x', width/2)\n                    .attr('y', height-5)\n                    .attr('font-size', '12px')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .text(() => \"Num: \" + self.reg_list[i]['num'])\n                svg.append(\"rect\")\n                .attr(\"class\", \"rect-none\")\n                .attr(\"width\", width-8)\n                .attr(\"height\", height-1)\n                .attr(\"transform\", \"translate(4,1)\")\n                .attr(\"fill-opacity\", '0')\n                .attr(\"reg_coding\", self.key_list[i])\n                .attr(\"style\", \"cursor: pointer;\")\n                .attr('stroke', '#f4606c')\n                .attr('stroke-opacity', '0')\n                .attr('stroke-dasharray', '4 2')\n                .attr('stroke-width', '1.5')\n                .on(\"click\", function(){\n                    self.DATA_QUERY_CODING(this.getAttribute(\"reg_coding\"))\n                    d3.selectAll('.rect-none').attr('fill-opacity', '0')\n                    // this.setAttribute('stroke-opacity', '1')\n                    this.setAttribute('fill-opacity', '0.1')\n                })\n                \n            }\n\n\n    },\n    draw_node: function(node, svg){\n        if(node['type'] == 'node'){\n            svg.append('rect')\n            .attr('class', 'unselectable title')\n            .attr('x', node['x'])\n            .attr('y', node['y'])\n            .attr('width', 25)\n            .attr('height', 25)\n            .attr('style', function(){\n                return (\n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                )\n            })\n\n            if('nodeName' in node){\n                if(node['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', node['x']  + 12.5)\n                    .attr('y', node['y'] + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['nodeName'])\n                }\n            }\n\n            for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n            }\n        }\n        else if(node['type'] == 'branch'){\n        let curX = node['x']\n        let curY = node['y']\n\n        svg.append('path')\n        .attr('class', 'bPath')\n        .attr('d', function(){\n          var x0 = curX\n          var y0 = curY + 5\n          var x1 = curX + 12.5\n          var y1 = curY\n          var x2 = curX + 25\n          var y2 = curY + 5\n\n          return \"M \" +  x0 + \" \" +  y0 +\n                \" L \" + x1+ \" \" + y1 + \n                \" L \" + x2+ \" \" + y2\n        })\n        .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        svg.append('text')\n        .attr('x', curX)\n        .attr('y', curY-4)\n        .attr('font-size', '9px')\n        .attr('alignment-baseline', 'hanging')\n        .attr('text-anchor', 'middle')\n        .attr('font-weight', 'bold')\n        .attr('fill', '#2c2c2c')\n        .text(() => node['repeat'][0])\n        \n        if(node['repeat'][1] == '*'){\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '12px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n        else{\n            svg.append('text')\n            .attr('x', curX+23)\n            .attr('y', curY-4)\n            .attr('font-size', '9px')\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'middle')\n            .attr('font-weight', 'bold')\n            .attr('fill', '#2c2c2c')\n            .text(() => node['repeat'][1])\n        }\n\n\n\n        curY += 5\n        \n        for(let i in node['composition']){\n          if(node['composition'][i]['type'] == 'node'){\n            if('notFlag' in node['composition'][i] && node['composition'][i]['notFlag']){\n              svg.append('path')\n              .attr('d', function(){\n                var x1 = curX-4\n                var y1 = curY+5\n            \n                return ( \"M \" + x1 + \" \" + y1 +\n                        \"v \" + 27);\n              })\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n              svg.append('circle')\n              .attr('cx', curX-4)\n              .attr('cy', curY+37)\n              .attr('r', '1')\n              .attr('style','stroke: #000000; stroke-width: 2px; fill: none;')\n            \n            }\n\n            svg.append('rect')\n              .attr('class', 'unselectable title')\n              .attr('x', curX)\n              .attr('y', curY)\n              .attr('width', 25)\n              .attr('height', 25)\n              .attr('style', function(){\n                  return (\n                   \n                    \"stroke: #c4bbbb; !important;\" + \n                    \"fill: \" + node['composition'][i]['nodeColor'] + \"; \" + \n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"\n                  )\n              })\n            if('nodeName' in node['composition'][i]){\n                if(node['composition'][i]['nodeName'] == '.'){\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 7.5 )\n                    .attr('fill', 'white')\n                    .attr('font-size', '30')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n                else{\n                    svg.append('text')\n                    .attr('class', 'new11')\n                    .attr('x', curX + 12.5)\n                    .attr('y', curY + 12.5 + 2)\n                    .attr('fill', 'white')\n                    .attr('font-size', '16')\n                    .attr('text-anchor', \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr('class', 'unselectable title')\n                    .text(() => node['composition'][i]['nodeName'])\n                }\n            }\n\n            if(!(node['composition'][i]['repeat'][0] == 1 && node['composition'][i]['repeat'][1] == 1)){\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x1 = curX + 25 + 2;\n                var y1 = curY + 9;\n                var x2 = curX + 25 + 2;\n                var y2 = curY + 16;\n                var r = 5;\n                return 'M ' + x1 + ',' + y1 + ' ' + 'A ' + r + ',' + r + ' ' + '0 ' + '1,1' + ' ' + x2 + ',' + y2;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n              svg.append('path')\n              .attr('class', 'bPath')\n              .attr('d', function(){\n                var x0 = curX + 25 + 2\n                var y0 = curY + 16\n                var x1 = x0 + 2.5\n                var y1 = y0 + 3\n\n                return \"M \" +  x1 + \",\" +  y1 +\n                  \" L \" + x0 + \",\" + y0 ;\n              })\n              .attr('style','stroke: #2c2c2c; stroke-width: 1px; fill: none;')\n\n                svg.append('text')\n                .attr('x', curX + 25 + 4)\n                .attr('y', curY )\n                .attr('font-size', '7px')\n                .attr('alignment-baseline', 'hanging')\n                    .attr('font-weight', 'bold')\n                    .attr('fill', '#2c2c2c')\n                .text(() => node['composition'][i]['repeat'][0])\n                if(node['composition'][i]['repeat'][1] == '*'){\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '10px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n                else{\n                    svg.append('text')\n                    .attr('x', curX + 25 + 4)\n                    .attr('y', curY + 19)\n                    .attr('font-size', '7px')\n                    .attr('alignment-baseline', 'hanging')\n                        .attr('font-weight', 'bold')\n                        .attr('fill', '#2c2c2c')\n                    .text(() => node['composition'][i]['repeat'][1])\n                }\n\n            }\n\n            curY = curY + 20 + 5\n\n\n          }\n\n        }\n        for(let child_node of node['children']){\n                this.draw_node(child_node, svg)\n        }\n        }\n\n        if(node['children'].length > 0){\n            let node_bottom_x = node['x'] + 12.5\n            let node_bottom_y = node['y'] + node['height']\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = node_bottom_x\n                let y0 = node_bottom_y\n                let x1 = node_bottom_x\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n            let x_left = 10000\n            let x_right = 0\n            for(let child_node of node['children']){\n                svg.append('path')\n                .attr('d', function(){\n                    let x0 = child_node['x'] + 12.5\n                    let y0 = node_bottom_y + 7.5\n                    let x1 = child_node['x'] + 12.5\n                    let y1 = node_bottom_y + 15\n                    x_left = x0<x_left ? x0 : x_left\n                    x_right = x0>x_right? x0 : x_right\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                })\n                .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n            }\n            svg.append('path')\n            .attr('d', function(){\n                let x0 = x_left\n                let y0 = node_bottom_y + 7.5\n                let x1 = x_right\n                let y1 = node_bottom_y + 7.5\n                return \"M \" +  x0 + \" \" +  y0 +\n                        \" L \" + x1+ \" \" + y1;\n            })\n            .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        }\n\n    },\n\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.reg-recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .reg-list {\n        position: absolute;\n        top: 7%;\n        bottom: 0%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 33% 33% 33%;\n        padding: 10px;\n        grid-column-gap: 0px;\n        grid-row-gap: 5px;\n        // .reg-item{\n        //     height: 300px;\n        // }\n    }\n}\n\n</style>"],"sourceRoot":"src/views"}]}
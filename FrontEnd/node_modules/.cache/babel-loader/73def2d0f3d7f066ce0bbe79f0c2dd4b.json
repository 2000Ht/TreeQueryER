{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/RecommendPanel.vue","mtime":1670506964894},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  name: 'RecommendPanel',\n  components: {},\n  props: {},\n  data: function data() {\n    return {\n      tmp_list: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      recommend_list: [],\n      num: 10,\n      marks: {\n        0: '0',\n        5: '5',\n        10: '10',\n        15: '15',\n        20: '20'\n      },\n      similarity: true,\n      tree_num: 0,\n      current_page: 1,\n      tree_size: 0\n    };\n  },\n  beforeMount: function beforeMount() {},\n  mounted: function mounted() {},\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    visPanelState: function visPanelState() {\n      this.current_page = 1; // this.recommend_list = sysDatasetObj.getRecommendData()\n\n      this.recommend_list = sysDatasetObj.getCurResult();\n      this.tree_num = sysDatasetObj.getResultNum();\n      this.draw_node_link_tree_list();\n    },\n    treeListState: function treeListState() {\n      this.recommend_list = sysDatasetObj.getCurResult();\n      this.tree_num = sysDatasetObj.getResultNum();\n      this.draw_node_link_tree_list();\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'visPanelState', 'treeListState'])),\n  created: function created() {},\n  methods: _objectSpread({}, mapMutations(['UPDATE_VIS_TREE', 'DATA_QUERY_PAGE']), {\n    pageChange: function pageChange(page_index) {\n      this.current_page = page_index;\n      this.DATA_QUERY_PAGE(page_index);\n    },\n    draw_node_link_tree_list: function draw_node_link_tree_list() {\n      var self = this;\n\n      for (var i = 0; i < self.tmp_list.length; i++) {\n        // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n        // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-name').remove();\n        // // d3.select(self.$el).select('#svg-'+i).selectAll('.rect-none').remove();\n        // d3.select(self.$el).select('#svg-'+i).selectAll('.text-path').remove();\n        // d3.select(self.$el).select('#svg-'+i).selectAll('path').remove();\n        d3.select(self.$el).select('#svg-' + i).selectAll('*').remove();\n      }\n\n      var _loop = function _loop() {\n        var width = 143;\n        var height = 130;\n        var data = self.recommend_list[i]['data'];\n        self.tree_size = self.recommend_list[i]['size'];\n        console.log(\"width: \", width, \"height: \", height);\n        var scale = 300;\n        var isVertical = 1;\n        var min_width_height = Math.min(width, height);\n        var trbl = min_width_height * 20 / scale;\n        var margin = {\n          top: trbl,\n          right: trbl,\n          bottom: 20,\n          left: trbl\n        };\n        var innerWidth = width - 10;\n        var innerHeight = height - 25;\n        var r = min_width_height * 3 / scale;\n        var r_min = min_width_height * 2.5 / scale;\n        var r_max = min_width_height * 3.5 / scale; // r = r_max\n\n        var strokeWidth = min_width_height * r / scale;\n        var strokeOpacity = min_width_height / scale;\n        var degree_max = 0;\n        var root = d3.tree().size([innerWidth, innerHeight])(d3.hierarchy(data).eachBefore(function (d) {// d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n          // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n          // d.data.data.height = d.height; //重新画图之后要重新计算高度\n          // d.data.data.degree = d.children ? d.children.length : 0;\n          // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n        }));\n        var DimGray = d3.rgb(105, 105, 105); // let LightGray = d3.rgb(211,211,211)\n\n        var linear = d3.scaleLinear().domain([0, root.height]).range([1, 0]);\n        var color = d3.interpolate(DimGray, DimGray);\n        self.RootDes = root.descendants();\n        var RootDes = self.RootDes;\n        var svg = d3.select(self.$el).select('#svg-' + i);\n        var tmp_g = svg.append('g').attr(\"id\", \"g-level-1-\" + i);\n        tmp_g.append(\"g\").attr(\"id\", \"g-level-1-path-\" + i);\n        tmp_g.append(\"g\").attr(\"id\", \"g-level-1-node-\" + i);\n        svg.selectAll('.tree-name').remove();\n        svg.append(\"text\").attr(\"class\", \"tree-name\").attr(\"y\", height - 4).attr(\"x\", width / 2).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10\").attr(\"fill\", \"#808080\").text(self.recommend_list[i]['data']['doi']); // svg.append(\"rect\")\n        //     .attr(\"width\", width)\n        //     .attr(\"height\", height)\n        //     .attr(\"transform\", \"translate(0,0)\")\n        //     .attr(\"fill\", \"none\")\n        //     .attr(\"stroke-width\", \"1.5\")\n        //     .attr(\"stroke\", \"grey\")\n        //     .attr(\"stroke-dasharray\", \"4 2\")\n\n        svg.append('path').attr(\"class\", \"text-path\").attr(\"id\", \"text-path\" + i).classed(\"text-path-selected\", false).attr(\"d\", function () {\n          var x0 = 1;\n          var y0 = height - 15;\n          var x1 = width - 1;\n          var y1 = height - 15;\n          return \"M \" + x0 + \" \" + y0 + \" L \" + x1 + \" \" + y1;\n        }); // .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n        svg.append(\"rect\").attr(\"class\", \"rect-none\").attr(\"id\", \"rect-none\" + i).attr(\"width\", width - 2).attr(\"height\", height - 16.5).attr(\"transform\", \"translate(1,1)\").attr(\"fill-opacity\", '0').attr(\"treeindex\", i).attr(\"style\", \"cursor: pointer;\").attr('stroke', '#f4606c').attr('stroke-opacity', '0').attr('stroke-dasharray', '4 2').attr('stroke-width', '1.5').on(\"click\", function () {\n          sysDatasetObj.updateVisTree(this.getAttribute(\"treeindex\"));\n          self.UPDATE_VIS_TREE();\n          var tmp = '#text-path' + this.getAttribute(\"treeindex\");\n          d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false);\n          d3.select(self.$el).select(tmp).classed(\"text-path-selected\", true);\n        });\n        var t = svg.transition().duration(750);\n        var g = svg.select('#g-level-1-' + i).attr('transform', \"translate(\".concat(5, \", \", 5, \")\"));\n        var path_logScale = d3.scaleLog().domain([1, 2000]).range([1.5, 0.3]);\n\n        if (isVertical) {\n          g.select('#g-level-1-path-' + i).attr('class', 'gLink').attr('stroke-opacity', 0.2).attr('stroke-width', function () {\n            return path_logScale(self.tree_size);\n          }).selectAll('path').data(root.links(), function (d, i) {//真正的nodeIndex在数据上传前就计算好\n            // let source = d.source.data.data.nodeIndex\n            // let target = d.target.data.data.nodeIndex\n            // return \"node\"+source+\"node\"+target;\n          }).join(function (enter) {\n            return enter.append('path').each(function (d) {\n              d.target.linkNode = self;\n            }).attr('d', function (d) {\n              return \"M\".concat(d.source.x, \" \").concat(d.source.y, \" L \").concat(d.target.x, \" \").concat(d.target.y);\n            });\n          }, function (update) {\n            return update.call(function (update) {\n              return update.transition(t).each(function (d) {\n                d.target.linkNode = self;\n              }).attr('d', function (d) {\n                return \"M\".concat(d.source.x, \" \").concat(d.source.y, \" L \").concat(d.target.x, \" \").concat(d.target.y);\n              });\n            });\n          }, function (exit) {\n            return exit.remove();\n          }); // 保留\n\n          var node = g.select('#g-level-1-node-' + i).attr('class', 'brush').selectAll('a').data(RootDes, function (d, i) {//真正的nodeIndex在数据上传前就计算好\n            // let node_id = d.data.data.nodeIndex\n            // return node_id;\n          }).join(function (enter) {\n            return enter.append('a').attr(\"transform\", function (d) {\n              return \"translate(\".concat(d.x, \",\").concat(d.y, \")\");\n            });\n          }, function (update) {\n            return update.call(function (update) {\n              return update.transition(t).attr(\"transform\", function (d) {\n                return \"translate(\".concat(d.x, \",\").concat(d.y, \")\");\n              });\n            });\n          }, function (exit) {\n            return exit.remove();\n          });\n          var logScale = d3.scaleLog().domain([1, 2000]).range([3, 1]);\n          d3.select(self.$el).select('#svg-' + i).selectAll('.tree-node').remove();\n          node.append(\"circle\").attr('class', 'tree-node').attr('id', function (d) {\n            return 'node-id-' + d.nodeIndex;\n          }) //.attr(\"fill\", d => color(linear(d.height)) )\n          .attr(\"fill\", \"steelblue\").attr(\"r\", function () {\n            return logScale(self.tree_size);\n          }).call(self.tooltip_ele(\"node_link_tree\"));\n        }\n      };\n\n      for (var i = 0; i < self.recommend_list.length; i++) {\n        _loop();\n      }\n\n      d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false);\n      d3.select(self.$el).select('#text-path0').classed(\"text-path-selected\", true);\n    }\n  })\n};",{"version":3,"sources":["RecommendPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"recommend-panel-view\">\n    <span class=\"recommend-title\">Query Results ({{tree_num}} trees)</span>\n    <!-- <span class=\"num-text\">Num</span>\n    <div class=\"num-slider\">\n        <el-slider v-model=\"num\" :step=\"5\" :min=\"0\" :max=\"20\"  :marks=\"marks\" show-stops></el-slider>\n    </div>\n    <span class=\"similarity-text\">Similarity</span> -->\n    <!-- <el-switch class=\"similarity-switch\" v-model=\"similarity\" active-color=\"steelbule\" inactive-color=\"grey\"></el-switch> -->\n    <div class=\"page_list\">\n        <el-pagination\n            layout=\"prev, pager, next\"\n            :total=\"tree_num\"\n            @current-change=\"pageChange\"\n            :current-page=\"current_page\">\n        </el-pagination>\n    </div>\n    <div class=\"tree-list\">\n        <div v-for=\"tree in tmp_list\" :key=\"tree\" class=\"tree-item\">\n            <svg v-bind:id=\"'svg-' + tree\" style=\"position: relative; width: 100%; height: 100%;\">\n                <g v-bind:id=\"'g-level-1-'+tree\">\n                    <g v-bind:id=\"'g-level-1-path-'+tree\"></g>\n                    <g v-bind:id=\"'g-level-1-node-'+tree\"></g>\n                </g>\n            </svg>\n        </div>\n    \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'RecommendPanel',\n  components: {\n\n  },\n  props: {\n\n  },\n  data() {\n    return {\n        tmp_list: [0,1,2,3,4,5,6,7,8,9],\n        recommend_list: [],\n        num: 10,\n        marks:{\n            0:'0',\n            5:'5',\n            10:'10',\n            15:'15',\n            20:'20'\n        },\n        similarity: true,\n        tree_num: 0,\n        current_page: 1,\n        tree_size: 0,\n      \n    }\n  },\n  beforeMount(){\n  },\n  mounted() {\n  \n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      visPanelState: function(){\n        this.current_page = 1\n        // this.recommend_list = sysDatasetObj.getRecommendData()\n        this.recommend_list = sysDatasetObj.getCurResult()\n        this.tree_num = sysDatasetObj.getResultNum()\n        this.draw_node_link_tree_list()\n      },\n      treeListState: function(){\n        this.recommend_list = sysDatasetObj.getCurResult()\n        this.tree_num = sysDatasetObj.getResultNum()\n        this.draw_node_link_tree_list()\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'visPanelState',\n      'treeListState'\n\n    ]),\n  },\n  created(){\n\n  },\n  methods: {\n    ...mapMutations([\n        'UPDATE_VIS_TREE',\n        'DATA_QUERY_PAGE'\n    ]),\n    pageChange: function(page_index){\n        this.current_page = page_index\n        this.DATA_QUERY_PAGE(page_index)\n    },\n    draw_node_link_tree_list: function(){\n        let self = this\n        for(var i=0; i<self.tmp_list.length; i++){\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.tree-name').remove();\n            // // d3.select(self.$el).select('#svg-'+i).selectAll('.rect-none').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('.text-path').remove();\n            // d3.select(self.$el).select('#svg-'+i).selectAll('path').remove();\n            d3.select(self.$el).select('#svg-'+i).selectAll('*').remove();\n            \n        }\n        for(var i = 0; i < self.recommend_list.length; i++){\n\n            let width = 143\n            let height = 130\n            let data = self.recommend_list[i]['data']\n            self.tree_size = self.recommend_list[i]['size']\n\n            console.log(\"width: \", width, \"height: \", height)\n\n            let scale = 300\n\n            let isVertical = 1;\n            let min_width_height = Math.min(width, height);\n            let trbl = (min_width_height * 20) / scale;\n            let margin = { top: trbl, right: trbl, bottom: 20, left: trbl };\n            let innerWidth = width - 10;\n            let innerHeight = height - 25;\n\n            let r = (min_width_height * 3)/ scale;\n            let r_min = (min_width_height * 2.5)/ scale;\n            let r_max = (min_width_height * 3.5)/ scale;\n            // r = r_max\n            let strokeWidth = (min_width_height * r) / scale;\n            let strokeOpacity = (min_width_height ) / scale;\n\n            let degree_max = 0\n            let root = d3.tree().size([innerWidth, innerHeight]) (\n                d3.hierarchy(data)\n                    .eachBefore(d=>{\n                    // d.nodeIndex = d.data.data.nodeIndex; // 标记节点的唯一标识\n                    // d.data.data.depth = d.depth; //重新画图之后要重新计算深度\n                    // d.data.data.height = d.height; //重新画图之后要重新计算高度\n                    // d.data.data.degree = d.children ? d.children.length : 0;\n                    // if(d.data.data.degree > degree_max) degree_max = d.data.data.degree\n                })\n            );\n\n            let DimGray = d3.rgb(105,105,105)\n            // let LightGray = d3.rgb(211,211,211)\n            let linear = d3.scaleLinear().domain([0, root.height]).range([1, 0])\n            let color = d3.interpolate(DimGray, DimGray)\n\n            self.RootDes = root.descendants()\n            let RootDes = self.RootDes\n\n            const svg = d3.select(self.$el).select('#svg-'+i)\n            let tmp_g = svg.append('g')\n                            .attr(\"id\", \"g-level-1-\"+i)\n            tmp_g.append(\"g\")\n                .attr(\"id\", \"g-level-1-path-\"+i)\n            tmp_g.append(\"g\")\n                .attr(\"id\", \"g-level-1-node-\"+i)\n\n\n           svg.selectAll('.tree-name').remove();\n\n            svg.append(\"text\")\n            .attr(\"class\", \"tree-name\")\n            .attr(\"y\", height-4)\n            .attr(\"x\", width/2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"10\")\n            .attr(\"fill\", \"#808080\")\n            .text(self.recommend_list[i]['data']['doi']);\n\n            // svg.append(\"rect\")\n            //     .attr(\"width\", width)\n            //     .attr(\"height\", height)\n            //     .attr(\"transform\", \"translate(0,0)\")\n            //     .attr(\"fill\", \"none\")\n            //     .attr(\"stroke-width\", \"1.5\")\n            //     .attr(\"stroke\", \"grey\")\n            //     .attr(\"stroke-dasharray\", \"4 2\")\n            svg.append('path')\n                .attr(\"class\", \"text-path\")\n                .attr(\"id\", \"text-path\"+i)\n                .classed(\"text-path-selected\", false)\n                .attr(\"d\", function(){\n                    let x0 = 1\n                    let y0 = height -15\n                    let x1 = width-1\n                    let y1 = height - 15\n                    return \"M \" +  x0 + \" \" +  y0 +\n                            \" L \" + x1+ \" \" + y1;\n                })\n                // .attr('style','stroke: #c4bbbb; stroke-width: 1px; fill: none;')\n\n            svg.append(\"rect\")\n            .attr(\"class\", \"rect-none\")\n            .attr(\"id\", \"rect-none\"+i)\n            .attr(\"width\", width-2)\n            .attr(\"height\", height-16.5)\n            .attr(\"transform\", \"translate(1,1)\")\n            .attr(\"fill-opacity\", '0')\n            .attr(\"treeindex\", i)\n            .attr(\"style\", \"cursor: pointer;\")\n            .attr('stroke', '#f4606c')\n            .attr('stroke-opacity', '0')\n            .attr('stroke-dasharray', '4 2')\n            .attr('stroke-width', '1.5')\n            .on(\"click\", function(){\n                 sysDatasetObj.updateVisTree(this.getAttribute(\"treeindex\"))\n                 self.UPDATE_VIS_TREE()\n                 let tmp = '#text-path'+this.getAttribute(\"treeindex\")\n                 d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false)\n                 d3.select(self.$el).select(tmp).classed(\"text-path-selected\", true)\n            })\n\n\n            let t = svg.transition()\n                .duration(750)\n\n            let g = svg.select('#g-level-1-'+i)\n                .attr('transform', `translate(${5}, ${5})`);\n\n            let path_logScale = d3.scaleLog()\n            .domain([1, 2000])\n            .range([1.5, 0.3]);\n\n            if(isVertical)\n            {\n                g.select('#g-level-1-path-'+i)\n                .attr('class', 'gLink')\n                .attr('stroke-opacity', 0.2)\n                .attr('stroke-width', function(){\n                    return path_logScale(self.tree_size)\n                })\n                .selectAll('path')\n                .data(root.links(), function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let source = d.source.data.data.nodeIndex\n                    // let target = d.target.data.data.nodeIndex\n                    // return \"node\"+source+\"node\"+target;\n                })\n                .join(\n                    enter => enter.append('path')\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .each(function(d){d.target.linkNode=self;})\n                    .attr('d', d=>`M${d.source.x} ${d.source.y} L ${d.target.x} ${d.target.y}`)),\n                    exit => exit\n                    .remove()\n                );\n\n                // 保留\n                let node = g.select('#g-level-1-node-'+i)\n                .attr('class', 'brush')\n                .selectAll('a')\n                .data(RootDes, function(d, i) {\n                    //真正的nodeIndex在数据上传前就计算好\n                    // let node_id = d.data.data.nodeIndex\n                    // return node_id;\n                })\n                .join(\n                    enter => enter.append('a')\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`),\n                    update => update\n                    .call(update => update.transition(t)\n                    .attr(\"transform\", d => `translate(${d.x},${d.y})`)),\n                    exit => exit\n                    .remove()\n                )\n\n                let logScale = d3.scaleLog()\n                    .domain([1, 2000])\n                    .range([3, 1]);\n                d3.select(self.$el).select('#svg-'+i).selectAll('.tree-node').remove();\n                node.append(\"circle\")\n                .attr('class', 'tree-node')\n                .attr('id', d=> 'node-id-' + d.nodeIndex)\n                //.attr(\"fill\", d => color(linear(d.height)) )\n                .attr(\"fill\", \"steelblue\")\n                .attr(\"r\", function(){\n                    return logScale(self.tree_size)\n                })\n                .call(self.tooltip_ele(\"node_link_tree\"));\n\n            }\n\n        }\n        d3.select(self.$el).selectAll('.text-path').classed(\"text-path-selected\", false)\n        d3.select(self.$el).select('#text-path0').classed(\"text-path-selected\", true)\n    }\n\n  }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.recommend-panel-view{\n    position: absolute;\n    top: 0%;\n    bottom: 0%;\n    left: 0%;\n    right: 0%;\n    .recommend-title{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: black;\n        top: 5px;\n        left: 5px;\n    }\n    .page_list{\n        position: absolute;\n        top: 0.1rem;\n        right: 0px;\n    }\n    .num-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 8%;\n    }\n    .num-slider{\n        position: absolute;\n        top: 23px;\n        left: 20%;\n        width: 30%;\n        height: 15px;\n    }\n    .similarity-text{\n        position: absolute;\n        font-size: 1rem;\n        font-weight: bolder;\n        color: #808080;\n        top: 30px;\n        left: 68%;\n    }\n    .similarity-switch{\n        position: absolute;\n        top: 30px;\n        left: 85%;\n    }\n    .tree-list {\n        position: absolute;\n        top: 10%;\n        bottom: 3%;\n        left: 0%;\n        right: 0%;\n        overflow-y: auto;\n        display: grid;\n        grid-template-columns: 19.5% 19.5% 19.5% 19.5% 19.5%;\n        padding: 10px;\n        grid-column-gap: 5px;\n        grid-row-gap: 5px;\n        .tree-item{\n            height: 135px;\n        }\n\n    }\n}\n\n</style>\n\n<style lang=\"less\">\n.text-path{\n    stroke: #c4bbbb;\n    stroke-width: 1px; \n    fill: none;\n    &.text-path-selected{\n        stroke: red !important;\n    }\n}\n</style>"],"sourceRoot":"src/views"}]}
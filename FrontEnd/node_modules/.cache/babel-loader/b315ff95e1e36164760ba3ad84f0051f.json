{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/data/dataset.js","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/data/dataset.js","mtime":1670506692984},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/eslint-loader/index.js","mtime":1660192275000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nexport function Dataset() {\n  this.hierarchyData = {};\n  this.regexDataList = [];\n  this.curIndex = 0;\n  this.hierarchyDataIn = [];\n  this.hierarchyDataOut = [];\n  this.connection = [];\n  this.initialData = {};\n  this.nodeRegexList = [];\n  this.visData = {};\n  this.visList = [];\n  this.regex = {};\n  this.Condition = {};\n  this.Regex;\n  this.selectedDomKey = -1;\n  this.selectedBranch = {};\n  this.branchIndex = -2;\n  this.selectedOr = {};\n  this.orIndex = -2;\n  this.edgeInfo = [];\n  this.regexIndex = 0;\n  this.resultList = [];\n  this.highlightBar = {};\n  this.regDict = {};\n  this.resultNum = 0;\n  this.curResult = [];\n  this.visTreeDataIndex = 0;\n  this.same_tree = {};\n}\nimport { getComponentKey } from '@/utils/componentkey.js';\nimport { loadHierarchicalData } from '@/data/dataloading.js';\nimport { tychei } from 'seedrandom';\nDataset.prototype = {\n  init: function init() {\n    this.Condition = {\n      'ElementComposition': [],\n      'Aggregation': {\n        'op': '',\n        'attribute': '',\n        'value': ['', '']\n      },\n      'Size': [0, 7188],\n      'Height': [0, 10],\n      'Width': [0, 2000],\n      'Balanced': true\n    };\n  },\n  initData: function initData(data) {\n    this.initialData = data;\n  },\n  returnInitData: function returnInitData() {\n    return this.initialData;\n  },\n  initialRegexNode: function initialRegexNode() {\n    var regex = {\n      \"target\": {\n        \"type\": \"target\",\n        \"composition\": [{\n          \"type\": \"path\",\n          \"repeat\": [1, 1],\n          \"key\": getComponentKey(),\n          \"composition\": [// {          \n            //     \"type\": \"node\",\n            //     \"repeat\": [1,1],\n            //     \"data\": {},\n            //     \"key\": getComponentKey()\n            // }\n          ]\n        }]\n      },\n      \"condition\": {\n        \"attribute\": \"size\",\n        \"op\": \"max\",\n        \"value\": \"\"\n      },\n      \"regexName\": 'untitled'\n    };\n    var tmpData1 = {};\n    var tmpData2 = [[]];\n    var tmpList = [];\n    var tmpNodeList = [{\n      'data': {},\n      'nodeName': '.',\n      'nodeColor': '#8E9898'\n    }, {\n      'data': {\n        \"depth\": {\n          \"op\": \"=\",\n          \"value\": 0\n        }\n      },\n      'nodeName': '^',\n      'nodeColor': '#D2BA4D'\n    }, {\n      'data': {\n        \"degree\": {\n          \"op\": \"=\",\n          \"value\": 0\n        }\n      },\n      'nodeName': '$',\n      'nodeColor': '#38B03F'\n    }];\n    this.hierarchyDataIn.push(tmpData1);\n    this.hierarchyDataOut.push(tmpData2);\n    this.regexDataList.push(regex);\n    this.connection.push(tmpList);\n    this.nodeRegexList.push(tmpNodeList);\n    this.curIndex = this.curIndex + 1;\n    return this.curIndex - 1;\n  },\n  resetRegex: function resetRegex(index) {\n    var tmpName = this.regexDataList[index]['regexName'];\n    this.regexDataList[index] = {\n      \"target\": {\n        \"type\": \"target\",\n        \"composition\": [{\n          \"type\": \"path\",\n          \"repeat\": [1, 1],\n          \"key\": getComponentKey(),\n          \"composition\": [// {          \n            //     \"type\": \"node\",\n            //     \"repeat\": [1,1],\n            //     \"data\": {},\n            //     \"key\": getComponentKey()\n            // }\n          ]\n        }]\n      },\n      \"condition\": {\n        \"attribute\": \"size\",\n        \"op\": \"max\",\n        \"value\": \"\"\n      },\n      \"dataIndex\": index,\n      \"regexName\": tmpName\n    };\n  },\n  returnRegex: function returnRegex(index) {\n    return this.regexDataList[index];\n  },\n  returnRegexContent: function returnRegexContent(index) {\n    return this.regexDataList[index]['regexContent'];\n  },\n  returnHierarchyDataIn: function returnHierarchyDataIn(index) {\n    if (Object.keys(this.hierarchyDataIn[index]).length == 0) {\n      return [this.initialData];\n    } else {\n      var tmpList = [];\n\n      for (var key in this.hierarchyDataIn[index]) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.hierarchyDataIn[index][key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var tmpTree = _step.value;\n            tmpList.push(tmpTree);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return tmpList;\n    }\n  },\n  updateHierarchyDataOut: function updateHierarchyDataOut(processed_hierarchy_data, index) {\n    this.hierarchyDataOut[index] = processed_hierarchy_data['data'];\n  },\n  returnHierarchyDataOut: function returnHierarchyDataOut(index) {\n    return this.hierarchyDataOut[index];\n  },\n  DataOut2DataIn: function DataOut2DataIn(indexOut, indexIn) {\n    this.connection[indexOut].push(indexIn);\n    this.hierarchyDataIn[indexIn][indexOut] = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this.hierarchyDataOut[indexOut][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var item = _step2.value;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = item[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var tmpTree = _step3.value;\n            this.hierarchyDataIn[indexIn][indexOut].push(tmpTree);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  },\n  DataOutFlow: function DataOutFlow(index) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = this.connection[index][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var nextIndex = _step4.value;\n        this.hierarchyDataIn[nextIndex][index] = [];\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = this.hierarchyDataOut[index][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var item = _step5.value;\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = item[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var tmpTree = _step6.value;\n                this.hierarchyDataIn[nextIndex][index].push(tmpTree);\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  },\n  returnConnection: function returnConnection(index) {\n    return this.connection[index];\n  },\n  UpdataNodeList: function UpdataNodeList(node, index) {\n    var flag = true;\n    var _iteratorNormalCompletion7 = true;\n    var _didIteratorError7 = false;\n    var _iteratorError7 = undefined;\n\n    try {\n      for (var _iterator7 = this.nodeRegexList[index][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n        var _tmpNode = _step7.value;\n        var len1 = Object.keys(node['data']).length;\n        var len2 = Object.keys(_tmpNode['data']).length;\n\n        if (len1 == 0 && len2 == 0) {\n          if (node['nodeName'] == _tmpNode['nodeName'] && node['nodeColor'] == _tmpNode['nodeColor']) {\n            flag = false;\n            break;\n          }\n        } else if (len1 == len2) {\n          var tmpData = _tmpNode['data'];\n          var tmpFlag = true;\n\n          for (var tmpKey in tmpData) {\n            if (tmpKey in node['data']) {\n              if (tmpData[tmpKey]['op'] == node['data'][tmpKey]['op']) {\n                if (tmpData[tmpKey]['value'] == node['data'][tmpKey]['value']) {\n                  continue;\n                }\n              }\n            }\n\n            tmpFlag = false;\n            break;\n          }\n\n          if (tmpFlag) {\n            if (node['nodeName'] == _tmpNode['nodeName'] && node['nodeColor'] == _tmpNode['nodeColor']) {\n              flag = false;\n              break;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError7 = true;\n      _iteratorError7 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n          _iterator7.return();\n        }\n      } finally {\n        if (_didIteratorError7) {\n          throw _iteratorError7;\n        }\n      }\n    }\n\n    if (flag) {\n      var tmpNode = {\n        'type': 'listNode',\n        'data': {},\n        'nodeName': '',\n        'nodeColor': ''\n      };\n      tmpNode['nodeName'] = node['nodeName'];\n      tmpNode['nodeColor'] = node['nodeColor'];\n      tmpNode['data'] = JSON.parse(JSON.stringify(node['data']));\n      tmpNode['key'] = getComponentKey();\n      this.nodeRegexList[index].push(tmpNode);\n    } //this.nodeRegexList[index].push(node)\n\n  },\n  returnNodeList: function returnNodeList(index) {\n    return this.nodeRegexList[index];\n  },\n  updateRegexName: function updateRegexName(name, index) {\n    this.regexDataList[index]['regexName'] = name;\n  },\n  returnRegexName: function returnRegexName(index) {\n    return this.regexDataList[index]['regexName'];\n  },\n  deleteDataConnection: function deleteDataConnection(indexOut, indexIn) {\n    var _this = this;\n\n    this.connection[indexOut].map(function (val, i) {\n      if (val == indexIn) {\n        _this.connection[indexOut].splice(i, 1);\n      }\n    });\n    delete this.hierarchyDataIn[indexIn][indexOut];\n  },\n  deleteDataNode: function deleteDataNode(index) {\n    for (var key in this.hierarchyDataIn[index]) {\n      this.deleteDataConnection(key, index);\n    }\n\n    var _iteratorNormalCompletion8 = true;\n    var _didIteratorError8 = false;\n    var _iteratorError8 = undefined;\n\n    try {\n      for (var _iterator8 = this.connection[index][Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n        var tmpIndex = _step8.value;\n        this.deleteDataConnection(index, tmpIndex);\n      }\n    } catch (err) {\n      _didIteratorError8 = true;\n      _iteratorError8 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n          _iterator8.return();\n        }\n      } finally {\n        if (_didIteratorError8) {\n          throw _iteratorError8;\n        }\n      }\n    }\n  },\n  updateVis: function updateVis(data) {\n    this.visData = data;\n  },\n  updateVisList: function updateVisList(data) {\n    this.visList = data;\n  },\n  getVisData: function getVisData() {\n    return this.visData;\n  },\n  getVisList: function getVisList() {\n    return this.getVisList;\n  },\n  getCondition: function getCondition() {\n    return this.Condition;\n  },\n  addExist: function addExist() {\n    var tmpExist = {\n      'type': 'exist',\n      'repeat': ['1', '*'],\n      'node': {\n        'type': 'node',\n        'eleFlag': true,\n        'nodeName': '.',\n        'nodeColor': '#ABABAB',\n        'data': [],\n        \"key\": getComponentKey()\n      }\n    };\n    this.Condition['ElementComposition'].push(tmpExist);\n  },\n  addAll: function addAll() {\n    var tmpAll = {\n      'type': 'all',\n      'node': {\n        'type': 'node',\n        'eleFlag': true,\n        'nodeName': '.',\n        'nodeColor': '#ABABAB',\n        'data': [],\n        \"key\": getComponentKey()\n      }\n    };\n    this.Condition['ElementComposition'].push(tmpAll);\n  },\n  deleteEleNode: function deleteEleNode() {\n    for (var i = 0; i < this.Condition.ElementComposition.length; i++) {\n      if (this.Condition.ElementComposition[i]['node']['key'] == this.selectedDomKey) {\n        this.Condition.ElementComposition.splice(i, 1);\n      }\n    }\n  },\n  updateSelectedDomKey: function updateSelectedDomKey(key) {\n    this.selectedDomKey = key;\n  },\n  getSelectedDomKey: function getSelectedDomKey() {\n    return this.selectedDomKey;\n  },\n  updateSelectedBranch: function updateSelectedBranch(branch, index) {\n    this.selectedBranch = branch;\n    this.branchIndex = index;\n  },\n  getSelectedBranch: function getSelectedBranch() {\n    return this.selectedBranch;\n  },\n  getSelectedBranchIndex: function getSelectedBranchIndex() {\n    return this.branchIndex;\n  },\n  updateSelectedOr: function updateSelectedOr(or, index) {\n    //index=-1 表示当前没有or\n    this.selectedOr = or;\n    this.orIndex = index;\n  },\n  getSelectedOr: function getSelectedOr() {\n    return this.selectedOr;\n  },\n  getSelectedOrIndex: function getSelectedOrIndex() {\n    return this.orIndex;\n  },\n  getRegexIndex: function getRegexIndex() {\n    this.regexIndex += 1;\n    return this.regexIndex - 1;\n  },\n  addEdge: function addEdge(index1, index2) {\n    var flag = 1;\n\n    for (var i = 0; i < this.edgeInfo.length; i++) {\n      if (this.edgeInfo[i][0] == index1 && this.edgeInfo[i][1] == index2) {\n        flag = -1;\n        break;\n      }\n    }\n\n    if (flag == 1) this.edgeInfo.push([index1, index2]);\n  },\n  deleteEdge: function deleteEdge(index) {\n    for (var i = this.edgeInfo.length - 1; i >= 0; i--) {\n      if (this.edgeInfo[i][0] == index || this.edgeInfo[i][1] == index) {\n        this.edgeInfo.splice(i, 1);\n      }\n    }\n  },\n  deleteEdge1: function deleteEdge1(index1, index2) {\n    for (var i = this.edgeInfo.length - 1; i >= 0; i--) {\n      if (this.edgeInfo[i][0] == index1 || this.edgeInfo[i][1] == index2) {\n        this.edgeInfo.splice(i, 1);\n      }\n    }\n  },\n  getEdgeInfo: function getEdgeInfo() {\n    return this.edgeInfo;\n  },\n  updateRegex: function updateRegex(regex) {\n    this.Regex = regex;\n  },\n  getRegex: function getRegex() {\n    return this.Regex;\n  },\n  updateResultList: function updateResultList(data) {\n    this.queryList = data;\n  },\n  getResultList: function getResultList() {\n    return this.queryList;\n  },\n  updatehighlightBar: function updatehighlightBar(data) {\n    this.highlightBar = data;\n  },\n  gethighlightBar: function gethighlightBar() {\n    return this.highlightBar;\n  },\n  updateRegDict: function updateRegDict(data) {\n    this.regDict = data;\n  },\n  getRegDict: function getRegDict() {\n    return this.regDict;\n  },\n  updateResultNum: function updateResultNum(data) {\n    this.resultNum = data;\n  },\n  getResultNum: function getResultNum() {\n    return this.resultNum;\n  },\n  updateCurResult: function updateCurResult(data) {\n    this.curResult = data;\n  },\n  getCurResult: function getCurResult() {\n    return this.curResult;\n  },\n  updateVisTree: function updateVisTree(index) {\n    console.log(\"visTreeDataIndex\", this.visTreeDataIndex);\n    this.visTreeDataIndex = index;\n  },\n  getVisTreeData: function getVisTreeData() {\n    return this.curResult[this.visTreeDataIndex];\n  },\n  updateSameTree: function updateSameTree(data) {\n    this.same_tree = data;\n  },\n  getSameTree: function getSameTree(index) {\n    if (index in this.same_tree) return this.same_tree[index];else return index;\n  }\n};",{"version":3,"sources":["/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/data/dataset.js"],"names":["Dataset","hierarchyData","regexDataList","curIndex","hierarchyDataIn","hierarchyDataOut","connection","initialData","nodeRegexList","visData","visList","regex","Condition","Regex","selectedDomKey","selectedBranch","branchIndex","selectedOr","orIndex","edgeInfo","regexIndex","resultList","highlightBar","regDict","resultNum","curResult","visTreeDataIndex","same_tree","getComponentKey","loadHierarchicalData","tychei","prototype","init","initData","data","returnInitData","initialRegexNode","tmpData1","tmpData2","tmpList","tmpNodeList","push","resetRegex","index","tmpName","returnRegex","returnRegexContent","returnHierarchyDataIn","Object","keys","length","key","tmpTree","updateHierarchyDataOut","processed_hierarchy_data","returnHierarchyDataOut","DataOut2DataIn","indexOut","indexIn","item","DataOutFlow","nextIndex","returnConnection","UpdataNodeList","node","flag","tmpNode","len1","len2","tmpData","tmpFlag","tmpKey","JSON","parse","stringify","returnNodeList","updateRegexName","name","returnRegexName","deleteDataConnection","map","val","i","splice","deleteDataNode","tmpIndex","updateVis","updateVisList","getVisData","getVisList","getCondition","addExist","tmpExist","addAll","tmpAll","deleteEleNode","ElementComposition","updateSelectedDomKey","getSelectedDomKey","updateSelectedBranch","branch","getSelectedBranch","getSelectedBranchIndex","updateSelectedOr","or","getSelectedOr","getSelectedOrIndex","getRegexIndex","addEdge","index1","index2","deleteEdge","deleteEdge1","getEdgeInfo","updateRegex","getRegex","updateResultList","queryList","getResultList","updatehighlightBar","gethighlightBar","updateRegDict","getRegDict","updateResultNum","getResultNum","updateCurResult","getCurResult","updateVisTree","console","log","getVisTreeData","updateSameTree","getSameTree"],"mappings":";;;;AAAA,OAAO,SAASA,OAAT,GAAoB;AACvB,OAAKC,aAAL,GAAqB,EAArB;AACA,OAAKC,aAAL,GAAqB,EAArB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,gBAAL,GAAwB,EAAxB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,WAAL,GAAmB,EAAnB;AACA,OAAKC,aAAL,GAAqB,EAArB;AAEA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,KAAL,GAAa,EAAb;AAEA,OAAKC,SAAL,GAAiB,EAAjB;AACA,OAAKC,KAAL;AAEA,OAAKC,cAAL,GAAsB,CAAC,CAAvB;AAEA,OAAKC,cAAL,GAAsB,EAAtB;AACA,OAAKC,WAAL,GAAmB,CAAC,CAApB;AAEA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,OAAL,GAAe,CAAC,CAAhB;AAEA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,YAAL,GAAoB,EAApB;AAGA,OAAKC,OAAL,GAAe,EAAf;AAGA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,SAAL,GAAiB,EAAjB;AAEA,OAAKC,gBAAL,GAAwB,CAAxB;AAEA,OAAKC,SAAL,GAAiB,EAAjB;AAEH;AAED,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA9B,OAAO,CAAC+B,SAAR,GAAoB;AAChBC,EAAAA,IAAI,EAAE,gBAAW;AAEf,SAAKpB,SAAL,GAAiB;AACf,4BAAsB,EADP;AAGf,qBAAe;AACf,cAAM,EADS;AAEf,qBAAa,EAFE;AAGf,iBAAS,CAAC,EAAD,EAAK,EAAL;AAHM,OAHA;AAQf,cAAQ,CAAC,CAAD,EAAI,IAAJ,CARO;AASf,gBAAU,CAAC,CAAD,EAAI,EAAJ,CATK;AAUf,eAAS,CAAC,CAAD,EAAI,IAAJ,CAVM;AAWf,kBAAY;AAXG,KAAjB;AAaD,GAhBe;AAiBhBqB,EAAAA,QAAQ,EAAE,kBAASC,IAAT,EAAc;AACtB,SAAK3B,WAAL,GAAmB2B,IAAnB;AACD,GAnBe;AAoBhBC,EAAAA,cAAc,EAAE,0BAAU;AACxB,WAAO,KAAK5B,WAAZ;AACD,GAtBe;AAuBhB6B,EAAAA,gBAAgB,EAAE,4BAAU;AACxB,QAAIzB,KAAK,GAAG;AACR,gBAAS;AACP,gBAAQ,QADD;AAEP,uBAAc,CACZ;AACE,kBAAQ,MADV;AAEE,oBAAU,CAAC,CAAD,EAAG,CAAH,CAFZ;AAGE,iBAAOiB,eAAe,EAHxB;AAIE,yBAAc,CACZ;AACA;AACA;AACA;AACA;AACA;AANY;AAJhB,SADY;AAFP,OADD;AAoBR,mBAAa;AACX,qBAAa,MADF;AAEX,cAAM,KAFK;AAGX,iBAAS;AAHE,OApBL;AAyBR,mBAAa;AAzBL,KAAZ;AA2BA,QAAIS,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,CAAC,EAAD,CAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAG,CAChB;AACE,cAAO,EADT;AAEE,kBAAW,GAFb;AAGE,mBAAa;AAHf,KADgB,EAMhB;AACE,cAAO;AAAC,iBAAQ;AAAC,gBAAK,GAAN;AAAU,mBAAQ;AAAlB;AAAT,OADT;AAEE,kBAAW,GAFb;AAGE,mBAAa;AAHf,KANgB,EAWhB;AACE,cAAO;AAAC,kBAAS;AAAC,gBAAK,GAAN;AAAU,mBAAQ;AAAlB;AAAV,OADT;AAEE,kBAAW,GAFb;AAGE,mBAAa;AAHf,KAXgB,CAAlB;AAiBA,SAAKpC,eAAL,CAAqBqC,IAArB,CAA0BJ,QAA1B;AACA,SAAKhC,gBAAL,CAAsBoC,IAAtB,CAA2BH,QAA3B;AACA,SAAKpC,aAAL,CAAmBuC,IAAnB,CAAwB9B,KAAxB;AACA,SAAKL,UAAL,CAAgBmC,IAAhB,CAAqBF,OAArB;AACA,SAAK/B,aAAL,CAAmBiC,IAAnB,CAAwBD,WAAxB;AACA,SAAKrC,QAAL,GAAgB,KAAKA,QAAL,GAAgB,CAAhC;AACA,WAAO,KAAKA,QAAL,GAAgB,CAAvB;AACH,GA9Ee;AA+EhBuC,EAAAA,UAAU,EAAE,oBAASC,KAAT,EAAe;AACzB,QAAIC,OAAO,GAAG,KAAK1C,aAAL,CAAmByC,KAAnB,EAA0B,WAA1B,CAAd;AACE,SAAKzC,aAAL,CAAmByC,KAAnB,IAA4B;AACxB,gBAAS;AACP,gBAAQ,QADD;AAEP,uBAAc,CACZ;AACE,kBAAQ,MADV;AAEE,oBAAU,CAAC,CAAD,EAAG,CAAH,CAFZ;AAGE,iBAAOf,eAAe,EAHxB;AAIE,yBAAc,CACZ;AACA;AACA;AACA;AACA;AACA;AANY;AAJhB,SADY;AAFP,OADe;AAoBxB,mBAAa;AACX,qBAAa,MADF;AAEX,cAAM,KAFK;AAGX,iBAAS;AAHE,OApBW;AAyBxB,mBAAae,KAzBW;AA0BxB,mBAAaC;AA1BW,KAA5B;AA4BH,GA7Ge;AA8GhBC,EAAAA,WAAW,EAAE,qBAASF,KAAT,EAAe;AACxB,WAAO,KAAKzC,aAAL,CAAmByC,KAAnB,CAAP;AACH,GAhHe;AAiHhBG,EAAAA,kBAAkB,EAAE,4BAASH,KAAT,EAAe;AACjC,WAAO,KAAKzC,aAAL,CAAmByC,KAAnB,EAA0B,cAA1B,CAAP;AACH,GAnHiB;AAoHhBI,EAAAA,qBAAqB,EAAE,+BAASJ,KAAT,EAAgB;AACrC,QAAGK,MAAM,CAACC,IAAP,CAAY,KAAK7C,eAAL,CAAqBuC,KAArB,CAAZ,EAAyCO,MAAzC,IAAmD,CAAtD,EAAwD;AACtD,aAAO,CAAC,KAAK3C,WAAN,CAAP;AACD,KAFD,MAGI;AACF,UAAIgC,OAAO,GAAG,EAAd;;AACA,WAAI,IAAIY,GAAR,IAAe,KAAK/C,eAAL,CAAqBuC,KAArB,CAAf,EAA2C;AAAA;AAAA;AAAA;;AAAA;AACzC,+BAAmB,KAAKvC,eAAL,CAAqBuC,KAArB,EAA4BQ,GAA5B,CAAnB,8HAAoD;AAAA,gBAA5CC,OAA4C;AAClDb,YAAAA,OAAO,CAACE,IAAR,CAAaW,OAAb;AACD;AAHwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI1C;;AACD,aAAOb,OAAP;AACD;AAEF,GAlIe;AAoIhBc,EAAAA,sBAAsB,EAAE,gCAASC,wBAAT,EAAmCX,KAAnC,EAA0C;AAChE,SAAKtC,gBAAL,CAAsBsC,KAAtB,IAA+BW,wBAAwB,CAAC,MAAD,CAAvD;AACD,GAtIe;AAuIhBC,EAAAA,sBAAsB,EAAE,gCAASZ,KAAT,EAAgB;AACtC,WAAO,KAAKtC,gBAAL,CAAsBsC,KAAtB,CAAP;AACD,GAzIe;AA2IhBa,EAAAA,cAAc,EAAE,wBAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAC1C,SAAKpD,UAAL,CAAgBmD,QAAhB,EAA0BhB,IAA1B,CAA+BiB,OAA/B;AACA,SAAKtD,eAAL,CAAqBsD,OAArB,EAA8BD,QAA9B,IAA0C,EAA1C;AAF0C;AAAA;AAAA;;AAAA;AAG1C,4BAAgB,KAAKpD,gBAAL,CAAsBoD,QAAtB,CAAhB,mIAAgD;AAAA,YAAxCE,IAAwC;AAAA;AAAA;AAAA;;AAAA;AAC9C,gCAAmBA,IAAnB,mIAAwB;AAAA,gBAAhBP,OAAgB;AACtB,iBAAKhD,eAAL,CAAqBsD,OAArB,EAA8BD,QAA9B,EAAwChB,IAAxC,CAA6CW,OAA7C;AACD;AAH6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI/C;AAPyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3C,GAnJe;AAqJhBQ,EAAAA,WAAW,EAAE,qBAASjB,KAAT,EAAe;AAAA;AAAA;AAAA;;AAAA;AAC1B,4BAAqB,KAAKrC,UAAL,CAAgBqC,KAAhB,CAArB,mIAA4C;AAAA,YAApCkB,SAAoC;AAC1C,aAAKzD,eAAL,CAAqByD,SAArB,EAAgClB,KAAhC,IAAyC,EAAzC;AAD0C;AAAA;AAAA;;AAAA;AAE1C,gCAAgB,KAAKtC,gBAAL,CAAsBsC,KAAtB,CAAhB,mIAA6C;AAAA,gBAArCgB,IAAqC;AAAA;AAAA;AAAA;;AAAA;AAC3C,oCAAmBA,IAAnB,mIAAwB;AAAA,oBAAhBP,OAAgB;AACtB,qBAAKhD,eAAL,CAAqByD,SAArB,EAAgClB,KAAhC,EAAuCF,IAAvC,CAA4CW,OAA5C;AACD;AAH0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI5C;AANyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3C;AARyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS3B,GA9Je;AA+JhBU,EAAAA,gBAAgB,EAAE,0BAASnB,KAAT,EAAe;AAC/B,WAAO,KAAKrC,UAAL,CAAgBqC,KAAhB,CAAP;AACD,GAjKe;AAmKhBoB,EAAAA,cAAc,EAAE,wBAASC,IAAT,EAAerB,KAAf,EAAqB;AACnC,QAAIsB,IAAI,GAAG,IAAX;AADmC;AAAA;AAAA;;AAAA;AAEnC,4BAAmB,KAAKzD,aAAL,CAAmBmC,KAAnB,CAAnB,mIAA6C;AAAA,YAArCuB,QAAqC;AAC3C,YAAIC,IAAI,GAAGnB,MAAM,CAACC,IAAP,CAAYe,IAAI,CAAC,MAAD,CAAhB,EAA0Bd,MAArC;AACA,YAAIkB,IAAI,GAAIpB,MAAM,CAACC,IAAP,CAAYiB,QAAO,CAAC,MAAD,CAAnB,EAA6BhB,MAAzC;;AACA,YAAGiB,IAAI,IAAE,CAAN,IAAWC,IAAI,IAAE,CAApB,EAAsB;AACpB,cAAGJ,IAAI,CAAC,UAAD,CAAJ,IAAkBE,QAAO,CAAC,UAAD,CAAzB,IAAyCF,IAAI,CAAC,WAAD,CAAJ,IAAmBE,QAAO,CAAC,WAAD,CAAtE,EAAoF;AAClFD,YAAAA,IAAI,GAAG,KAAP;AACA;AACD;AACF,SALD,MAMK,IAAGE,IAAI,IAAEC,IAAT,EAAc;AACjB,cAAIC,OAAO,GAAGH,QAAO,CAAC,MAAD,CAArB;AACA,cAAII,OAAO,GAAG,IAAd;;AACA,eAAI,IAAIC,MAAR,IAAkBF,OAAlB,EAA0B;AACxB,gBAAGE,MAAM,IAAIP,IAAI,CAAC,MAAD,CAAjB,EAA0B;AACxB,kBAAGK,OAAO,CAACE,MAAD,CAAP,CAAgB,IAAhB,KAAuBP,IAAI,CAAC,MAAD,CAAJ,CAAaO,MAAb,EAAqB,IAArB,CAA1B,EAAqD;AACnD,oBAAGF,OAAO,CAACE,MAAD,CAAP,CAAgB,OAAhB,KAA0BP,IAAI,CAAC,MAAD,CAAJ,CAAaO,MAAb,EAAqB,OAArB,CAA7B,EAA2D;AACzD;AACD;AACF;AACF;;AACDD,YAAAA,OAAO,GAAG,KAAV;AACA;AACD;;AACD,cAAGA,OAAH,EAAW;AACT,gBAAGN,IAAI,CAAC,UAAD,CAAJ,IAAkBE,QAAO,CAAC,UAAD,CAAzB,IAAyCF,IAAI,CAAC,WAAD,CAAJ,IAAmBE,QAAO,CAAC,WAAD,CAAtE,EAAoF;AAClFD,cAAAA,IAAI,GAAG,KAAP;AACA;AACD;AACF;AACF;AACF;AAhCkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCnC,QAAGA,IAAH,EAAQ;AACN,UAAIC,OAAO,GAAG;AACZ,gBAAQ,UADI;AAEZ,gBAAO,EAFK;AAGZ,oBAAW,EAHC;AAIZ,qBAAa;AAJD,OAAd;AAMAA,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBF,IAAI,CAAC,UAAD,CAA1B;AACAE,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBF,IAAI,CAAC,WAAD,CAA3B;AACAE,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,IAAI,CAAC,MAAD,CAAnB,CAAX,CAAlB;AACAE,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBtC,eAAe,EAAhC;AACA,WAAKpB,aAAL,CAAmBmC,KAAnB,EAA0BF,IAA1B,CAA+ByB,OAA/B;AAED,KA9CkC,CA+CnC;;AACD,GAnNe;AAoNhBS,EAAAA,cAAc,EAAE,wBAAShC,KAAT,EAAe;AAC7B,WAAO,KAAKnC,aAAL,CAAmBmC,KAAnB,CAAP;AACD,GAtNe;AAuNhBiC,EAAAA,eAAe,EAAE,yBAASC,IAAT,EAAelC,KAAf,EAAqB;AACpC,SAAKzC,aAAL,CAAmByC,KAAnB,EAA0B,WAA1B,IAAyCkC,IAAzC;AACD,GAzNe;AA0NhBC,EAAAA,eAAe,EAAE,yBAASnC,KAAT,EAAe;AAC9B,WAAO,KAAKzC,aAAL,CAAmByC,KAAnB,EAA0B,WAA1B,CAAP;AACD,GA5Ne;AA8NhBoC,EAAAA,oBAAoB,EAAE,8BAAStB,QAAT,EAAmBC,OAAnB,EAA2B;AAAA;;AAC/C,SAAKpD,UAAL,CAAgBmD,QAAhB,EAA0BuB,GAA1B,CAA8B,UAACC,GAAD,EAAMC,CAAN,EAAY;AACxC,UAAGD,GAAG,IAAIvB,OAAV,EAAkB;AAChB,QAAA,KAAI,CAACpD,UAAL,CAAgBmD,QAAhB,EAA0B0B,MAA1B,CAAiCD,CAAjC,EAAoC,CAApC;AACD;AACF,KAJD;AAKA,WAAO,KAAK9E,eAAL,CAAqBsD,OAArB,EAA8BD,QAA9B,CAAP;AACD,GArOe;AAsOhB2B,EAAAA,cAAc,EAAE,wBAASzC,KAAT,EAAe;AAC7B,SAAI,IAAIQ,GAAR,IAAe,KAAK/C,eAAL,CAAqBuC,KAArB,CAAf,EAA2C;AACzC,WAAKoC,oBAAL,CAA0B5B,GAA1B,EAA+BR,KAA/B;AACD;;AAH4B;AAAA;AAAA;;AAAA;AAI7B,4BAAoB,KAAKrC,UAAL,CAAgBqC,KAAhB,CAApB,mIAA2C;AAAA,YAAnC0C,QAAmC;AACzC,aAAKN,oBAAL,CAA0BpC,KAA1B,EAAiC0C,QAAjC;AACD;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B,GA7Oe;AA+OhBC,EAAAA,SAAS,EAAE,mBAASpD,IAAT,EAAc;AACvB,SAAKzB,OAAL,GAAeyB,IAAf;AACD,GAjPe;AAkPhBqD,EAAAA,aAAa,EAAE,uBAASrD,IAAT,EAAc;AAC3B,SAAKxB,OAAL,GAAewB,IAAf;AACD,GApPe;AAqPhBsD,EAAAA,UAAU,EAAE,sBAAU;AACpB,WAAO,KAAK/E,OAAZ;AACD,GAvPe;AAwPhBgF,EAAAA,UAAU,EAAE,sBAAU;AACpB,WAAO,KAAKA,UAAZ;AACD,GA1Pe;AA2PhBC,EAAAA,YAAY,EAAE,wBAAU;AACtB,WAAO,KAAK9E,SAAZ;AACD,GA7Pe;AA8PhB+E,EAAAA,QAAQ,EAAE,oBAAU;AAClB,QAAIC,QAAQ,GAAG;AACX,cAAO,OADI;AAEX,gBAAU,CAAC,GAAD,EAAM,GAAN,CAFC;AAGX,cAAO;AACH,gBAAQ,MADL;AAEH,mBAAW,IAFR;AAGH,oBAAY,GAHT;AAIH,qBAAa,SAJV;AAKH,gBAAO,EALJ;AAQH,eAAOhE,eAAe;AARnB;AAHI,KAAf;AAcA,SAAKhB,SAAL,CAAe,oBAAf,EAAqC6B,IAArC,CAA0CmD,QAA1C;AACD,GA9Qe;AA+QhBC,EAAAA,MAAM,EAAE,kBAAU;AAChB,QAAIC,MAAM,GAAI;AACZ,cAAO,KADK;AAEZ,cAAO;AACH,gBAAQ,MADL;AAEH,mBAAW,IAFR;AAGH,oBAAY,GAHT;AAIH,qBAAa,SAJV;AAKH,gBAAO,EALJ;AAQH,eAAOlE,eAAe;AARnB;AAFK,KAAd;AAaA,SAAKhB,SAAL,CAAe,oBAAf,EAAqC6B,IAArC,CAA0CqD,MAA1C;AACD,GA9Re;AA+RhBC,EAAAA,aAAa,EAAE,yBAAU;AACvB,SAAI,IAAIb,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKtE,SAAL,CAAeoF,kBAAf,CAAkC9C,MAAhD,EAAwDgC,CAAC,EAAzD,EAA4D;AAC1D,UAAG,KAAKtE,SAAL,CAAeoF,kBAAf,CAAkCd,CAAlC,EAAqC,MAArC,EAA6C,KAA7C,KAAuD,KAAKpE,cAA/D,EAA8E;AAC5E,aAAKF,SAAL,CAAeoF,kBAAf,CAAkCb,MAAlC,CAAyCD,CAAzC,EAA4C,CAA5C;AACD;AACF;AACF,GArSe;AAsShBe,EAAAA,oBAAoB,EAAE,8BAAS9C,GAAT,EAAa;AACjC,SAAKrC,cAAL,GAAsBqC,GAAtB;AACD,GAxSe;AAyShB+C,EAAAA,iBAAiB,EAAE,6BAAU;AAC3B,WAAO,KAAKpF,cAAZ;AACD,GA3Se;AA4ShBqF,EAAAA,oBAAoB,EAAE,8BAASC,MAAT,EAAiBzD,KAAjB,EAAuB;AAC3C,SAAK5B,cAAL,GAAsBqF,MAAtB;AACA,SAAKpF,WAAL,GAAmB2B,KAAnB;AACD,GA/Se;AAgThB0D,EAAAA,iBAAiB,EAAE,6BAAU;AAC3B,WAAO,KAAKtF,cAAZ;AACD,GAlTe;AAmThBuF,EAAAA,sBAAsB,EAAE,kCAAU;AAChC,WAAO,KAAKtF,WAAZ;AACD,GArTe;AAsThBuF,EAAAA,gBAAgB,EAAE,0BAASC,EAAT,EAAa7D,KAAb,EAAmB;AACnC;AACA,SAAK1B,UAAL,GAAkBuF,EAAlB;AACA,SAAKtF,OAAL,GAAeyB,KAAf;AACD,GA1Te;AA2ThB8D,EAAAA,aAAa,EAAE,yBAAU;AACvB,WAAO,KAAKxF,UAAZ;AACD,GA7Te;AA8ThByF,EAAAA,kBAAkB,EAAE,8BAAU;AAC5B,WAAO,KAAKxF,OAAZ;AACD,GAhUe;AAiUhByF,EAAAA,aAAa,EAAE,yBAAU;AACvB,SAAKvF,UAAL,IAAmB,CAAnB;AACA,WAAO,KAAKA,UAAL,GAAgB,CAAvB;AACD,GApUe;AAqUhBwF,EAAAA,OAAO,EAAE,iBAASC,MAAT,EAAiBC,MAAjB,EAAwB;AAC/B,QAAI7C,IAAI,GAAG,CAAX;;AACA,SAAI,IAAIiB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAK/D,QAAL,CAAc+B,MAA7B,EAAqCgC,CAAC,EAAtC,EAAyC;AACvC,UAAG,KAAK/D,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuB2B,MAAvB,IAAiC,KAAK1F,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuB4B,MAA3D,EAAkE;AAChE7C,QAAAA,IAAI,GAAG,CAAC,CAAR;AACA;AACD;AACF;;AACD,QAAGA,IAAI,IAAI,CAAX,EACE,KAAK9C,QAAL,CAAcsB,IAAd,CAAmB,CAACoE,MAAD,EAASC,MAAT,CAAnB;AACH,GA/Ue;AAgVhBC,EAAAA,UAAU,EAAE,oBAASpE,KAAT,EAAe;AACzB,SAAI,IAAIuC,CAAC,GAAC,KAAK/D,QAAL,CAAc+B,MAAd,GAAqB,CAA/B,EAAkCgC,CAAC,IAAE,CAArC,EAAwCA,CAAC,EAAzC,EAA4C;AAC1C,UAAG,KAAK/D,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuBvC,KAAvB,IAAgC,KAAKxB,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuBvC,KAA1D,EAAgE;AAC9D,aAAKxB,QAAL,CAAcgE,MAAd,CAAqBD,CAArB,EAAwB,CAAxB;AACD;AACF;AACF,GAtVe;AAuVhB8B,EAAAA,WAAW,EAAE,qBAASH,MAAT,EAAiBC,MAAjB,EAAwB;AACnC,SAAI,IAAI5B,CAAC,GAAC,KAAK/D,QAAL,CAAc+B,MAAd,GAAqB,CAA/B,EAAkCgC,CAAC,IAAE,CAArC,EAAwCA,CAAC,EAAzC,EAA4C;AAC1C,UAAG,KAAK/D,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuB2B,MAAvB,IAAiC,KAAK1F,QAAL,CAAc+D,CAAd,EAAiB,CAAjB,KAAuB4B,MAA3D,EAAkE;AAChE,aAAK3F,QAAL,CAAcgE,MAAd,CAAqBD,CAArB,EAAwB,CAAxB;AACD;AACF;AACF,GA7Ve;AA8VhB+B,EAAAA,WAAW,EAAE,uBAAU;AACrB,WAAO,KAAK9F,QAAZ;AACD,GAhWe;AAiWhB+F,EAAAA,WAAW,EAAE,qBAASvG,KAAT,EAAe;AAC1B,SAAKE,KAAL,GAAaF,KAAb;AACD,GAnWe;AAoWhBwG,EAAAA,QAAQ,EAAE,oBAAU;AAClB,WAAO,KAAKtG,KAAZ;AACD,GAtWe;AAuWhBuG,EAAAA,gBAAgB,EAAE,0BAASlF,IAAT,EAAc;AAC9B,SAAKmF,SAAL,GAAiBnF,IAAjB;AACD,GAzWe;AA0WhBoF,EAAAA,aAAa,EAAE,yBAAU;AACvB,WAAO,KAAKD,SAAZ;AACD,GA5We;AA6WhBE,EAAAA,kBAAkB,EAAE,4BAASrF,IAAT,EAAc;AAChC,SAAKZ,YAAL,GAAoBY,IAApB;AACD,GA/We;AAgXhBsF,EAAAA,eAAe,EAAE,2BAAU;AACzB,WAAO,KAAKlG,YAAZ;AACD,GAlXe;AAmXhBmG,EAAAA,aAAa,EAAE,uBAASvF,IAAT,EAAc;AAC3B,SAAKX,OAAL,GAAeW,IAAf;AACD,GArXe;AAsXhBwF,EAAAA,UAAU,EAAE,sBAAU;AACpB,WAAO,KAAKnG,OAAZ;AACD,GAxXe;AAyXhBoG,EAAAA,eAAe,EAAE,yBAASzF,IAAT,EAAc;AAC7B,SAAKV,SAAL,GAAiBU,IAAjB;AACD,GA3Xe;AA4XhB0F,EAAAA,YAAY,EAAE,wBAAU;AACtB,WAAO,KAAKpG,SAAZ;AACD,GA9Xe;AA+XhBqG,EAAAA,eAAe,EAAE,yBAAS3F,IAAT,EAAc;AAC7B,SAAKT,SAAL,GAAiBS,IAAjB;AACD,GAjYe;AAkYhB4F,EAAAA,YAAY,EAAE,wBAAU;AACtB,WAAO,KAAKrG,SAAZ;AACD,GApYe;AAqYhBsG,EAAAA,aAAa,EAAE,uBAASpF,KAAT,EAAe;AAC5BqF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKvG,gBAArC;AACA,SAAKA,gBAAL,GAAwBiB,KAAxB;AACD,GAxYe;AAyYhBuF,EAAAA,cAAc,EAAE,0BAAU;AACxB,WAAO,KAAKzG,SAAL,CAAe,KAAKC,gBAApB,CAAP;AACD,GA3Ye;AA4YhByG,EAAAA,cAAc,EAAE,wBAASjG,IAAT,EAAc;AAC5B,SAAKP,SAAL,GAAiBO,IAAjB;AACD,GA9Ye;AA+YhBkG,EAAAA,WAAW,EAAE,qBAASzF,KAAT,EAAe;AAC1B,QAAGA,KAAK,IAAI,KAAKhB,SAAjB,EACE,OAAO,KAAKA,SAAL,CAAegB,KAAf,CAAP,CADF,KAGE,OAAOA,KAAP;AACH;AApZe,CAApB","sourcesContent":["export function Dataset () {\n    this.hierarchyData = {}\n    this.regexDataList = []\n    this.curIndex = 0\n    this.hierarchyDataIn = []\n    this.hierarchyDataOut = []\n    this.connection = []\n    this.initialData = {}\n    this.nodeRegexList = []\n\n    this.visData = {}\n    this.visList = []\n    this.regex = {}\n\n    this.Condition = {}\n    this.Regex\n\n    this.selectedDomKey = -1\n\n    this.selectedBranch = {}\n    this.branchIndex = -2\n\n    this.selectedOr = {}\n    this.orIndex = -2\n\n    this.edgeInfo = []\n    this.regexIndex = 0\n    this.resultList = []\n    this.highlightBar = {\n\n    }\n    this.regDict = {\n\n    }\n    this.resultNum = 0\n    this.curResult = []\n\n    this.visTreeDataIndex = 0\n\n    this.same_tree = {}\n\n}\n\nimport { getComponentKey } from '@/utils/componentkey.js'\nimport { loadHierarchicalData } from '@/data/dataloading.js'\nimport { tychei } from 'seedrandom'\n\nDataset.prototype = {\n    init: function() {\n      \n      this.Condition = {\n        'ElementComposition': [\n        ],\n        'Aggregation': {\n        'op': '',\n        'attribute': '',\n        'value': ['', '']\n        },\n        'Size': [0, 7188],\n        'Height': [0, 10],\n        'Width': [0, 2000],\n        'Balanced': true,\n      }\n    },\n    initData: function(data){\n      this.initialData = data\n    },\n    returnInitData: function(){\n      return this.initialData\n    },\n    initialRegexNode: function(){\n        let regex = {\n            \"target\":{\n              \"type\": \"target\",\n              \"composition\":[\n                {\n                  \"type\": \"path\",\n                  \"repeat\": [1,1],\n                  \"key\": getComponentKey(),\n                  \"composition\":[\n                    // {          \n                    //     \"type\": \"node\",\n                    //     \"repeat\": [1,1],\n                    //     \"data\": {},\n                    //     \"key\": getComponentKey()\n                    // }\n                  ]\n                }\n              ]\n    \n            },\n            \"condition\": {\n              \"attribute\": \"size\",\n              \"op\": \"max\",\n              \"value\": \"\"\n            },\n            \"regexName\": 'untitled'\n        }\n        let tmpData1 = {}\n        let tmpData2 = [[]]\n        let tmpList = []\n        let tmpNodeList = [\n          {\n            'data':{},\n            'nodeName':'.',\n            'nodeColor': '#8E9898',\n          },\n          {\n            'data':{\"depth\":{\"op\":\"=\",\"value\":0}},\n            'nodeName':'^',\n            'nodeColor': '#D2BA4D',\n          },\n          {\n            'data':{\"degree\":{\"op\":\"=\",\"value\":0}},\n            'nodeName':'$',\n            'nodeColor': '#38B03F',\n          }\n        ]\n        this.hierarchyDataIn.push(tmpData1)\n        this.hierarchyDataOut.push(tmpData2)\n        this.regexDataList.push(regex)\n        this.connection.push(tmpList)\n        this.nodeRegexList.push(tmpNodeList)\n        this.curIndex = this.curIndex + 1\n        return this.curIndex - 1\n    },\n    resetRegex: function(index){\n      let tmpName = this.regexDataList[index]['regexName']\n        this.regexDataList[index] = {\n            \"target\":{\n              \"type\": \"target\",\n              \"composition\":[\n                {\n                  \"type\": \"path\",\n                  \"repeat\": [1,1],\n                  \"key\": getComponentKey(),\n                  \"composition\":[\n                    // {          \n                    //     \"type\": \"node\",\n                    //     \"repeat\": [1,1],\n                    //     \"data\": {},\n                    //     \"key\": getComponentKey()\n                    // }\n                  ]\n                }\n              ]\n    \n            },\n            \"condition\": {\n              \"attribute\": \"size\",\n              \"op\": \"max\",\n              \"value\": \"\"\n            },\n            \"dataIndex\": index,\n            \"regexName\": tmpName\n          }\n    },\n    returnRegex: function(index){\n        return this.regexDataList[index]\n    },\n    returnRegexContent: function(index){\n      return this.regexDataList[index]['regexContent']\n  },\n    returnHierarchyDataIn: function(index) {\n      if(Object.keys(this.hierarchyDataIn[index]).length == 0){\n        return [this.initialData]\n      }\n      else{\n        let tmpList = []\n        for(let key in this.hierarchyDataIn[index]){\n          for(let tmpTree of this.hierarchyDataIn[index][key]){\n            tmpList.push(tmpTree)\n          }\n        }\n        return tmpList\n      }\n      \n    },\n    \n    updateHierarchyDataOut: function(processed_hierarchy_data, index) {\n      this.hierarchyDataOut[index] = processed_hierarchy_data['data']\n    },\n    returnHierarchyDataOut: function(index) {\n      return this.hierarchyDataOut[index]\n    },\n\n    DataOut2DataIn: function(indexOut, indexIn) {\n      this.connection[indexOut].push(indexIn)\n      this.hierarchyDataIn[indexIn][indexOut] = []\n      for(let item of this.hierarchyDataOut[indexOut]){\n        for(let tmpTree of item){\n          this.hierarchyDataIn[indexIn][indexOut].push(tmpTree)\n        }\n      }\n    },\n\n    DataOutFlow: function(index){\n      for(let nextIndex of this.connection[index]){\n        this.hierarchyDataIn[nextIndex][index] = []\n        for(let item of this.hierarchyDataOut[index]){\n          for(let tmpTree of item){\n            this.hierarchyDataIn[nextIndex][index].push(tmpTree)\n          }\n        }\n      }\n    },\n    returnConnection: function(index){\n      return this.connection[index]\n    },\n\n    UpdataNodeList: function(node, index){\n      let flag = true\n      for(let tmpNode of this.nodeRegexList[index]){\n        let len1 = Object.keys(node['data']).length\n        let len2 =  Object.keys(tmpNode['data']).length\n        if(len1==0 && len2==0){\n          if(node['nodeName']==tmpNode['nodeName'] && node['nodeColor']==tmpNode['nodeColor']){\n            flag = false \n            break\n          }\n        }\n        else if(len1==len2){\n          let tmpData = tmpNode['data']\n          let tmpFlag = true\n          for(let tmpKey in tmpData){\n            if(tmpKey in node['data']){\n              if(tmpData[tmpKey]['op']==node['data'][tmpKey]['op']){\n                if(tmpData[tmpKey]['value']==node['data'][tmpKey]['value']){\n                  continue                  \n                }\n              }\n            }  \n            tmpFlag = false\n            break\n          }\n          if(tmpFlag){\n            if(node['nodeName']==tmpNode['nodeName'] && node['nodeColor']==tmpNode['nodeColor']){\n              flag = false \n              break\n            }\n          }\n        }\n      }\n      if(flag){\n        let tmpNode = {\n          'type': 'listNode',\n          'data':{},\n          'nodeName':'',\n          'nodeColor': '',\n        }\n        tmpNode['nodeName'] = node['nodeName']\n        tmpNode['nodeColor'] = node['nodeColor']\n        tmpNode['data'] = JSON.parse(JSON.stringify(node['data']))\n        tmpNode['key'] = getComponentKey()     \n        this.nodeRegexList[index].push(tmpNode)\n        \n      }\n      //this.nodeRegexList[index].push(node)\n    },\n    returnNodeList: function(index){\n      return this.nodeRegexList[index]\n    },\n    updateRegexName: function(name, index){\n      this.regexDataList[index]['regexName'] = name\n    },\n    returnRegexName: function(index){\n      return this.regexDataList[index]['regexName']\n    },\n\n    deleteDataConnection: function(indexOut, indexIn){\n      this.connection[indexOut].map((val, i) => {\n        if(val == indexIn){\n          this.connection[indexOut].splice(i ,1)\n        }\n      })\n      delete this.hierarchyDataIn[indexIn][indexOut]\n    },\n    deleteDataNode: function(index){\n      for(let key in this.hierarchyDataIn[index]){\n        this.deleteDataConnection(key, index)\n      }\n      for(let tmpIndex of this.connection[index]){\n        this.deleteDataConnection(index, tmpIndex)\n      }\n    },\n\n    updateVis: function(data){\n      this.visData = data\n    },\n    updateVisList: function(data){\n      this.visList = data\n    },\n    getVisData: function(){\n      return this.visData\n    },\n    getVisList: function(){\n      return this.getVisList\n    },\n    getCondition: function(){\n      return this.Condition\n    },\n    addExist: function(){\n      let tmpExist = {\n          'type':'exist',\n          'repeat': ['1', '*'],\n          'node':{\n              'type': 'node',\n              'eleFlag': true,\n              'nodeName': '.',\n              'nodeColor': '#ABABAB',\n              'data':[\n\n              ],\n              \"key\": getComponentKey()\n          }\n      }\n      this.Condition['ElementComposition'].push(tmpExist)\n    },\n    addAll: function(){\n      let tmpAll =  {\n        'type':'all',\n        'node':{\n            'type': 'node',\n            'eleFlag': true,\n            'nodeName': '.',\n            'nodeColor': '#ABABAB',\n            'data':[\n\n            ],\n            \"key\": getComponentKey()\n        },\n    }\n      this.Condition['ElementComposition'].push(tmpAll)\n    },\n    deleteEleNode: function(){\n      for(let i=0;i<this.Condition.ElementComposition.length; i++){\n        if(this.Condition.ElementComposition[i]['node']['key'] == this.selectedDomKey){\n          this.Condition.ElementComposition.splice(i, 1)\n        }\n      }\n    },\n    updateSelectedDomKey: function(key){\n      this.selectedDomKey = key\n    },\n    getSelectedDomKey: function(){\n      return this.selectedDomKey\n    },\n    updateSelectedBranch: function(branch, index){\n      this.selectedBranch = branch\n      this.branchIndex = index\n    },\n    getSelectedBranch: function(){\n      return this.selectedBranch\n    },\n    getSelectedBranchIndex: function(){\n      return this.branchIndex \n    },\n    updateSelectedOr: function(or, index){\n      //index=-1 表示当前没有or\n      this.selectedOr = or\n      this.orIndex = index\n    },\n    getSelectedOr: function(){\n      return this.selectedOr\n    },\n    getSelectedOrIndex: function(){\n      return this.orIndex \n    },\n    getRegexIndex: function(){\n      this.regexIndex += 1\n      return this.regexIndex-1 \n    },\n    addEdge: function(index1, index2){\n      var flag = 1\n      for(let i=0; i<this.edgeInfo.length; i++){\n        if(this.edgeInfo[i][0] == index1 && this.edgeInfo[i][1] == index2){\n          flag = -1\n          break\n        }\n      }\n      if(flag == 1)\n        this.edgeInfo.push([index1, index2])\n    },\n    deleteEdge: function(index){\n      for(let i=this.edgeInfo.length-1; i>=0; i--){\n        if(this.edgeInfo[i][0] == index || this.edgeInfo[i][1] == index){\n          this.edgeInfo.splice(i, 1)\n        }\n      }\n    },\n    deleteEdge1: function(index1, index2){\n      for(let i=this.edgeInfo.length-1; i>=0; i--){\n        if(this.edgeInfo[i][0] == index1 || this.edgeInfo[i][1] == index2){\n          this.edgeInfo.splice(i, 1)\n        }\n      }\n    },\n    getEdgeInfo: function(){\n      return this.edgeInfo\n    },\n    updateRegex: function(regex){\n      this.Regex = regex\n    },\n    getRegex: function(){\n      return this.Regex\n    },\n    updateResultList: function(data){\n      this.queryList = data\n    },\n    getResultList: function(){\n      return this.queryList\n    },\n    updatehighlightBar: function(data){\n      this.highlightBar = data\n    },\n    gethighlightBar: function(){\n      return this.highlightBar\n    },\n    updateRegDict: function(data){\n      this.regDict = data\n    },\n    getRegDict: function(){\n      return this.regDict\n    },\n    updateResultNum: function(data){\n      this.resultNum = data\n    },\n    getResultNum: function(){\n      return this.resultNum\n    },\n    updateCurResult: function(data){\n      this.curResult = data\n    },\n    getCurResult: function(){\n      return this.curResult\n    },\n    updateVisTree: function(index){\n      console.log(\"visTreeDataIndex\", this.visTreeDataIndex)\n      this.visTreeDataIndex = index\n    },\n    getVisTreeData: function(){\n      return this.curResult[this.visTreeDataIndex]\n    },\n    updateSameTree: function(data){\n      this.same_tree = data\n    },\n    getSameTree: function(index){\n      if(index in this.same_tree)\n        return this.same_tree[index]\n      else \n        return index\n    }\n\n\n\n}"]}]}
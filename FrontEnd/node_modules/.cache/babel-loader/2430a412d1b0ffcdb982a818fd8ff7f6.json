{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/EleNode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/EleNode.vue","mtime":1670489555355},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  name: 'EleNode',\n  components: {},\n  props: {\n    nodeExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      rectKey: 0,\n      rectKey1: 1\n    };\n  },\n  mounted: function mounted() {//console.log('nodeExpression', this.nodeExpression)\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    },\n    nodeDefinitionState: function nodeDefinitionState() {\n      this.rectKey = (this.rectKey + 1) % 2;\n      this.rectKey1 = (this.rectKey1 + 1) % 2;\n    },\n    selectedDomKey: function selectedDomKey() {}\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'selectedDom', 'selectedDomKey', 'nodeDefinitionState']), {\n    getNodeHighlightState: function getNodeHighlightState() {\n      return this.nodeExpression.key === this.selectedDomKey;\n    },\n    getNodeDefineState: function getNodeDefineState() {\n      if ('definition' in this.nodeExpression) {\n        if (this.nodeExpression['definition']) return true;\n      }\n    },\n    nodeTransform: function nodeTransform() {\n      return \"translate(\".concat(20, \", \", 1, \")\");\n    },\n    nameTransform: function nameTransform() {\n      if (this.nodeExpression['nodeName'] == '.') return \"translate(\".concat(35, \", \", 9, \")\");\n      return \"translate(\".concat(35, \", \", 18, \")\");\n    }\n  }),\n  methods: _objectSpread({}, mapMutations(['UPDATE_SELECTED_DOM', 'UPDATE_NODE_DEFINITION_STATE', 'UPDATE_REPEAT_DOM', 'UPDATE_SELECTED_PART', 'UPDATE_CONDITION_STATE']), {\n    checkName: function checkName() {\n      if ('nodeName' in this.nodeExpression) {\n        return true;\n      }\n\n      return false;\n    },\n    updateSelectedNode: function updateSelectedNode() {\n      // this.UPDATE_NODE_DEFINITION_STATE()\n      sysDatasetObj.updateSelectedDomKey(this.nodeExpression['key']);\n      this.UPDATE_SELECTED_DOM(this.nodeExpression);\n      this.UPDATE_CONDITION_STATE(false);\n      this.UPDATE_NODE_DEFINITION_STATE();\n    },\n    nodeStyle: function nodeStyle() {\n      var tmpKey = sysDatasetObj.getSelectedDomKey();\n\n      if (this.nodeExpression.key === tmpKey) {\n        return \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\" + \"stroke: red;\";\n      }\n\n      return \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \"stroke-dasharray: 0 0; \" + \"stroke-width: 1;\";\n    },\n    nameStyle: function nameStyle() {\n      if (this.nodeExpression['nodeName'] == '.') {\n        return \"fill: white !important; font-size: 40px;\";\n      } else return \"fill: white !important; font-size: 18px;\";\n\n      if (!this.nodeExpression['nodeColor'] || this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\") {\n        return \"fill: black !important;\";\n      } else return \"fill: white !important;\";\n    }\n  })\n};",{"version":3,"sources":["EleNode.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <svg class=\"re-node\">\n        <rect class=\"node-rect\" :class=\"{'highlighted': getNodeHighlightState, 'defined': getNodeDefineState}\" \n            :style=\"nodeStyle()\"\n            width=\"30\" height=\"30\" \n            :transform=\"nodeTransform\" \n            :key = \"rectKey\"\n            @click=\"updateSelectedNode\"/>\n        <text \n            :v-if=\"checkName()\"\n            class=\"node-name\"\n            :style=\"nameStyle()\"\n            :transform=\"nameTransform\" \n            text-anchor= \"middle\"\n            alignment-baseline= \"middle\"\n            @click=\"updateSelectedNode\">\n            {{nodeExpression['nodeName']}}\n        </text>\n        <rect class=\"node-rect-opacity\"\n            width=\"30\" height=\"30\" \n            :transform=\"nodeTransform\" \n            :key = \"rectKey1\"\n            @click=\"updateSelectedNode\"/>\n\n\n    </svg>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n\nexport default {\n  name: 'EleNode',\n  components: {\n    \n  },\n  props: {\n    nodeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n        rectKey: 0,\n        rectKey1: 1,\n    }\n  },\n  mounted() {\n    \n    //console.log('nodeExpression', this.nodeExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n      nodeDefinitionState: function(){\n        this.rectKey = (this.rectKey + 1) % 2\n        this.rectKey1 = (this.rectKey1 + 1)%2\n      },\n      selectedDomKey: function(){\n      }\n\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n      'nodeDefinitionState'\n    ]),\n    getNodeHighlightState () {\n        return this.nodeExpression.key === this.selectedDomKey\n    },\n    getNodeDefineState(){\n        if('definition' in this.nodeExpression){\n            if(this.nodeExpression['definition'])\n                return true\n        }\n    },\n    nodeTransform(){\n        return `translate(${20}, ${1})`\n    },\n    nameTransform(){\n        if(this.nodeExpression['nodeName'] == '.')\n            return `translate(${35}, ${9})`\n        return `translate(${35}, ${18})`\n    }\n   \n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n      'UPDATE_REPEAT_DOM',\n      'UPDATE_SELECTED_PART',\n      'UPDATE_CONDITION_STATE'\n    ]),\n\n    checkName(){\n        if('nodeName' in this.nodeExpression){\n            return true\n        }\n        return false\n    },\n    updateSelectedNode() {\n       // this.UPDATE_NODE_DEFINITION_STATE()\n        sysDatasetObj.updateSelectedDomKey(this.nodeExpression['key'])\n        this.UPDATE_SELECTED_DOM(this.nodeExpression)\n        this.UPDATE_CONDITION_STATE(false)\n        this.UPDATE_NODE_DEFINITION_STATE()\n    },\n    nodeStyle(){\n        let tmpKey = sysDatasetObj.getSelectedDomKey()\n        if(this.nodeExpression.key === tmpKey){\n            return ( \n                        \"fill: \" + this.nodeExpression['nodeColor'] + \"; \"+\n                        \"stroke-dasharray: 0 0; \" + \n                        \"stroke-width: 1;\"+\n                        \"stroke: red;\"\n            )\n        }\n        return (\n            \"fill: \" + this.nodeExpression['nodeColor'] + \"; \" + \n            \"stroke-dasharray: 0 0; \" + \n            \"stroke-width: 1;\"\n        )\n\n    },\n    nameStyle(){\n        if(this.nodeExpression['nodeName'] == '.'){\n            return \"fill: white !important; font-size: 40px;\"\n        }\n        else \n            return \"fill: white !important; font-size: 18px;\"\n        if(!this.nodeExpression['nodeColor']|| this.nodeExpression['nodeColor'] == \"\" || this.nodeExpression['nodeColor'] == \"#FFFFFF\"){\n            return \"fill: black !important;\"\n        }\n        else return \"fill: white !important;\"\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-node {\n  height: 100%;\n  width: 30%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n}\n.node-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 4 2;\n    fill: rgb(255, 255, 255);\n}\n.node-rect-opacity{\n    opacity: 0;\n    cursor: pointer;\n}\n.upper-rect {\n    stroke: #c4bbbb;\n    stroke-width: 2;\n    stroke-dasharray: 2 1.67 3 1.67 3 1.67 2 0.0001;\n    fill: white;\n}\n.repeat-rect{\n    opacity: 0;\n}\n</style>\n\n<style scoped lang=\"less\">\n// .node-name { \n//     fill: white; \n//     font-size: 20px;\n// }\n</style>\n"],"sourceRoot":"src/views/REView/REComponents"}]}
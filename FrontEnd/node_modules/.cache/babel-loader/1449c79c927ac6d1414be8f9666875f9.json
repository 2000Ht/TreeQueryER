{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/REView/REComponents/REWholeTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/src/views/REView/REComponents/REWholeTree.vue","mtime":1648714649000},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/个人资料/研究生资料/个人论文/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u4E2A\\u4EBA\\u8D44\\u6599/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main-sumbit/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport RENode from '@/views/REView/REComponents/RENode.vue';\nimport REPath from '@/views/REView/REComponents/REPath.vue';\nimport REOr from '@/views/REView/REComponents/REOr.vue';\nimport REBranch from '@/views/REView/REComponents/REBranch.vue';\nimport REElementComposition from '@/views/REView/REComponents/REElementComposition.vue';\nexport default {\n  name: 'REWholeTree',\n  components: {\n    RENode: RENode,\n    REPath: REPath,\n    REOr: REOr,\n    REBranch: REBranch,\n    REElementComposition: REElementComposition\n  },\n  props: {\n    wholeTreeExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    console.log('wholeTreeExpression', this.wholeTreeExpression);\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode'])),\n  methods: {\n    computeItemKey: function computeItemKey(d) {\n      return 'item' + d;\n    },\n    elementCompositionCheck: function elementCompositionCheck() {\n      if ('elementComposition' in this.wholeTreeExpression) {\n        if (this.wholeTreeExpression['elementComposition']['exist']['composition'].length + this.wholeTreeExpression['elementComposition']['all']['composition'].length > 0) return true;\n        return false;\n      }\n    }\n  }\n};",{"version":3,"sources":["REWholeTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAaA,SAAA,QAAA,EAAA,YAAA,QAAA,MAAA;AACA,OAAA,MAAA,MAAA,wCAAA;AACA,OAAA,MAAA,MAAA,wCAAA;AACA,OAAA,IAAA,MAAA,sCAAA;AACA,OAAA,QAAA,MAAA,0CAAA;AACA,OAAA,oBAAA,MAAA,sDAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA,MADA;AAEA,IAAA,MAAA,EAAA,MAFA;AAGA,IAAA,IAAA,EAAA,IAHA;AAIA,IAAA,QAAA,EAAA,QAJA;AAKA,IAAA,oBAAA,EAAA;AALA,GAFA;AASA,EAAA,KAAA,EAAA;AACA,IAAA,mBAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AADA,GATA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA,EAAA;AAGA,GAlBA;AAoBA,EAAA,OApBA,qBAoBA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,KAAA,mBAAA;AACA,GAtBA;AAuBA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA,uBAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,aAAA;AACA;AAHA,GAvBA;AA4BA,EAAA,QAAA,oBACA,QAAA,CAAA,CACA,aADA,CAAA,CADA,CA5BA;AAkCA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,CADA,EACA;AACA,aAAA,SAAA,CAAA;AAEA,KAJA;AAKA,IAAA,uBALA,qCAKA;AACA,UAAA,wBAAA,KAAA,mBAAA,EAAA;AACA,YAAA,KAAA,mBAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,aAAA,EAAA,MAAA,GACA,KAAA,mBAAA,CAAA,oBAAA,EAAA,KAAA,EAAA,aAAA,EAAA,MADA,GACA,CADA,EAEA,OAAA,IAAA;AACA,eAAA,KAAA;AACA;AACA;AAZA;AAlCA,CAAA","sourcesContent":["<template>\n  <g class=\"re-wholetree\">\n    <g v-for=\"(item, index1) in wholeTreeExpression['composition']\" :key=\"computeItemKey(index1)\">\n        <RENode v-if=\"item['type'] == 'node'\" :nodeExpression=\"item\" :key=\"item.key\" ></RENode>\n        <REPath v-if=\"item['type'] == 'path'\" :pathExpression=\"item\" :key=\"item.key\"></REPath>\n        <REOr v-if=\"item['type'] == 'or'\" :orExpression=\"item\" :key=\"item.key\"></REOr>\n        <REBranch v-if=\"item['type'] == 'branch'\" :branchExpression=\"item\" :key=\"item.key\"></REBranch>\n    </g>\n    <REElementComposition v-if=\"elementCompositionCheck()\" :elementCompositionExpression=\"wholeTreeExpression['elementComposition']\" :key=\"wholeTreeExpression['elementComposition'].key\"></REElementComposition>\n  </g>\n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n    import REBranch from '@/views/REView/REComponents/REBranch.vue';\n    import REElementComposition from '@/views/REView/REComponents/REElementComposition.vue'\n\nexport default {\n  name: 'REWholeTree',\n  components: {\n    RENode,\n    REPath,\n    REOr,\n    REBranch,\n    REElementComposition\n  },\n  props: {\n    wholeTreeExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n\n    }\n  },\n\n  mounted() {\n    console.log('wholeTreeExpression', this.wholeTreeExpression)\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode'\n    ]),\n   \n  },\n  methods: {\n    computeItemKey(d){\n        return 'item'+d\n\n    },\n    elementCompositionCheck(){\n      if('elementComposition' in this.wholeTreeExpression){\n        if((this.wholeTreeExpression['elementComposition']['exist']['composition'].length \n              + this.wholeTreeExpression['elementComposition']['all']['composition'].length)>0)\n              return true\n        return false\n      }\n    }\n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-wholetree {\n  height: 100%;\n  width: 100%;\n\n}\n</style>\n"],"sourceRoot":"src/views/REView/REComponents"}]}
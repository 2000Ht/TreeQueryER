{"remainingRequest":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REBranch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/src/views/REView/REComponents/REBranch.vue","mtime":1648714649000},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/个人论文/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/\\u4E2A\\u4EBA\\u8BBA\\u6587/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport RENode from '@/views/REView/REComponents/RENode.vue';\nimport REPath from '@/views/REView/REComponents/REPath.vue';\nimport REOr from '@/views/REView/REComponents/REOr.vue';\nexport default {\n  name: 'REBranch',\n  components: {\n    RENode: RENode,\n    REPath: REPath,\n    REOr: REOr\n  },\n  beforeCreate: function beforeCreate() {\n    this.$options.components.REPath = require(\"@/views/REView/REComponents/REPath.vue\").default;\n  },\n  props: {\n    branchExpression: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    console.log(\"REBranch Refrshed\");\n  },\n  watch: {\n    displayMode: function displayMode() {\n      console.log('displayMode');\n    }\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'selectedDom', 'selectedDomKey']), {\n    getNodeHighlightState: function getNodeHighlightState() {\n      return this.branchExpression.key === this.selectedDomKey;\n    },\n    branchTransform: function branchTransform() {\n      return \"translate(\".concat(this.branchExpression['x'], \", \").concat(this.branchExpression['y'], \")\");\n    },\n    bracketCompute: function bracketCompute() {\n      var x1 = this.branchExpression['x1Bracket'];\n      var y1 = this.branchExpression['y1Bracket'];\n      var x2 = this.branchExpression['x2Bracket'];\n      var y2 = this.branchExpression['y2Bracket'];\n      return \" M \" + x1 + \" \" + y1 + \" h \" + -8 + \" V \" + y2 + \" h \" + 8;\n    },\n    bracketTransform: function bracketTransform() {\n      var x1 = this.branchExpression['x1Bracket'] - 8;\n      var y1 = this.branchExpression['y1Bracket'];\n      var x2 = this.branchExpression['x2Bracket'];\n      var y2 = this.branchExpression['y2Bracket'];\n      return \"translate(\".concat(x1, \", \").concat(y1, \")\");\n    },\n    heightCompute: function heightCompute() {\n      var x1 = this.branchExpression['x1Bracket'];\n      var y1 = this.branchExpression['y1Bracket'];\n      var x2 = this.branchExpression['x2Bracket'];\n      var y2 = this.branchExpression['y2Bracket'];\n      return y2 - y1;\n    },\n    selectedCompute: function selectedCompute() {\n      var x1 = this.branchExpression['x1Selected'];\n      var x2 = this.branchExpression['x2Selected'];\n      var y1 = this.branchExpression['ySelected'];\n      return \"M \" + x1 + \" \" + y1 + \"H \" + x2;\n    }\n  }),\n  methods: _objectSpread({}, mapMutations(['UPDATE_SELECTED_DOM', 'UPDATE_SELECTED_PART']), {\n    computeItemKey: function computeItemKey(d) {\n      return \"item\" + d;\n    },\n    updateSelectedBranch: function updateSelectedBranch() {\n      this.UPDATE_SELECTED_DOM(this.branchExpression);\n    },\n    updateSelectedPart: function updateSelectedPart() {\n      if ('selected' in this.branchExpression) {\n        this.branchExpression['selected'] = !this.branchExpression['selected'];\n      } else {\n        this.branchExpression['selected'] = true;\n      }\n\n      this.UPDATE_SELECTED_PART();\n    }\n  })\n};",{"version":3,"sources":["REBranch.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <g class=\"re-branch\">\n        <path :d=\"bracketCompute\" @click=\"updateSelectedBranch()\" @dblclick=\"updateSelectedPart\" :class=\"{'highlighted': getNodeHighlightState }\"/>\n        <rect :transform=\"bracketTransform\" @click=\"updateSelectedBranch()\" @dblclick=\"updateSelectedPart\" class=\"rect-cover\" width=\"10\" :height=\"heightCompute\" opacity=\"0\"/>\n        <g v-for=\"(item, index) in branchExpression['composition']\" :key=\"computeItemKey(index)\">\n            <RENode v-if=\"item['type'] == 'node'\" :nodeExpression=\"item\"></RENode>\n            <REPath v-if=\"item['type'] == 'path'\" :pathExpression=\"item\"></REPath>\n            <REOr v-if=\"item['type'] == 'or'\" :orExpression=\"item\"></REOr>\n        </g>\n        <path v-if=\"branchExpression['selected']\" :d=\"selectedCompute\" />\n    </g>\n    \n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import RENode from '@/views/REView/REComponents/RENode.vue';\n    import REPath from '@/views/REView/REComponents/REPath.vue';\n    import REOr from '@/views/REView/REComponents/REOr.vue';\n\nexport default {\n  name: 'REBranch',\n  components: {\n    RENode,\n    REPath,\n    REOr\n  },\n  beforeCreate() {\n    this.$options.components.REPath = require(\"@/views/REView/REComponents/REPath.vue\").default;\n  },\n  props: {\n    branchExpression:{\n      type: Object\n    }\n  },\n  data() {\n    return {\n\n    }\n  },\n  mounted() {\n    console.log(\"REBranch Refrshed\")\n  },\n  watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n      'selectedDomKey',\n    ]),\n    getNodeHighlightState () {\n        return this.branchExpression.key === this.selectedDomKey\n    },\n    branchTransform(){\n        return `translate(${this.branchExpression['x']}, ${this.branchExpression['y']})`\n    },\n    bracketCompute(){\n      var x1 = this.branchExpression['x1Bracket']\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn ( \" M \" +  x1 + \" \" +  y1 +\n         \t\t \" h \" + -8 +\n                 \" V \" + y2 +\n                 \" h \" + 8);\n    },\n    bracketTransform(){\n      var x1 = this.branchExpression['x1Bracket'] - 8\n      var y1 = this.branchExpression['y1Bracket']\n      var x2 = this.branchExpression['x2Bracket']\n      var y2 = this.branchExpression['y2Bracket']\n\n    \treturn `translate(${x1}, ${y1})`\n    },\n    heightCompute(){\n        var x1 = this.branchExpression['x1Bracket']\n        var y1 = this.branchExpression['y1Bracket']\n        var x2 = this.branchExpression['x2Bracket']\n        var y2 = this.branchExpression['y2Bracket']\n\n        return y2-y1\n    },\n    selectedCompute(){\n        var x1 = this.branchExpression['x1Selected']\n        var x2 = this.branchExpression['x2Selected']\n        var y1 = this.branchExpression['ySelected']\n\n        return ( \"M \" + x1 + \" \" + y1 + \n                 \"H \" + x2)\n    },\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_SELECTED_PART'\n    ]),\n    computeItemKey(d){\n        return \"item\"+d\n    },\n    updateSelectedBranch() {\n        this.UPDATE_SELECTED_DOM(this.branchExpression)\n    },\n    updateSelectedPart(){\n        if('selected' in this.branchExpression){\n            this.branchExpression['selected'] = !this.branchExpression['selected']\n        }\n        else{\n            this.branchExpression['selected'] = true\n        }\n        this.UPDATE_SELECTED_PART()\n    },\n    \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-branch {\n  height: 100%;\n  width: 100%;\n\n}\npath {\n    stroke: #000000;\n    stroke-width: 2px;\n    fill: none;\n    &.highlighted {\n        stroke: red;\n    }\n}\n</style>\n"],"sourceRoot":"src/views/REView/REComponents"}]}
{"remainingRequest":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/src/App.vue","mtime":1671103399841},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1660192275351},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1660192275271},{"path":"/Users/ht.mi/研究生资料/tree_visual_query/RETree-main/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1660192275522}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/ht.mi/\\u7814\\u7A76\\u751F\\u8D44\\u6599/tree_visual_query/RETree-main/FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations } from 'vuex';\nimport TreeVisView from \"./views/TreeVisView.vue\";\nimport DataFlowView from \"./views/DataFlowView.vue\";\nimport REView from \"./views/REView.vue\";\nimport VisView from \"./views/VisView.vue\";\nimport OverviewPanel from \"./views/OverviewPanel.vue\";\nimport VisPanel from \"./views/VisPanel.vue\";\nimport RecommendPanel from \"./views/RecommendPanel.vue\";\nimport EditorPanel from \"./views/EditorPanel.vue\";\nimport GraphPanel from \"./views/GraphPanel.vue\";\nimport RegRecommendPanel from \"./views/RegRecommendationPanel.vue\";\nimport { loadHierarchicalData } from \"./data/dataloading.js\";\nimport { Dataset } from \"./data/dataset.js\";\nimport { getHierarchyData } from \"./communication/communicator.js\";\nimport { getComponentKey } from '@/utils/componentkey.js';\nimport { readFile } from 'fs';\nimport * as fs from 'fs';\nexport default {\n  name: 'app',\n  components: {\n    TreeVisView: TreeVisView,\n    DataFlowView: DataFlowView,\n    REView: REView,\n    VisView: VisView,\n    OverviewPanel: OverviewPanel,\n    VisPanel: VisPanel,\n    RecommendPanel: RecommendPanel,\n    EditorPanel: EditorPanel,\n    GraphPanel: GraphPanel,\n    RegRecommendPanel: RegRecommendPanel\n  },\n  data: function data() {\n    return {\n      appName: \"TreeQueryER\",\n      operationArray: ['data'],\n      activeIndex: '',\n      loadingData: false,\n      curIndex: 0\n    };\n  },\n  computed: _objectSpread({}, mapState(['displayMode', 'curRegex', 'regexCommitState', 'attributeList', 'regexViewState', 'visViewState', 'curRegexIndex', 'curConnectionNode', 'connectionState', 'queryStateIndex', 'queryStateRegex', 'queryIndex', 'queryPage', 'queryStatePage', 'queryStateCoding', 'queryCoding'])),\n  watch: {\n    regexCommitState: function regexCommitState() {\n      this.regexQuery(this.curRegexIndex);\n    },\n    connectionState: function connectionState() {\n      this.regexQuery(this.curConnectionNode);\n    },\n    queryStateIndex: function queryStateIndex() {\n      this.dataQuery1(this.queryIndex);\n    },\n    queryStateRegex: function queryStateRegex() {\n      this.dataQuery2();\n    },\n    queryStatePage: function queryStatePage() {\n      this.dataQuery3(this.queryPage);\n    },\n    queryStateCoding: function queryStateCoding() {\n      this.dataQuery4(this.queryCoding);\n    }\n  },\n  beforeMount: function beforeMount() {\n    var self = this;\n    window.sysDatasetObj = new Dataset();\n    sysDatasetObj.init();\n    loadHierarchicalData('treeDataset/new_same_tree1.json', function (data) {\n      sysDatasetObj.updateSameTree(data); // let tmpData = sysDatasetObj.returnInitData()\n      // self.attributeCompute(tmpData)\n    });\n  },\n  mounted: function mounted() {},\n  methods: _objectSpread({}, mapMutations(['UPDATE_ATTRIBUTE_LIST_NUMBER', 'UPDATE_ATTRIBUTE_LIST_STRING', 'UPDATE_ATTRIBUTE_LIST_BOOLEAN', 'UPDATE_VISVIEW', 'DATA_QUERY_INDEX', 'UPDATE_VIS_PANEL', 'UPDATE_REG_PANEL', 'UPDATE_TREE_LIST']), {\n    iconClass: function iconClass(operation) {\n      return 'icon-' + operation;\n    },\n    // attributeCompute(curNode){\n    //   if('data' in curNode){\n    //     curNode['data']['nodeIndex'] = this.curIndex\n    //     this.curIndex = this.curIndex + 1\n    //     for(let key in curNode['data']){\n    //       if(!(key in this.attributeList)){\n    //         if(typeof(curNode['data'][key]) == 'number')\n    //           this.UPDATE_ATTRIBUTE_LIST_NUMBER(key)\n    //         else if(typeof(curNode['data'][key]) == 'string')\n    //           this.UPDATE_ATTRIBUTE_LIST_STRING(key)\n    //         else if(typeof(curNode['data'][key]) == 'boolean'){\n    //           this.UPDATE_ATTRIBUTE_LIST_BOOLEAN(key)\n    //         }\n    //       }\n    //     }\n    //   }\n    //   else{\n    //     curNode['data'] = {}\n    //     curNode['data']['nodeIndex'] = this.curIndex\n    //     if('categoryName' in curNode){\n    //       curNode['data']['name'] = curNode['categoryName']\n    //     }\n    //     else{\n    //       curNode['data']['name'] = curNode['name']\n    //     }\n    //     curNode['data']['num'] = curNode['num']\n    //     this.curIndex = this.curIndex + 1\n    //     for(let key in curNode['data']){\n    //       if(!(key in this.attributeList)){\n    //         if(typeof(curNode['data'][key]) == 'number')\n    //           this.UPDATE_ATTRIBUTE_LIST_NUMBER(key)\n    //         else if(typeof(curNode['data'][key]) == 'string')\n    //           this.UPDATE_ATTRIBUTE_LIST_STRING(key)\n    //         else if(typeof(curNode['data'][key]) == 'boolean'){\n    //           this.UPDATE_ATTRIBUTE_LIST_BOOLEAN(key)\n    //         }\n    //       }\n    //     }\n    //   }\n    //   if('children' in curNode){\n    //     for(let child of curNode['children']){\n    //       this.attributeCompute(child)\n    //     }\n    //   }\n    // },\n    REViewStyle: function REViewStyle() {\n      if (this.regexViewState) {\n        return \"position: absolute; \" + \"top: 40%; \" + \"left: 0%; \" + \"bottom: 0%; \" + \"right: 0%; \";\n      } else {\n        return \"position: absolute; \" + \"top: 40%; \" + \"left: 0%; \" + \"bottom: 0%; \" + \"right: 0%; \" + \"display:none; !important\";\n      }\n    },\n    VisViewStyle: function VisViewStyle() {\n      if (this.visViewState) {\n        return \"position: absolute; \" + \"top: 40%; \" + \"left: 0%; \" + \"bottom: 0%; \" + \"right: 0%; \";\n      } else {\n        return \"position: absolute; \" + \"top: 100%; \" + \"left: 0%; \" + \"bottom: 0%; \" + \"right: 0%; \";\n      }\n    },\n    regexQuery: function regexQuery(regexIndex) {\n      var self = this;\n      var hierarchyDataDeferObj = $.Deferred();\n      $.when(hierarchyDataDeferObj).then(function () {\n        self.loadingData = false;\n      });\n      var hierarchicalParam = {\n        'regex': sysDatasetObj.returnRegex(regexIndex),\n        'hierarchyData': sysDatasetObj.returnHierarchyDataIn(regexIndex)\n      }; // initialize the tabular dataset\n\n      getHierarchyData(hierarchicalParam, function (processed_hierarchy_data) {\n        //let processed_hierarchy_data_json = JSON.parse(processed_hierarchy_data)\n        sysDatasetObj.updateHierarchyDataOut(processed_hierarchy_data, regexIndex);\n        hierarchyDataDeferObj.resolve();\n        self.UPDATE_VISVIEW();\n        sysDatasetObj.DataOutFlow(regexIndex);\n        var tmpIndexList = sysDatasetObj.returnConnection(regexIndex);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = tmpIndexList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var tmpIndex = _step.value;\n            self.regexQuery(tmpIndex);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n    },\n    dataQuery1: function dataQuery1(queryIndex) {\n      var self = this;\n      var hierarchyDataDeferObj = $.Deferred();\n      $.when(hierarchyDataDeferObj).then(function () {\n        self.loadingData = false;\n      });\n      var hierarchicalParam = {\n        'type': 1,\n        'index': queryIndex\n      }; // initialize the tabular dataset\n\n      getHierarchyData(hierarchicalParam, function (processed_hierarchy_data) {\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization']);\n        sysDatasetObj.updateResultNum(processed_hierarchy_data['list_num']);\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['vis_list']);\n        hierarchyDataDeferObj.resolve();\n        self.UPDATE_VIS_PANEL(); //self.UPDATE_VISVIEW()\n      });\n    },\n    dataQuery2: function dataQuery2() {\n      var self = this;\n      var hierarchyDataDeferObj = $.Deferred();\n      $.when(hierarchyDataDeferObj).then(function () {\n        self.loadingData = false;\n      });\n      var hierarchicalParam = {\n        'type': 2,\n        'regex': sysDatasetObj.getRegex(),\n        'condition': sysDatasetObj.getCondition()\n      };\n      console.log(\"hierarchicalParam\", hierarchicalParam); // initialize the tabular dataset\n\n      getHierarchyData(hierarchicalParam, function (processed_hierarchy_data) {\n        console.log(\"processed_hierarchy_data: \", processed_hierarchy_data);\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization']); // sysDatasetObj.updateRecommend(processed_hierarchy_data['recommendation'])\n\n        sysDatasetObj.updateResultList(processed_hierarchy_data['result']);\n        sysDatasetObj.updatehighlightBar(processed_hierarchy_data['highlightBar']);\n        sysDatasetObj.updateRegDict(processed_hierarchy_data['reg_dict']);\n        sysDatasetObj.updateResultNum(processed_hierarchy_data['result_num']);\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result']);\n        var highlight_list = processed_hierarchy_data['highlight_list'];\n        d3.selectAll(\".dot\").classed(\"dot-selected\", false);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var data_index = _step2.value;\n            d3.select(\"#dot\" + data_index).classed(\"dot-selected\", true);\n            var tmp_transform = d3.select('#dot' + data_index).attr(\"transform\");\n            var tmp_data = d3.select('#dot' + data_index).data();\n            var tmp_x = +d3.select('#dot' + data_index).attr(\"x\");\n            var tmp_y = +d3.select('#dot' + data_index).attr(\"y\");\n            var tmp_r = +d3.select('#dot' + data_index).attr(\"r\");\n            d3.select('#dot' + data_index).remove();\n            d3.select(\".overview-svg\").selectAll('#dot' + data_index).data(tmp_data).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"id\", function (d) {\n              return \"dot\" + data_index;\n            }).classed(\"dot-selected\", true).attr(\"transform\", function (d) {\n              return tmp_transform;\n            }).attr(\"m\", function (d) {\n              return d['m'];\n            }).attr(\"r\", function () {\n              return tmp_r;\n            }).on('click', function () {\n              self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"m\")));\n            });\n          };\n\n          for (var _iterator2 = highlight_list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        hierarchyDataDeferObj.resolve();\n        self.UPDATE_VIS_PANEL();\n        self.UPDATE_REG_PANEL();\n      });\n    },\n    dataQuery3: function dataQuery3(page_index) {\n      var self = this;\n      var hierarchyDataDeferObj = $.Deferred();\n      $.when(hierarchyDataDeferObj).then(function () {\n        self.loadingData = false;\n      });\n      var hierarchicalParam = {\n        'type': 3,\n        'index': page_index\n      }; // initialize the tabular dataset\n\n      getHierarchyData(hierarchicalParam, function (processed_hierarchy_data) {\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result']);\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization']);\n        hierarchyDataDeferObj.resolve();\n        self.UPDATE_TREE_LIST();\n      });\n    },\n    dataQuery4: function dataQuery4(reg_coding) {\n      var self = this;\n      var hierarchyDataDeferObj = $.Deferred();\n      $.when(hierarchyDataDeferObj).then(function () {\n        self.loadingData = false;\n      });\n      var hierarchicalParam = {\n        'type': 4,\n        'coding': reg_coding\n      }; // initialize the tabular dataset\n\n      getHierarchyData(hierarchicalParam, function (processed_hierarchy_data) {\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization']);\n        sysDatasetObj.updateResultNum(processed_hierarchy_data['result_num']);\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result']);\n        hierarchyDataDeferObj.resolve();\n        self.UPDATE_VIS_PANEL();\n      });\n    }\n  })\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\" v-loading=\"loadingData\">\n    <el-menu\n        class=\"el-menu-demo\"\n        mode=\"horizontal\"\n        background-color=\"#676767\"\n        text-color=\"#fff\"\n        :default-active=\"activeIndex\"\n        active-text-color=\"#ffd04b\">\n        <el-menu-item class='labelIcon' id=\"title\">\n          {{appName}}\n        </el-menu-item>\n        <!-- <el-tooltip class='labelIcon' v-for=\"operation in operationArray\" :key=\"operation\" :content=\"operation\" effect=\"light\">\n          <el-menu-item :index=\"operation\">\n            {{operation}}\n          </el-menu-item>\n        </el-tooltip> -->\n    </el-menu>\n    <div class = \"content-container\" v-if=\"!loadingData\">\n      <div class=\"overview-panel\">\n        <OverviewPanel></OverviewPanel>\n      </div>\n      <div class=\"vis-panel\">\n        <VisPanel></VisPanel>\n      </div>\n\n      <div class=\"editor-panel\">\n        <EditorPanel></EditorPanel>\n      </div>\n      <div class=\"regs-panel\">\n         <RegRecommendPanel></RegRecommendPanel>\n      </div>\n\n      <div class=\"trees-panel\">\n        <RecommendPanel></RecommendPanel>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport { mapState, mapMutations } from 'vuex';\nimport TreeVisView from './views/TreeVisView.vue'\nimport DataFlowView from './views/DataFlowView.vue'\nimport REView from './views/REView.vue'\nimport VisView from './views/VisView.vue'\nimport OverviewPanel from './views/OverviewPanel.vue'\nimport VisPanel from './views/VisPanel.vue'\nimport RecommendPanel from './views/RecommendPanel.vue'\nimport EditorPanel from './views/EditorPanel.vue'\nimport GraphPanel from './views/GraphPanel.vue'\nimport RegRecommendPanel from './views/RegRecommendationPanel.vue'\n\nimport { loadHierarchicalData } from './data/dataloading.js'\nimport { Dataset}  from './data/dataset.js'\nimport { getHierarchyData } from './communication/communicator.js'\nimport { getComponentKey } from '@/utils/componentkey.js'\n  import { readFile } from 'fs';\n  import * as fs from 'fs';\n\nexport default {\n  name: 'app',\n  components: {\n    TreeVisView, DataFlowView, REView, VisView,\n    OverviewPanel,VisPanel,RecommendPanel,EditorPanel,GraphPanel,RegRecommendPanel\n  },\n  data() {\n    return {\n      appName: \"TreeQueryER\",\n      operationArray: ['data'],\n      activeIndex: '',\n      loadingData: false,\n      curIndex: 0,\n    }\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'curRegex',\n      'regexCommitState',\n      'attributeList',\n      'regexViewState',\n      'visViewState',\n      'curRegexIndex',\n      'curConnectionNode',\n      'connectionState',\n\n      'queryStateIndex',\n      'queryStateRegex',\n      'queryIndex',\n      'queryPage',\n      'queryStatePage',\n      'queryStateCoding',\n      'queryCoding',\n    ]),\n  },\n  watch:{\n    regexCommitState: function(){\n      this.regexQuery(this.curRegexIndex)\n    },\n    connectionState: function(){\n      this.regexQuery(this.curConnectionNode)\n    },\n\n    queryStateIndex: function(){\n      this.dataQuery1(this.queryIndex)\n    },\n    queryStateRegex: function(){\n      this.dataQuery2()\n    },\n    queryStatePage: function(){\n      this.dataQuery3(this.queryPage)\n    },\n    queryStateCoding: function(){\n      this.dataQuery4(this.queryCoding)\n    }\n\n  },\n  beforeMount() {\n    let self = this\n    window.sysDatasetObj = new Dataset()\n    sysDatasetObj.init()\n    loadHierarchicalData('treeDataset/new_same_tree1.json', function(data){\n    sysDatasetObj.updateSameTree(data)\n      // let tmpData = sysDatasetObj.returnInitData()\n      // self.attributeCompute(tmpData)\n    })\n  },\n  mounted() {\n\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_ATTRIBUTE_LIST_NUMBER',\n      'UPDATE_ATTRIBUTE_LIST_STRING',\n      'UPDATE_ATTRIBUTE_LIST_BOOLEAN',\n      'UPDATE_VISVIEW',\n\n      'DATA_QUERY_INDEX',\n      'UPDATE_VIS_PANEL',\n      'UPDATE_REG_PANEL',\n      'UPDATE_TREE_LIST'\n    ]),\n    iconClass(operation) {\n      return 'icon-' + operation\n    },\n    // attributeCompute(curNode){\n    //   if('data' in curNode){\n    //     curNode['data']['nodeIndex'] = this.curIndex\n    //     this.curIndex = this.curIndex + 1\n    //     for(let key in curNode['data']){\n    //       if(!(key in this.attributeList)){\n    //         if(typeof(curNode['data'][key]) == 'number')\n    //           this.UPDATE_ATTRIBUTE_LIST_NUMBER(key)\n    //         else if(typeof(curNode['data'][key]) == 'string')\n    //           this.UPDATE_ATTRIBUTE_LIST_STRING(key)\n    //         else if(typeof(curNode['data'][key]) == 'boolean'){\n    //           this.UPDATE_ATTRIBUTE_LIST_BOOLEAN(key)\n    //         }\n    //       }\n    //     }\n    //   }\n    //   else{\n    //     curNode['data'] = {}\n    //     curNode['data']['nodeIndex'] = this.curIndex\n    //     if('categoryName' in curNode){\n    //       curNode['data']['name'] = curNode['categoryName']\n    //     }\n    //     else{\n    //       curNode['data']['name'] = curNode['name']\n    //     }\n    //     curNode['data']['num'] = curNode['num']\n    //     this.curIndex = this.curIndex + 1\n    //     for(let key in curNode['data']){\n    //       if(!(key in this.attributeList)){\n    //         if(typeof(curNode['data'][key]) == 'number')\n    //           this.UPDATE_ATTRIBUTE_LIST_NUMBER(key)\n    //         else if(typeof(curNode['data'][key]) == 'string')\n    //           this.UPDATE_ATTRIBUTE_LIST_STRING(key)\n    //         else if(typeof(curNode['data'][key]) == 'boolean'){\n    //           this.UPDATE_ATTRIBUTE_LIST_BOOLEAN(key)\n    //         }\n    //       }\n    //     }\n    //   }\n    //   if('children' in curNode){\n    //     for(let child of curNode['children']){\n    //       this.attributeCompute(child)\n    //     }\n    //   }\n    // },\n    REViewStyle(){\n      if(this.regexViewState){\n        return \"position: absolute; \" + \n          \"top: 40%; \" +\n          \"left: 0%; \" +\n          \"bottom: 0%; \" +\n          \"right: 0%; \"\n      }\n      else{\n        return \"position: absolute; \" + \n          \"top: 40%; \" +\n          \"left: 0%; \" +\n          \"bottom: 0%; \" +\n          \"right: 0%; \" +\n          \"display:none; !important\"\n      }\n    },\n    VisViewStyle(){\n      if(this.visViewState){\n        return \"position: absolute; \" + \n          \"top: 40%; \" +\n          \"left: 0%; \" +\n          \"bottom: 0%; \" +\n          \"right: 0%; \"\n      }\n      else{\n        return \"position: absolute; \" + \n          \"top: 100%; \" +\n          \"left: 0%; \" +\n          \"bottom: 0%; \" +\n          \"right: 0%; \"\n      }\n    },\n    regexQuery(regexIndex){\n      let self = this\n      let hierarchyDataDeferObj = $.Deferred()\n      $.when(hierarchyDataDeferObj).then(function() {\n        self.loadingData = false\n      })\n      \n      let hierarchicalParam = {\n        'regex': sysDatasetObj.returnRegex(regexIndex),\n        'hierarchyData': sysDatasetObj.returnHierarchyDataIn(regexIndex)\n      }\n      // initialize the tabular dataset\n      getHierarchyData(hierarchicalParam, function(processed_hierarchy_data) {\n        //let processed_hierarchy_data_json = JSON.parse(processed_hierarchy_data)\n        sysDatasetObj.updateHierarchyDataOut(processed_hierarchy_data, regexIndex)\n        hierarchyDataDeferObj.resolve()\n        self.UPDATE_VISVIEW()\n        sysDatasetObj.DataOutFlow(regexIndex)\n        let tmpIndexList = sysDatasetObj.returnConnection(regexIndex)\n        for(let tmpIndex of tmpIndexList){\n          self.regexQuery(tmpIndex)\n        }\n      })\n    },\n\n    dataQuery1(queryIndex){\n      let self = this\n      let hierarchyDataDeferObj = $.Deferred()\n      $.when(hierarchyDataDeferObj).then(function() {\n        self.loadingData = false\n      })\n      let hierarchicalParam = {\n        'type': 1,\n        'index': queryIndex\n      }\n      // initialize the tabular dataset\n      getHierarchyData(hierarchicalParam, function(processed_hierarchy_data) {\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization'])\n        sysDatasetObj.updateResultNum(processed_hierarchy_data['list_num'])\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['vis_list'])\n        hierarchyDataDeferObj.resolve()\n        self.UPDATE_VIS_PANEL()\n        //self.UPDATE_VISVIEW()\n      })\n\n    },\n    dataQuery2(){\n      let self = this\n      let hierarchyDataDeferObj = $.Deferred()\n      $.when(hierarchyDataDeferObj).then(function() {\n        self.loadingData = false\n      })\n      let hierarchicalParam = {\n        'type': 2,\n        'regex':sysDatasetObj.getRegex(),\n        'condition':sysDatasetObj.getCondition(),\n      }\n      console.log(\"hierarchicalParam\", hierarchicalParam)\n      // initialize the tabular dataset\n      getHierarchyData(hierarchicalParam, function(processed_hierarchy_data) {\n        console.log(\"processed_hierarchy_data: \",processed_hierarchy_data)\n        sysDatasetObj.updateVis(processed_hierarchy_data['visualization'])\n        // sysDatasetObj.updateRecommend(processed_hierarchy_data['recommendation'])\n        sysDatasetObj.updateResultList(processed_hierarchy_data['result'])\n        sysDatasetObj.updatehighlightBar(processed_hierarchy_data['highlightBar'])\n        sysDatasetObj.updateRegDict(processed_hierarchy_data['reg_dict'])\n        sysDatasetObj.updateResultNum(processed_hierarchy_data['result_num'])\n        sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result'])\n        let highlight_list = processed_hierarchy_data['highlight_list']\n        d3.selectAll(\".dot\").classed(\"dot-selected\", false)\n        for(let data_index of highlight_list){\n          d3.select(\"#dot\"+data_index).classed(\"dot-selected\", true)\n\n          let tmp_transform = d3.select('#dot'+data_index).attr(\"transform\")\n          let tmp_data = d3.select('#dot'+data_index).data()\n\n          let tmp_x = +d3.select('#dot'+data_index).attr(\"x\")\n          let tmp_y = +d3.select('#dot'+data_index).attr(\"y\")\n          let tmp_r = +d3.select('#dot'+data_index).attr(\"r\")\n          \n          d3.select('#dot'+data_index).remove()\n\n          d3.select(\".overview-svg\")\n          .selectAll('#dot'+data_index)\n              .data(tmp_data)\n              .enter()\n              .append(\"circle\")\n              .attr(\"class\",\"dot\")\n              .attr(\"id\", function(d) { return \"dot\"+data_index})\n              .classed(\"dot-selected\", true)\n              .attr(\"transform\", function(d){\n                return tmp_transform;\n              })\n              .attr(\"m\", function(d) {return d['m']})\n              .attr(\"r\", function(){\n                return tmp_r;\n              })\n              .on('click', function(){\n                  self.DATA_QUERY_INDEX(parseInt(this.getAttribute(\"m\")))\n              });\n        }\n        hierarchyDataDeferObj.resolve()\n        self.UPDATE_VIS_PANEL()\n        self.UPDATE_REG_PANEL()\n\n      })\n    },\n    dataQuery3(page_index){\n        let self = this\n        let hierarchyDataDeferObj = $.Deferred()\n        $.when(hierarchyDataDeferObj).then(function() {\n          self.loadingData = false\n        })\n        let hierarchicalParam = {\n          'type': 3,\n          'index': page_index\n        }\n        // initialize the tabular dataset\n        getHierarchyData(hierarchicalParam, function(processed_hierarchy_data) {\n          sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result'])\n          sysDatasetObj.updateVis(processed_hierarchy_data['visualization'])\n          hierarchyDataDeferObj.resolve()\n          self.UPDATE_TREE_LIST()\n        })\n    },\n    dataQuery4(reg_coding){\n        let self = this\n        let hierarchyDataDeferObj = $.Deferred()\n        $.when(hierarchyDataDeferObj).then(function() {\n          self.loadingData = false\n        })\n        let hierarchicalParam = {\n          'type': 4,\n          'coding': reg_coding\n        }\n        // initialize the tabular dataset\n        getHierarchyData(hierarchicalParam, function(processed_hierarchy_data) {\n          sysDatasetObj.updateVis(processed_hierarchy_data['visualization'])\n          sysDatasetObj.updateResultNum(processed_hierarchy_data['result_num'])\n          sysDatasetObj.updateCurResult(processed_hierarchy_data['cur_result'])\n          hierarchyDataDeferObj.resolve()\n          self.UPDATE_VIS_PANEL()\n        })\n    }\n  },\n}\n</script>\n\n<style lang=\"less\">\nhtml {\n  font-size: 100%;\n}\n@menu-height: 2rem;\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: absolute;\n  top: 0%;\n  bottom: 0%;\n  left: 0%;\n  right: 0%;\n  background-color: rgb(218, 218, 218);\n  .el-menu.el-menu--horizontal {\n    .el-menu-item {\n      height: @menu-height;\n      line-height: @menu-height;\n    }\n    .el-menu-item {\n      border-bottom-color: rgb(84, 92, 100) !important;\n      font-weight: bolder;\n      font-size: 1rem;\n      color: #dadada !important;\n      padding: 0 10px;\n      .icon {\n        color: #dadada !important;\n      }\n    }\n  }\n  .labelIcon {\n    font-size: 1rem;\n  }\n  .content-container {\n    position: absolute;\n    top: @menu-height;\n    left: 0%;\n    bottom: 0%;\n    right: 0%;\n    .overview-panel{\n      position: absolute;\n      top: 0px;\n      left: 0px;\n      bottom: 0px;\n      right: 80%;\n      background-color: white;\n      border-right: 1px #ddd solid;\n    }\n    .vis-panel{\n      position: absolute;\n      top: 0px;\n      left: 20%;\n      bottom: 40%;\n      right: 30%;\n      background-color: white;\n    }\n    .editor-panel{\n      position: absolute;\n      top: 0px;\n      left: 70%;\n      bottom: 40%;\n      right: 0px;\n      background-color: white;\n      border-left: 1px #ddd solid;\n    }\n    .regs-panel{\n      position: absolute;\n      top: 60%;\n      left: 70%;\n      bottom: 0px;\n      right: 0px;\n      background-color: white;\n      border-left: 1px #ddd solid;\n      border-top: 1px #ddd solid;;\n    }\n    .trees-panel{\n      position: absolute;\n      top: 60%;\n      left: 20%;\n      bottom: 0px;\n      right: 30%;\n      background-color: white;\n      border-top: 1px #ddd solid;\n    }\n\n  }\n  \t.node {\n\t\tcursor: pointer;\n\t}\n\n\t.node circle {\n\t  fill: #fff;\n\t  stroke: rgb(70, 90, 180);\n\t  stroke-width: 3px;\n\t}\n\n\t// .node text {\n\t//   font: 12px sans-serif;\n\t// }\n\n\t.link {\n\t  fill: none;\n\t  stroke: #ccc;\n\t  stroke-width: 2px;\n\t}\n}\n</style>\n"],"sourceRoot":"src"}]}